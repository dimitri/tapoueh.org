<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>tail -f /dev/dim</title>
    <link>http://tapoueh.org/index.html</link>
    <description>Dimitri Fontaine's blog</description>
    <language>en-us</language>
    <generator>Emacs Muse</generator>
<item>
  <title>Emacs Cheat Sheet</title>
  <link>http://tapoueh.org/blog/2011/07/20-emacs-cheat-sheet.html</link>
  <description><![CDATA[<p>I stumbled upon the following <em>cheat sheet</em> for <a href="http://www.gnu.org/software/emacs/">Emacs</a> yesterday, and it's
worth sharing.  I already learnt or discovered again some nice default
chords, like for example <code>C-x C-o runs the command delete-blank-lines</code> and
<code>C-M-o runs the command split-line</code>.  I guess I will use the later one a lot.</p>

<center>
<p><a class="image-link" href="../../../images/emacs-cheat-sheet.png">
<img src="../../../images/emacs-cheat-sheet-tn.png"></a></p>
</center>

<p>Hope you'll like it!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Wed, 20 Jul 2011 10:44:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/07/20-emacs-cheat-sheet.html</guid>
</item>
<item>
  <title>Elisp Breadcrumbs</title>
  <link>http://tapoueh.org/blog/2011/07/14-elisp-breadcrumbs.html</link>
  <description><![CDATA[<p class="first">A <a href="http://en.wikipedia.org/wiki/Breadcrumb_(navigation)">breadcrumb</a> is a navigation aid.  I just added one to this website, so that
it gets easier to browse from any article to its local and parents indexes
and back to <a href="../../../index.html">/dev/dim</a>, the root webpage of this site.</p>

<p>As it was not that much work to implement, here's the whole of it:</p>

<pre class="src">
<span style="color: #b22222;">;;;</span><span style="color: #b22222;">
</span><span style="color: #b22222;">;;; </span><span style="color: #b22222;">Breadcrumb support
</span><span style="color: #b22222;">;;;</span><span style="color: #b22222;">
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">tapoueh-breadcrumb-to-current-page</span> ()
  <span style="color: #bc8f8f;">"Return a list of (name . link) from the index root page to current one"</span>
  (<span style="color: #7f007f;">let*</span> ((current (muse-current-file))
         (cwd     (file-name-directory current))
         (project (muse-project-of-file current))
         (root    (muse-style-element <span style="color: #da70d6;">:path</span> (caddr project)))
         (path    (tapoueh-path-to-root))
         (dirs    (split-string (file-relative-name current root) <span style="color: #bc8f8f;">"/"</span>)))
    <span style="color: #b22222;">;; </span><span style="color: #b22222;">("blog" "2011" "07" "13-back-from-char11.muse")
</span>    (append
     (list (cons <span style="color: #bc8f8f;">"/dev/dim"</span> (concat path <span style="color: #bc8f8f;">"index.html"</span>)))
     (<span style="color: #7f007f;">loop</span> for p in (butlast dirs)
           collect (cons p (format <span style="color: #bc8f8f;">"%s%s/index.html"</span> path p))
           do (setq path (concat path p <span style="color: #bc8f8f;">"/"</span>))))))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">tapoueh-insert-breadcrumb-div</span> ()
  <span style="color: #bc8f8f;">"The real HTML inserting"</span>
  (insert <span style="color: #bc8f8f;">"&lt;div id=\"breadcrumb\"&gt;"</span>)
  (<span style="color: #7f007f;">loop</span> for (name . link) in (tapoueh-breadcrumb-to-current-page)
        do (insert (format <span style="color: #bc8f8f;">"&lt;a href=%s&gt;%s&lt;/a&gt;"</span> link name) <span style="color: #bc8f8f;">" / "</span>))
  (insert <span style="color: #bc8f8f;">"&lt;/div&gt;\n"</span>))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">tapoueh-insert-breadcrumb</span> ()
  <span style="color: #bc8f8f;">"Must run with current buffer being a muse article"</span>
  (<span style="color: #7f007f;">save-excursion</span>
    (beginning-of-buffer)
    (<span style="color: #7f007f;">when</span> (tapoueh-extract-directive <span style="color: #bc8f8f;">"author"</span> (muse-current-file))
      (re-search-forward <span style="color: #bc8f8f;">"&lt;body&gt;"</span> nil t) <span style="color: #b22222;">; </span><span style="color: #b22222;">find where the article content is
</span>      (re-search-forward <span style="color: #bc8f8f;">"&lt;h2&gt;"</span> nil t)   <span style="color: #b22222;">; </span><span style="color: #b22222;">that's the title line
</span>      (beginning-of-line)
      (open-line 1)
      (tapoueh-insert-breadcrumb-div)

      (re-search-forward <span style="color: #bc8f8f;">"&lt;h2&gt;"</span> nil t 2) <span style="color: #b22222;">; </span><span style="color: #b22222;">that's the TAG line
</span>      (beginning-of-line)
      (open-line 1)
      (tapoueh-insert-breadcrumb-div))))
</pre>

<p>This code is now called in the <code>:after</code> function of my <a href="http://www.emacswiki.org/emacs/EmacsMuse">Muse</a> project style, and
it gets the work done.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 14 Jul 2011 18:44:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/07/14-elisp-breadcrumbs.html</guid>
</item>
<item>
  <title>Muse setup revised</title>
  <link>http://tapoueh.org/blog/2011/07/05-muse-setup-revised.html</link>
  <description><![CDATA[<p class="first">Most of you are probably reading my posts directly in their <code>RSS</code> reader tools
(mine is <a href="http://www.gnus.org/">gnus</a> thanks to the <a href="http://gwene.org/">Gwene</a> service), so you probably missed it, but I
just <em>pushed</em> a whole new version of <a href="http://tapoueh.org">my website</a>, still using <a href="https://github.com/alexott/muse">Emacs Muse</a> as the
engine.</p>

<p>My setup is tentatively called <a href="../../../tapoueh.el.html">tapoueh.el</a> and browsable online.  It consists
of some tweaks on top of Muse, so that I can enjoy <a href="../../../tags/index.html">tags</a> and proper <a href="../../../rss/">rss</a>
support.  By <em>proper</em>, I mean that I want to be able to produce as many <em>topic</em>
<code>RSS</code> <em>feeds</em> from a single <em>blog</em>, and thanks to the <em>tags</em> support that's now what
I have.</p>

<p>The <code>RSS</code> handling and the tagging system are adhoc code, and this very
article begins like this:</p>

<pre class="src">
#author Dimitri Fontaine
#title <span style="font-size: 140%; font-weight: bold;"> Muse setup revised</span>
#date   20110705-19:55
#tags   Emacs Muse
</pre>

<p>All the information for the site navigation are taken from there, and at
long last the <code>RSS</code> I publish now contains proper <code>URLs</code> without abusing
<a href="../../../blog.dim.html">anchors</a>, as in the previous link which is a compatibility page in case you
had some bookmarks.  The compat only works with javascript (did you know
that <em>anchors</em> are not part of the <code>URL</code> that is sent to the server, so that you
can't apply <code>RedirectMatch</code> or other tweaks?), but all it needs is <em>2 lines of
code</em>, so I guess that's not so bad.</p>

<pre class="src">
<span style="color: #7f007f;">var</span> <span style="color: #b8860b;">anchor</span> = window.location.hash;
document.location.href=document.getElementById(anchor).href;
</pre>

<p>I hope you like the new setup as much as I do, even if I'm left with some
debugging to do.  That's the price to pay for doing it yourself I guess.
But I still don't know of a ready to use solution (as in <em>off the shelf</em>) that
meet my criteria for web publishing.  More on that topic another time.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 05 Jul 2011 19:55:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/07/05-muse-setup-revised.html</guid>
</item>
<item>
  <title><span style="font-size: 140%; font-weight: bold;"> Muse setup revised</span></title>
  <link>http://tapoueh.org/rss/index.xml.html</link>
  <description><![CDATA[div id="breadcrumb"><a href=../index.html>/dev/dim</a> / <a href=../rss/index.html>rss</a> / </div>
<div id="breadcrumb"><a href=../index.html>/dev/dim</a> / <a href=../rss/index.html>rss</a> / </div>


<h2>Tags</h2>
<div class="date">Tuesday, July 05 2011, 19:55</div>



]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 05 Jul 2011 19:55:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/rss/index.xml.html</guid>
</item>








<item>
  <title>Don't be afraid of 'cl</title>
  <link>http://tapoueh.org/blog/2011/06/20-dont-be-afraid-of-cl.html</link>
  <description><![CDATA[<p class="first">In this <a href="http://tsengf.blogspot.com/2011/06/confirm-to-quit-when-editing-files-from.html">blog article</a>, you're shown a quite long function that loop through
your buffers to find out if any of them is associated with a file whose full
name includes <code>&quot;projects&quot;</code>.  Well, you should not be afraid of using <code>cl</code>:</p>

<pre class="src">
(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">cl</span>)
(<span style="color: #7f007f;">loop</span> for b being the buffers
      when (string-match <span style="color: #bc8f8f;">"projects"</span> (or (buffer-file-name b) <span style="color: #bc8f8f;">""</span>))
      return t)
</pre>

<p>If you want to collect the list of buffers whose name matches your test,
then replace <code>return t</code> by <code>collect b</code> and you're done.  Really, this <code>loop</code> thing
is worth learning.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 20 Jun 2011 00:15:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/06/20-dont-be-afraid-of-cl.html</guid>
</item>




<item>
  <title>el-get 2.2</title>
  <link>http://tapoueh.org/blog/2011/05/26-el-get-22.html</link>
  <description><![CDATA[<p class="first">We've spotted a little too late for our own taste a discrepancy in the
source tree: a work in progress patch landed in git just before to release
<a href="https://github.com/dimitri/el-get">el-get</a> stable.  So we cleaned the tree (thanks again <a href="http://julien.danjou.info/">Julien</a>), branched a
stable maintenance tree, and released <code>2.2</code> from there.</p>

<p>You're back to enjoying <code>el-get</code> :)</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 26 May 2011 12:00:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/05/26-el-get-22.html</guid>
</item>
<item>
  <title>el-get 2.1</title>
  <link>http://tapoueh.org/blog/2011/05/26-el-get-21.html</link>
  <description><![CDATA[<p class="first">Current <a href="https://github.com/dimitri/el-get">el-get</a> status is stable, ready for daily use and packed with extra
features that make life easier.  There are some more things we could do, as
always, but they will be about smoothing things further.</p>

<h3>Latest released version</h3>

<p><a href="https://github.com/dimitri/el-get">el-get</a> version <code>2.1</code> is available, with a boatload of features, including
autoloads support, byte-compiling in an external <em>clean room</em> <a href="http://www.gnu.org/software/emacs/">Emacs</a> instance,
custom support, lazy initialisation support (defering all <em>init</em> functions to
<code>eval-after-load</code>), and multi repositories <code>ELPA</code> support.</p>


<h3>Version numbering</h3>

<p class="first">Version String are now inspired by how Emacs itself numbers its versions.
First is the major version number, then a dot, then the minor version
number.  The minor version number is <code>0</code> when still developping the next major
version.  So <code>3.0</code> is a developer release while <code>3.1</code> will be the next stable
release.</p>

<p>Please note that this versioning policy has been picked while backing
<code>1.2~dev</code>, so <code>1.0</code> was a <em>stable</em> release in fact.  Ah, history.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 26 May 2011 10:00:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/05/26-el-get-21.html</guid>
</item>
<item>
  <title>Mailq modeline display</title>
  <link>http://tapoueh.org/blog/2011/05/05-mailq-modeline-display.html</link>
  <description><![CDATA[<p class="first">If you've not been following along, you might have missed it: it appears to
me that even today, in 2011, mail systems work much better when setup the
old way.  Meaning with a local <a href="http://en.wikipedia.org/wiki/Mail_Transfer_Agent">MTA</a> for outgoing mail.  With some niceties,
such as <a href="http://tapoueh.org/articles/news/_Postfix_sender_dependent_relayhost_maps.html">sender dependent relayhost maps</a>.</p>

<p>That's why I needed <a href="http://tapoueh.org/projects.html#sec21">M-x mailq</a> to display the <em>mail queue</em> and have some easy
shortcuts in order to operate it (mainly <code>f runs the command
mailq-mode-flush</code>, but per site and per id delivery are useful too).</p>

<p>Now, I also happen to setup outgoing mail routes to walk through an <em>SSH
tunnel</em>, which thanks to both <a href="http://www.manpagez.com/man/5/ssh_config/">~/.ssh/config</a> and <a href="https://github.com/dimitri/cssh">cssh</a> (<code>C-= runs the
command cssh-term-remote-open</code>, with completion) is a couple of
keystrokes away to start.  Well it still happens to me to forget about
starting it, which causes mails to hold in a queue until I realise it's not
delivered, which always take just about too long.</p>

<p>A solution I've been thinking about is to add a little flag in the <a href="http://www.gnu.org/s/emacs/manual/html_node/elisp/Mode-Line-Format.html">modeline</a>
in my <a href="http://www.gnus.org/">gnus</a> <code>*Group*</code> and <code>*Summary*</code> buffers.  The flag would show up as ✔ when
no mail is queued and waiting for me to open the tunnel, or ✘ as soon as the
queue is not empty.  Here's what it looks like here:</p>

<center>
<p><img src="../../../images//mailq-modeline-display.png" alt=""></p>
</center>

<p>Well I'm pretty happy with the setup.  The flag is refreshed every minute,
and here's as an example how I did setup <code>mailq</code> in my <a href="https://github.com/dimitri/el-get">el-get-sources</a> setup:</p>

<pre class="src">
         (<span style="color: #da70d6;">:name</span> mailq
                <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> () (mailq-modeline-display)))
</pre>

<p>I'm not sure how many of you dear readers are using a local MTA to deliver
your mails, but well, the ones who do (or consider doing so) might even find
this article useful!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 05 May 2011 14:10:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/05/05-mailq-modeline-display.html</guid>
</item>


<item>
  <title>Emacs and PostgreSQL, PL line numbering</title>
  <link>http://tapoueh.org/blog/2011/04/23-emacs-and-postgresql-pl-line-numbering.html</link>
  <description><![CDATA[<p class="first">A while ago I've been fixing and publishing <a href="https://github.com/dimitri/pgsql-linum-format">pgsql-linum-format</a> separately.
That allows to number <code>PL/whatever</code> code lines when editing from <a href="http://www.gnu.org/software/emacs/">Emacs</a>, and
it's something very useful to turn on when debugging.</p>

<center>
<p><img src="../../../images//emacs-pgsql-linum.png" alt=""></p>
</center>


<p>The carrets on the <em>fringe</em> in the emacs window are the result of
<code>(setq-default indicate-buffer-boundaries 'left)</code> and here it's
just overloading the image somehow.  But the idea is to just <code>M-x linum-mode</code>
when you need it, at least that's my usage of it.</p>

<p>You can use <a href="https://github.com/dimitri/el-get">el-get</a> to easily get (then update) this little <code>Emacs</code> extension.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Sat, 23 Apr 2011 10:30:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/04/23-emacs-and-postgresql-pl-line-numbering.html</guid>
</item>
<item>
  <title>Emacs Kicker</title>
  <link>http://tapoueh.org/blog/2011/04/15-emacs-kicker.html</link>
  <description><![CDATA[<p class="first">Following up on the very popular <a href="https://github.com/technomancy/emacs-starter-kit">emacs-starter-kit</a>, I'm now proposing the
<a href="https://github.com/dimitri/emacs-kicker">emacs-kicker</a>.  It's about the <code>.emacs</code> file you've seen in older posts here,
which I maintain for some colleagues.  After all, if they find it useful,
some more people might to, so I've decided to publish it.</p>

<p>What you'll find is a very simple <code>128</code> lines <a href="http://www.gnu.org/software/emacs/">Emacs</a> user init file, based on
<a href="https://github.com/dimitri/el-get">el-get</a> for external packages.  A not so <em>random</em> selection of those is used,
here's the list when you hide some details:</p>

<pre class="src">
 '(el-get                       <span style="color: #b22222;">; </span><span style="color: #b22222;">el-get is self-hosting
</span>   escreen                      <span style="color: #b22222;">; </span><span style="color: #b22222;">screen for emacs, C-\ C-h
</span>   php-mode-improved            <span style="color: #b22222;">; </span><span style="color: #b22222;">if you're into php...
</span>   psvn                         <span style="color: #b22222;">; </span><span style="color: #b22222;">M-x svn-status
</span>   switch-window                <span style="color: #b22222;">; </span><span style="color: #b22222;">takes over C-x o
</span>   auto-complete                <span style="color: #b22222;">; </span><span style="color: #b22222;">complete as you type with overlays
</span>   emacs-goodies-el             <span style="color: #b22222;">; </span><span style="color: #b22222;">the debian addons for emacs
</span>   yasnippet                    <span style="color: #b22222;">; </span><span style="color: #b22222;">powerful snippet mode
</span>   zencoding-mode               <span style="color: #b22222;">; </span><span style="color: #b22222;">http://www.emacswiki.org/emacs/ZenCoding
</span>   (<span style="color: #da70d6;">:name</span> buffer-move           <span style="color: #b22222;">; </span><span style="color: #b22222;">move buffers around in windows
</span>   (<span style="color: #da70d6;">:name</span> smex                  <span style="color: #b22222;">; </span><span style="color: #b22222;">a better (ido like) M-x
</span>   (<span style="color: #da70d6;">:name</span> magit                 <span style="color: #b22222;">; </span><span style="color: #b22222;">git meet emacs, and a binding
</span>   (<span style="color: #da70d6;">:name</span> goto-last-change      <span style="color: #b22222;">; </span><span style="color: #b22222;">move pointer back to last change
</span></pre>

<p>Another interresting thing to note in this <code>kicker</code> is a choice of some key
bindings that are rather unusual (yet) I guess.</p>

<pre class="src">
(global-set-key (kbd <span style="color: #bc8f8f;">"C-x C-b"</span>) 'ido-switch-buffer)
(global-set-key (kbd <span style="color: #bc8f8f;">"C-x C-c"</span>) 'ido-switch-buffer)
(global-set-key (kbd <span style="color: #bc8f8f;">"C-x B"</span>) 'ibuffer)
</pre>

<p>Yes, you see that I've rebound <code>C-x C-c</code> to switching buffers.  That key is
really easy to use and I don't think that <code>M-x kill-emacs</code> deserves it.  Keys
that are so easy to use should be kept for frequent actions, and quiting
emacs is a once-a-day to once-a-month action here.  And you can still quit
from the window manager button or from the menu or from <code>M-x</code>.</p>

<p>Also <em>Mac</em> users are not left behind, you will see some settings that either
are adapted to the system (like choosing another <em>font</em>, keep displaying the
<code>menu-bar</code> or not installing the darkish <code>tango-color-mode</code> on this system,
where it renders poorly in my opinion), as you can see here:</p>

<pre class="src">
(<span style="color: #7f007f;">if</span> (string-match <span style="color: #bc8f8f;">"apple-darwin"</span> system-configuration)
    (set-face-font 'default <span style="color: #bc8f8f;">"Monaco-13"</span>)
  (set-frame-font <span style="color: #bc8f8f;">"Monospace-10"</span>))

(<span style="color: #7f007f;">when</span> (string-match <span style="color: #bc8f8f;">"apple-darwin"</span> system-configuration)
  (setq mac-allow-anti-aliasing t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'none))
</pre>

<p>So all in all, I don't expect this <code>emacs-kicker</code> to please everyone, but I
expect it to be simple and rich enough (thanks to <a href="https://github.com/dimitri/el-get">el-get</a>), and it should be
a good <em>kick start</em> that's easy to adapt.</p>

<p>If you want to try it without installing it it's very easy to do so.  Just
clone the <code>git</code> repository then start an <code>Emacs</code> that will use this.  For
example that could be, using the excellent <a href="http://emacsformacosx.com/">Emacs For MacOSX</a>:</p>

<pre class="src">
 $ /Applications/Emacs.app/Contents/MacOS/Emacs -Q -l init.el
</pre>

<p>I hope some readers will find it useful! :)</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Fri, 15 Apr 2011 21:30:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/04/15-emacs-kicker.html</guid>
</item>



































<item>
  <title>desktop-mode and readahead</title>
  <link>http://tapoueh.org/blog/2011/02/23-desktop-mode-and-readahead.html</link>
  <description><![CDATA[<p class="first">I'm using <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Save-Mode.html#Desktop-Save-Mode">Desktop Save Mode</a> so that <a href="http://www.gnu.org/software/emacs/">Emacs</a> knows to open again all the
buffers I've been using.  That goes quite well with how often I start <code>Emacs</code>,
that is once a week or once a month.  Now, <code>M-x ibuffer</code> last line is as
following:</p>

<pre class="src">
    718 buffers         19838205                  668 files, 15 processes
</pre>

<p>That means that at startup, <code>Emacs</code> will load that many files.  In order not
to have to wait until it's done doing so, I've setup things this way:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">and the session
</span>(setq desktop-restore-eager 20
      desktop-lazy-verbose nil)
(desktop-save-mode 1)
(savehist-mode 1)
</pre>

<p>Problem is that it's still slow.  An idea I had was to use the <a href="https://fedorahosted.org/readahead/browser/README">readahead</a>
tool that allows reducing some distributions boot time.  Of course this tool
is not expecting the same file format as <code>emacs-desktop</code> uses.  Still,
converting is quite easy is some <code>awk</code> magic.  Here's the result:</p>

<pre class="src">
<span style="color: #b22222;">;;; </span><span style="color: #b22222;">dim-desktop.el --- Dimitri Fontaine
</span><span style="color: #b22222;">;;</span><span style="color: #b22222;">
</span><span style="color: #b22222;">;; </span><span style="color: #b22222;">Allows to prepare a readahead file list from desktop-save
</span>
(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">desktop</span>)

(<span style="color: #7f007f;">defvar</span> <span style="color: #b8860b;">dim-desktop-file-readahead-list</span>
  <span style="color: #bc8f8f;">"~/.emacs.desktop.readahead"</span>
  <span style="color: #bc8f8f;">"*Where to save the emacs desktop `readahead` file list"</span>)

(<span style="color: #7f007f;">defvar</span> <span style="color: #b8860b;">dim-desktop-filelist-command</span>
  <span style="color: #bc8f8f;">"gawk -F '[ \"]' '/desktop-.*-buffer/ {getline; if($4) print $4}' %s"</span>
  <span style="color: #bc8f8f;">"Command to run to prepare the readahead file list"</span>)

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim-desktop-get-readahead-file-list</span> (<span style="color: #228b22;">&amp;optional</span> filename dir)
  <span style="color: #bc8f8f;">"get the file list for readahead from dekstop file in DIR, or ~"</span>
  (<span style="color: #7f007f;">with-temp-file</span> (or filename dim-desktop-file-readahead-list)
    (insert
     (shell-command-to-string
      (format dim-desktop-filelist-command
              (expand-file-name desktop-base-file-name (or dir <span style="color: #bc8f8f;">"~"</span>)))))))

<span style="color: #b22222;">;; </span><span style="color: #b22222;">This will not work because the hook is run before to add the buffers into
</span><span style="color: #b22222;">;; </span><span style="color: #b22222;">the desktop file.
</span><span style="color: #b22222;">;;</span><span style="color: #b22222;">
</span><span style="color: #b22222;">;;</span><span style="color: #b22222;">(add-hook 'desktop-save-hook 'dim-desktop-get-readahead-file-list)
</span>
<span style="color: #b22222;">;; </span><span style="color: #b22222;">so instead, advise the function
</span>(<span style="color: #7f007f;">defadvice</span> <span style="color: #0000ff;">desktop-save</span> (after desktop-save-readahead activate)
  <span style="color: #bc8f8f;">"Prepare a readahead(8) file for the desktop file"</span>
  (dim-desktop-get-readahead-file-list))

(<span style="color: #7f007f;">provide</span> '<span style="color: #5f9ea0;">dim-desktop</span>)
</pre>

<p>The <code>awk</code> construct <code>getline</code> allows to process the next line of the input file,
which is very practical here (and in a host of other situations).  Now that
we have a file containing the list of files <code>Emacs</code> will load, we have to
tweak the system to <code>readahead</code> those disk blocks.  As I'm currently using <a href="http://kde.org/">KDE</a>
again, I've done it thusly:</p>

<pre class="src">
% cat ~/.kde/Autostart/readahead.emacs.sh
#! /bin/bash

# just readahead the emacs desktop files
# this file listing is maintained directly from Emacs itself
readahead ~/.emacs.desktop.readahead
</pre>

<p>So, well, it works.  The files that <code>Emacs</code> will need are pre-read, so at the
time the desktop really gets to them, I see no more disk activity (laptops
have a led to see that happening).  But the desktop loading time has not
changed...</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Wed, 23 Feb 2011 16:45:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/02/23-desktop-mode-and-readahead.html</guid>
</item>






<item>
  <title>Starting afresh with el-get</title>
  <link>http://tapoueh.org/blog/2011/01/11-starting-afresh-with-el-get.html</link>
  <description><![CDATA[<p class="first">It so happens that a colleague of mine wanted to start using <a href="http://www.gnu.org/software/emacs/">Emacs</a> but
couldn't get to it. He insists on having proper color themes in all
applications and some sensible defaults full of nifty add-ons everywhere,
and didn't want to have to learn that much about <em>Emacs</em> and <em>Emacs Lisp</em> to get
started. I'm not even sure that he will <a href="http://www.gnu.org/software/emacs/tour/">Take the Emacs tour</a>.</p>

<p>You would tell me that there's nothing we can do for so unfriendly
users. Well, here's what I did:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">emacs setup
</span>
(add-to-list 'load-path <span style="color: #bc8f8f;">"~/.emacs.d/el-get/el-get"</span>)
(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">el-get</span>)
(setq
 el-get-sources
 '(el-get
   php-mode-improved
   psvn
   auto-complete
   switch-window

   (<span style="color: #da70d6;">:name</span> buffer-move
          <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> ()
                   (global-set-key (kbd <span style="color: #bc8f8f;">"&lt;C-S-up&gt;"</span>)     'buf-move-up)
                   (global-set-key (kbd <span style="color: #bc8f8f;">"&lt;C-S-down&gt;"</span>)   'buf-move-down)
                   (global-set-key (kbd <span style="color: #bc8f8f;">"&lt;C-S-left&gt;"</span>)   'buf-move-left)
                   (global-set-key (kbd <span style="color: #bc8f8f;">"&lt;C-S-right&gt;"</span>)  'buf-move-right)))

   (<span style="color: #da70d6;">:name</span> magit
          <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> ()
                   (global-set-key (kbd <span style="color: #bc8f8f;">"C-x C-z"</span>) 'magit-status)))

   (<span style="color: #da70d6;">:name</span> goto-last-change
          <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> ()
                   <span style="color: #b22222;">;; </span><span style="color: #b22222;">azerty keyboard here, don't use C-x C-/
</span>                   (global-set-key (kbd <span style="color: #bc8f8f;">"C-x C-_"</span>) 'goto-last-change)))))

(<span style="color: #7f007f;">when</span> window-system
   (add-to-list 'el-get-sources  'color-theme-tango))

(el-get 'sync)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">visual settings
</span>(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(line-number-mode 1)
(column-number-mode 1)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">Use the clipboard, pretty please, so that copy/paste "works"
</span>(setq x-select-enable-clipboard t)

(set-frame-font <span style="color: #bc8f8f;">"Monospace-10"</span>)

(global-hl-line-mode)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">suivre les changements exterieurs sur les fichiers
</span>(global-auto-revert-mode 1)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">pour les couleurs dans M-x shell
</span>(autoload 'ansi-color-for-comint-mode-on <span style="color: #bc8f8f;">"ansi-color"</span> nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">S-fleches pour changer de fen&#234;tre
</span>(windmove-default-keybindings)
(setq windmove-wrap-around t)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">find-file-at-point quand &#231;a a du sens
</span>(setq ffap-machine-p-known 'accept) <span style="color: #b22222;">; </span><span style="color: #b22222;">no pinging
</span>(setq ffap-url-regexp nil) <span style="color: #b22222;">; </span><span style="color: #b22222;">disable URL features in ffap
</span>(setq ffap-ftp-regexp nil) <span style="color: #b22222;">; </span><span style="color: #b22222;">disable FTP features in ffap
</span>(define-key global-map (kbd <span style="color: #bc8f8f;">"C-x C-f"</span>) 'find-file-at-point)

(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">ibuffer</span>)
(global-set-key <span style="color: #bc8f8f;">"\C-x\C-b"</span> 'ibuffer)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">use iswitchb-mode for C-x b
</span>(iswitchb-mode)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">I can't remember having meant to use C-z as suspend-frame
</span>(global-set-key (kbd <span style="color: #bc8f8f;">"C-z"</span>) 'undo)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">winner-mode pour revenir sur le layout pr&#233;c&#233;dent C-c &lt;left&gt;
</span>(winner-mode 1)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">dired-x pour C-x C-j
</span>(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">dired-x</span>)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">full screen
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">fullscreen</span> ()
  (interactive)
  (set-frame-parameter nil 'fullscreen
                       (<span style="color: #7f007f;">if</span> (frame-parameter nil 'fullscreen) nil 'fullboth)))
(global-set-key [f11] 'fullscreen)
</pre>

<p>With just this simple 87 lines (all included) of setup, my local user is
very happy to switch to using <a href="http://www.gnu.org/software/emacs/">our favorite editor</a>. And he's not even afraid
(yet) of his <code>~/.emacs</code>. I say that's a very good sign of where we are with
<a href="https://github.com/dimitri/el-get">el-get</a>!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 11 Jan 2011 16:20:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2011/01/11-starting-afresh-with-el-get.html</guid>
</item>
<item>
  <title>el-get 1.1, with 174 recipes</title>
  <link>http://tapoueh.org/blog/2010/12/20-el-get-11-with-174-recipes.html</link>
  <description><![CDATA[<p class="first">Yes, you read it well, <a href="https://github.com/dimitri/el-get">el-get</a> currently <em>features</em> <code>174</code> <a href="https://github.com/dimitri/el-get/tree/master/recipes">recipes</a>, and is now
reaching the <code>1.1</code> release. The reason for this release is mainly that I have
two big chunks of code to review and the current code has been very stable
for awhile. It seems better to do a release with the stable code that exists
now before to shake it this much. If you're wondering when to jump in the
water and switch to using <em>el-get</em>, now is a pretty good time.</p>

<h3>New source types</h3>

<p class="first">We now have support for the <a href="http://www.archlinux.org/pacman/">pacman</a> package management for <a href="http://www.archlinux.org/">archlinux</a>, and a
way to handle a different package name in the recipe and in the
distribution. We also have support for <a href="http://mercurial.selenic.com/">mercurial</a> and <a href="http://subversion.tigris.org/">subversion</a> and <a href="http://darcs.net/">darcs</a>.</p>

<p>Also, <a href="http://wiki.debian.org/Apt">apt-get</a> will sometime prompt you to validate its choices, that's the
infamous <em>Do you want to continue?</em> prompt. We now handle that smoothly.</p>


<h3>(el-get 'sync)</h3>

<p class="first">In <code>1.1</code>, that really means <em>synchronous</em>. That means we install one package
after the other, and any error will stop it all. Before that, it was an
active wait loop over a parallel install: this option is still available
through calling <code>(el-get 'wait)</code>.</p>


<h3>No more <em>failed to install</em></h3>

<p class="first">Exactly. This error you may have encountered sometime is due to trying to
install a package over a previous failed install attempt (network outage,
disk full, bad work-in-progress recipe, etc). After awhile in the field it
was clear that no case where found where you would regret it if <a href="https://github.com/dimitri/el-get">el-get</a> just
did removed the previous failed installation for you before to go and
install again, as aked. So that's now automatic.</p>


<h3>Featuring an overhauled :build facility</h3>

<p class="first">The <code>build</code> commands can now either be a list, as before, or some that we
<em>evaluate</em> for you. That allows for easier to maintain <em>recipes</em>, and here's an
exemple of that:</p>

<pre class="src">
(<span style="color: #da70d6;">:name</span> distel
       <span style="color: #da70d6;">:type</span> svn
       <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"http://distel.googlecode.com/svn/trunk/"</span>
       <span style="color: #da70d6;">:info</span> <span style="color: #bc8f8f;">"doc"</span>
       <span style="color: #da70d6;">:build</span> `,(mapcar
                 (<span style="color: #7f007f;">lambda</span> (target)
                   (concat <span style="color: #bc8f8f;">"make "</span> target <span style="color: #bc8f8f;">" EMACS="</span> el-get-emacs))
                 '(<span style="color: #bc8f8f;">"clean"</span> <span style="color: #bc8f8f;">"all"</span>))
       <span style="color: #da70d6;">:load-path</span> (<span style="color: #bc8f8f;">"elisp"</span>)
       <span style="color: #da70d6;">:features</span> distel)
</pre>

<p>As you see that also allows for maintainance of multi-platform build
recipes, and multiple emacs versions too. It's still a little too much on
the <em>awkward</em> side of things, though, and that's one of the ongoing work that
will happen for next version.</p>


<h3>Misc improvements</h3>

<p class="first">We are now able to <code>byte-compile</code> your packages, and offer some more hooks
(<code>el-get-init-hooks</code> has been asked with a nice usage example). There's a new
<code>:localname</code> property that allows to pick where to save the local file when
using <code>HTTP</code> method for retrieval, and that in turn allows to fix some
<em>recipes</em>.</p>

<pre class="src">
(<span style="color: #da70d6;">:name</span> xcscope
       <span style="color: #da70d6;">:type</span> http
       <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"http://cscope.cvs.sourceforge.net/viewvc/cscope/cscope/contrib/xcsc</span><span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">ope/xcscope.el?revision=1.14&amp;content-type=text%2Fplain"</span>
       <span style="color: #da70d6;">:localname</span> <span style="color: #bc8f8f;">"xscope.el"</span>
       <span style="color: #da70d6;">:features</span> xcscope)
</pre>

<p>Oh and you even get <code>:before</code> user function support, even if needing it often
shows that you're doing it in a strange way. More often than not it's
possible to do all you need to in the <code>:after</code> function, but this tool is
there so that you spend less time on having a working environment, not more,
right? :)</p>


<h3>Switch notice</h3>

<p class="first">All in all, if you're already using <a href="https://github.com/dimitri/el-get">el-get</a> you should consider switching to
<code>1.1</code> (by issuing <code>M-x el-get-update</code> of course), and if you're hesitating, just
join the fun now!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 20 Dec 2010 16:45:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/12/20-el-get-11-with-174-recipes.html</guid>
</item>


<item>
  <title>el-get reaches 1.0</title>
  <link>http://tapoueh.org/blog/2010/10/07-el-get-reaches-10.html</link>
  <description><![CDATA[<p class="first">It's been a week since the last commits in the <a href="http://github.com/dimitri/el-get">el-get repository</a>, and those
were all about fixing and adding recipes, and about notifications. Nothing
like <em>core plumbing</em> you see. Also, <code>0.9</code> was released on <em>2010-08-24</em> and felt
pretty complete already, then received lots of improvements. It's high time
to cross the line and call it <code>1.0</code>!</p>

<p>Now existing users will certainly just be moderatly happy to see the tool
reach that version number, depending whether they think more about the bugs
they want to see fixed (ftp is supported, only called http) and the new
features they want to see in (<em>info</em> documentation) or more about what <code>el-get</code>
does for them already today...</p>

<p>For the new users, or the yet-to-be-convinced users, let's take some time
and talk about <code>el-get</code>. A <em>FAQ</em> like session might be best.</p>

<h3>How is el-get different from ELPA?</h3>

<p><a href="http://tromey.com/elpa/">ELPA</a> is the <em>Emacs Lisp Package Archive</em> and is also known as <code>package.el</code>, to
be included in Emacs 24. This allows emacs list extension authors to <em>package</em>
their work. That means they have to follow some guidelines and format their
contribution, then propose it for upload.</p>

<p>This requires licence checks (good) and for the <a href="http://elpa.gnu.org/">new official ELPA mirror</a> it
even requires dead-tree papers exchange and contracts and copyright
assignments, I believe.</p>


<h3>Why have both?</h3>

<p class="first">While <em>ELPA</em> is a great thing to have, it's so easy to find some high quality
Emacs extension out there that are not part of the offer. Either authors are
not interrested into uploading to ELPA, or they don't know how to properly
<em>package</em> for it (it's only simple for single file extensions, see).</p>

<p>So <code>el-get</code> is a pragmatic answer here. It's there because it so happens that
I don't depend only on emacs extensions that are available with Emacs
itself, in my distribution <code>site-lisp</code> and in <code>ELPA</code>. I need some more, and I
don't need it to be complex to find it, fetch it, init it and use it.</p>

<p>Of course I could try and package any extension I find I need and submit it
to <code>ELPA</code>, but really, to do that nicely I'd need to contact the extension
author (<em>upstream</em>) for him to accept my patch, and then consider a fork.</p>

<p>With <code>el-get</code> I propose distributed packaging if you will. Let's have a look
at two <em>recipes</em> here. First, the <code>el-get</code> one itself:</p>

<pre class="src">
(<span style="color: #da70d6;">:name</span> el-get
       <span style="color: #da70d6;">:type</span> git
       <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"git://github.com/dimitri/el-get.git"</span>
       <span style="color: #da70d6;">:features</span> el-get
       <span style="color: #da70d6;">:compile</span> <span style="color: #bc8f8f;">"el-get.el"</span>)
</pre>

<p>Then a much more complex one, the <a href="http://bbdb.sourceforge.net/">bbdb</a> one:</p>

<pre class="src">
(<span style="color: #da70d6;">:name</span> bbdb
       <span style="color: #da70d6;">:type</span> git
       <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"git://github.com/barak/BBDB.git"</span>
       <span style="color: #da70d6;">:load-path</span> (<span style="color: #bc8f8f;">"./lisp"</span> <span style="color: #bc8f8f;">"./bits"</span>)
       <span style="color: #da70d6;">:build</span> (<span style="color: #bc8f8f;">"./configure"</span> <span style="color: #bc8f8f;">"make autoloads"</span> <span style="color: #bc8f8f;">"make"</span>)
       <span style="color: #da70d6;">:build/darwin</span> (<span style="color: #bc8f8f;">"./configure --with-emacs=/Applications/Emacs.app/Contents</span><span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">/MacOS/Emacs" "make autoloads" "make")</span>
       <span style="color: #da70d6;">:features</span> bbdb
       <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> () (bbdb-initialize))
       <span style="color: #da70d6;">:info</span> <span style="color: #bc8f8f;">"texinfo"</span>)
</pre>

<p>The idea is that it's much simpler to just come up with a recipe like this
than to patch existing code and upload it to <code>ELPA</code>. And anybody can share
their <em>recipes</em> very easily, with or without proposing them to me, even if I
very much like to add some more in the official <code>el-get</code> list.</p>

<p>As a user, you don't even need to twiddle with recipes, mostly, because we
already have them for you. What you do instead is list them in
<code>el-get-sources</code>.</p>


<h3>So, show me how you use it?</h3>

<p class="first">Yeah, sure. Here's a sample of my <code>dim-packages.el</code> file, part of my <code>.emacs</code>
<em>suite</em>. Yeah a single <code>.emacs</code> does not suit me anymore, it's a complete
<code>.emacs.d</code> now, but that's because that's how I like it organised, you
know. So, here's the example:</p>

<pre class="src">
<span style="color: #b22222;">;;; </span><span style="color: #b22222;">dim-packages.el --- Dimitri Fontaine
</span><span style="color: #b22222;">;;</span><span style="color: #b22222;">
</span><span style="color: #b22222;">;; </span><span style="color: #b22222;">Set el-get-sources and call el-get to init all those packages we need.
</span>(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">el-get</span>)
(add-to-list 'el-get-recipe-path <span style="color: #bc8f8f;">"~/dev/emacs/el-get/recipes"</span>)

(setq el-get-sources
      '(cssh el-get switch-window vkill google-maps yasnippet verbiste mailq sic<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">p</span>

        (<span style="color: #da70d6;">:name</span> magit
               <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> () (global-set-key (kbd <span style="color: #bc8f8f;">"C-x C-z"</span>) 'magit-status))<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">)</span>

        (<span style="color: #da70d6;">:name</span> asciidoc
               <span style="color: #da70d6;">:type</span> elpa
               <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> ()
                        (autoload 'doc-mode <span style="color: #bc8f8f;">"doc-mode"</span> nil t)
                        (add-to-list 'auto-mode-alist '(<span style="color: #bc8f8f;">"\\.adoc$"</span> . doc-mode))
                        (add-hook 'doc-mode-hook '(<span style="color: #7f007f;">lambda</span> ()
                                                    (turn-on-auto-fill)
                                                    (<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">asciidoc</span>)))))

        (<span style="color: #da70d6;">:name</span> goto-last-change
               <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> ()
                        (global-set-key (kbd <span style="color: #bc8f8f;">"C-x C-/"</span>) 'goto-last-change)))

        (<span style="color: #da70d6;">:name</span> auto-dictionary <span style="color: #da70d6;">:type</span> elpa)
        (<span style="color: #da70d6;">:name</span> gist            <span style="color: #da70d6;">:type</span> elpa)
        (<span style="color: #da70d6;">:name</span> lisppaste       <span style="color: #da70d6;">:type</span> elpa)))

(el-get) <span style="color: #b22222;">; </span><span style="color: #b22222;">that could/should be (el-get 'sync)
</span>(<span style="color: #7f007f;">provide</span> '<span style="color: #5f9ea0;">dim-packages</span>)
</pre>

<p>Ok that's not all of it, but it should give you a nice idea about what
problem I solve with <code>el-get</code> and how. In my emacs startup sequence, somewhere
inside my <code>~/.emacs.d/init.el</code> file, I have a line that says <code>(require
'dim-packages)</code>. This will set <code>el-get-sources</code> to the list just above, then
call <code>(el-get)</code>, the main function.</p>

<p>This main function will check each given package and install it if necessary
(including <em>build</em> the package, as in <code>make autoloads; make</code>), then <em>init</em>
it. What <em>init</em> means exactly depends on what the recipe says. That can
include <em>byte-compiling</em> some files, caring about <em>load-path</em>, <em>load</em> and <em>require</em>
commands, caring about <em>Info-directory-list</em> and <code>ginstall-info</code> too, and some
more.</p>

<p>So in short, it will make it so that your emacs instance is ready for you to
use. And you get the choice to use the given <code>el-get</code> recipes as-is, like I
did for <code>cssh</code>, <code>el-get</code>, <code>switch-window</code> and others, up to <code>sicp</code>, or to tweak them
partly, like in the <code>magit</code> example where I've added a user init function (the
<code>:after</code> property) to bind <code>magit-status</code> to <code>C-x C-z</code> here. You can even embed a
full recipe inline in the <code>el-get-sources</code> variable, that's the case for each
item that gives its <code>:type</code> property, like <code>asciidoc</code> or <code>gist</code>.</p>

<p>And, as you see, we're using <code>ELPA</code> a lot in this sources, so <code>el-get</code> isn't
striving to replace it at all, it's just trying to accomodate to a broader
world.</p>


<h3>I read that the el-get-install is asynchronous, tell me more.</h3>

<p class="first">Yeah, right, the example above says <code>(el-get)</code> at its end, and in the cases
when <code>el-get</code> has to install or build sources, this will be done
asynchronously. Which means that not only several sources will get processed
at once (using your multi cores, yeah) but that it will let emacs start up
as if it was ready.</p>

<p>It happens that's usually what I want, because I seldom add sources in my
setup, but in theory that can break your emacs. What I do is start it again
or fix by hand, what you can do instead is <code>(el-get 'sync)</code> so that emacs is
blocked waiting for <code>el-get</code> to properly install and initialize all the
sources you've setup. Your choice, just add the <code>'sync</code> parameter there.</p>


<h3>Now, explain me why it is better this way, again, please?</h3>

<p class="first">Well, before I wrote <code>el-get</code>, trying out a new extension, setting it up etc
was something quite involved, and that I had to redo on several
machines. The only way not to redo it was to include the extension's code
into my own <code>git</code> repository (my <code>emacs.d</code> is in <code>git</code>, of course).</p>

<p>And putting code I don't maintain into my own <code>git</code> repository is something I
frown upon. I have no business pretending I'll maintain the code, and I know
I will never think to check the <code>URL</code> where I've found it for updates. That's
when I though noting down the <code>URL</code> somewhere.</p>

<p>Also, what about sharing the extension with friends. Uneasy, at best.</p>

<p>Enters <code>el-get</code> and I can just add an entry to <code>el-get-sources</code>, based on a file
somewhere in my own <code>el-get-recipe-path</code>. When I'm happy with this file, I can
contribute it to <code>el-get</code> proper or just send it over to any interested
recipient. Adding it to your sources is easy. Copy the file in your
<code>el-get-recipe-path</code> somewhere, add its name to your <code>el-get-sources</code>, then <code>M-x
el-get-install</code> it. Done. If you were given the <code>:after</code> function, it's all
setup already.</p>

<p>If you contribute the recipe to <code>el-get</code>, then <code>M-x el-get-update RET el-get
RET</code> and you get it on this other machine where you also use Emacs. Or you
can tell your friend to do the same and benefit from your <em>packaging</em>.</p>


<h3>Well, sounds good. What recipes do you have already?</h3>

<p class="first">I count <code>67</code> of them already. One of them is just a book in <em>info</em> format, with
no <em>elisp</em> at all, can you spot it?</p>

<pre class="src">
ELISP&gt; (directory-files <span style="color: #bc8f8f;">"~/dev/emacs/el-get/recipes/"</span> nil <span style="color: #bc8f8f;">"el$"</span>)

(<span style="color: #bc8f8f;">"auctex.el"</span> <span style="color: #bc8f8f;">"auto-complete-etags.el"</span> <span style="color: #bc8f8f;">"auto-complete-extension.el"</span>
<span style="color: #bc8f8f;">"auto-complete.el"</span> <span style="color: #bc8f8f;">"auto-install.el"</span> <span style="color: #bc8f8f;">"autopair.el"</span> <span style="color: #bc8f8f;">"bbdb.el"</span>
<span style="color: #bc8f8f;">"blender-python-mode.el"</span> <span style="color: #bc8f8f;">"color-theme-twilight.el"</span> <span style="color: #bc8f8f;">"color-theme.el"</span>
<span style="color: #bc8f8f;">"cssh.el"</span> <span style="color: #bc8f8f;">"django-mode.el"</span> <span style="color: #bc8f8f;">"el-get.el"</span> <span style="color: #bc8f8f;">"emacs-w3m.el"</span> <span style="color: #bc8f8f;">"emacschrome.el"</span>
<span style="color: #bc8f8f;">"emms.el"</span> <span style="color: #bc8f8f;">"ensime.el"</span> <span style="color: #bc8f8f;">"erc-highlight-nicknames.el"</span> <span style="color: #bc8f8f;">"erc-track-score.el"</span>
<span style="color: #bc8f8f;">"escreen.el"</span> <span style="color: #bc8f8f;">"filladapt.el"</span> <span style="color: #bc8f8f;">"flyguess.el"</span> <span style="color: #bc8f8f;">"gist.el"</span> <span style="color: #bc8f8f;">"google-maps.el"</span>
<span style="color: #bc8f8f;">"google-weather.el"</span> <span style="color: #bc8f8f;">"goto-last-change.el"</span> <span style="color: #bc8f8f;">"haskell-mode.el"</span>
<span style="color: #bc8f8f;">"highlight-parentheses.el"</span> <span style="color: #bc8f8f;">"hl-sexp.el"</span> <span style="color: #bc8f8f;">"levenshtein.el"</span> <span style="color: #bc8f8f;">"magit.el"</span>
<span style="color: #bc8f8f;">"mailq.el"</span> <span style="color: #bc8f8f;">"maxframe.el"</span> <span style="color: #bc8f8f;">"multi-term.el"</span> <span style="color: #bc8f8f;">"muse-blog.el"</span> <span style="color: #bc8f8f;">"nognus.el"</span>
<span style="color: #bc8f8f;">"nterm.el"</span> <span style="color: #bc8f8f;">"nxhtml.el"</span> <span style="color: #bc8f8f;">"offlineimap.el"</span> <span style="color: #bc8f8f;">"package.el"</span> <span style="color: #bc8f8f;">"popup-kill-ring.el"</span>
<span style="color: #bc8f8f;">"pos-tip.el"</span> <span style="color: #bc8f8f;">"pov-mode.el"</span> <span style="color: #bc8f8f;">"psvn.el"</span> <span style="color: #bc8f8f;">"pymacs.el"</span> <span style="color: #bc8f8f;">"rainbow-mode.el"</span>
<span style="color: #bc8f8f;">"rcirc-groups.el"</span> <span style="color: #bc8f8f;">"rinari.el"</span> <span style="color: #bc8f8f;">"ropemacs.el"</span> <span style="color: #bc8f8f;">"rt-liberation.el"</span> <span style="color: #bc8f8f;">"scratch.el"</span>
<span style="color: #bc8f8f;">"session.el"</span> <span style="color: #bc8f8f;">"sicp.el"</span> <span style="color: #bc8f8f;">"smex.el"</span> <span style="color: #bc8f8f;">"switch-window.el"</span> <span style="color: #bc8f8f;">"textile-mode.el"</span>
<span style="color: #bc8f8f;">"todochiku.el"</span> <span style="color: #bc8f8f;">"twitter.el"</span> <span style="color: #bc8f8f;">"twittering-mode.el"</span> <span style="color: #bc8f8f;">"undo-tree.el"</span>
<span style="color: #bc8f8f;">"verbiste.el"</span> <span style="color: #bc8f8f;">"vimpulse-surround.el"</span> <span style="color: #bc8f8f;">"vimpulse.el"</span> <span style="color: #bc8f8f;">"vkill.el"</span> <span style="color: #bc8f8f;">"xcscope.el"</span>
<span style="color: #bc8f8f;">"xml-rpc-el.el"</span> <span style="color: #bc8f8f;">"yasnippet.el"</span>)
</pre>


<h3>Ok, I want to try it, what's next?</h3>

<p class="first">Visit the following <code>URL</code> <a href="http://github.com/dimitri/el-get">http://github.com/dimitri/el-get</a> and follow the
install instructions. You're given a <em>scratch installer</em> there, that's some
<em>elisp</em> code you copy paste into <code>*scratch*</code> then execute there, and you have
<code>el-get</code> ready to serve.</p>

<p>An excellent idea I stole at <code>ELPA</code>!</p>


<h3>Hey, I already know what el-get is, what's new in 1.0?</h3>

<p class="first">The <em>changelog</em> is quite full of good stuff, really:</p>

<ul>
<li>Implement el-get recipes so that el-get-sources can be a simple list
of symbols. Now that there's an authoritative git repository, where
to share the recipes is easy.</li>

<li>Add support for emacswiki directly, save from having to enter the URL</li>

<li>Implement package status on-disk saving so that installing over a
previously failed install is in theory possible. Currently `el-get'
will refrain from removing your package automatically, though.</li>

<li>Fix ELPA remove method, adding a &quot;removed&quot; state too.</li>

<li>Implement CVS login support.</li>

<li>Add lots of recipes</li>

<li>Add support for `system-type' specific build commands</li>

<li>Byte compile files from the load-path entries or :compile files</li>

<li>Implement support for git submodules with the command
`git submodule update &mdash;init &mdash;recursive`</li>

<li>Add catch-all post-install and post-update hooks</li>

<li>Add desktop notification on install/update.</li>
</ul>


<h3>I'm still using the deprecated emacswiki version, what now?</h3>

<p class="first">That version didn't have recipes, and the new version should be perfectly
happy with your current <code>el-get-sources</code>, so that I recommend using the
<em>scratch installer</em> too. Don't forget to add <code>el-get</code> itself into your
<code>el-get-sources</code> list, of course!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/10/07-el-get-reaches-10.html</guid>
</item>






<item>
  <title>Regexp performances and Finite Automata</title>
  <link>http://tapoueh.org/blog/2010/09/26-regexp-performances-and-finite-automata.html</link>
  <description><![CDATA[<p class="first">The major reason why I dislike <a href="http://www.perl.org/">perl</a> so much, and <a href="http://www.ruby-lang.org">ruby</a> too, and the thing I'd
want different in the <a href="http://www.gnu.org/software/emacs/manual/elisp.html">Emacs Lisp</a> <code>API</code> so far is how they set developers mind
into using <a href="http://www.regular-expressions.info/">regexp</a>. You know the quote, don't you?</p>

<blockquote>
<p class="quoted">
Some people, when confronted with a problem, think “I know, I'll use regular
expressions.” Now they have two problems.</p>

</blockquote>

<p>That said, some situations require the use of <em>regexp</em> — or are so much
simpler to solve using them than the maintenance hell you're building here
ain't that big a drag. The given expressiveness is hard to match with any
other solution, to the point I sometime use them in my code (well I use <a href="http://www.emacswiki.org/emacs/rx">rx</a>
to lower the burden sometime, just see this example).</p>

<pre class="src">
(rx bol (zero-or-more blank) (one-or-more digit) <span style="color: #bc8f8f;">":"</span>)
<span style="color: #bc8f8f;">"^[[:blank:]]*[[:digit:]]+:"</span>
</pre>

<p>The thing you might want to know about <em>regexp</em> is that computing them is an
heavy task usually involving <em>parsing</em> their representation, <em>compiling</em> it to
some executable code, and then <em>executing</em> generated code. It's been showed in
the past (as soon as 1968) that a <em>regexp</em> is just another way to write a
finite automata, at least as soon as you don't need <em>backtracking</em>. The
writing of this article is my reaction to reading
<a href="http://swtch.com/~rsc/regexp/regexp1.html">Regular Expression Matching Can Be Simple And Fast</a> (but is slow in Java,
Perl, PHP, Python, Ruby, ...), a very interesting article — see the
benchmarks in there.</p>

<p>The bulk of it is that we find mainly two categories of <em>regexp</em> engine in the
wild, those that are using <a href="http://en.wikipedia.org/wiki/Nondeterministic_finite_state_machine">NFA</a> and <a href="http://en.wikipedia.org/wiki/Deterministic_finite_automaton">DFA</a> intermediate representation
techniques, and the others. Our beloved <a href="http://www.postgresql.org/">PostgreSQL</a> sure offers the feature,
it's the <code>~</code> and <code>~*</code> <a href="http://www.postgresql.org/docs/9.0/interactive/functions-matching.html">operators</a>. The implementation here is based on
<a href="http://www.arglist.com/regex/">Henry Spencer</a>'s work, which the aforementioned article says</p>

<blockquote>
<p class="quoted">
became very widely used, eventually serving as the basis for the slow
regular expression implementations mentioned earlier: Perl, PCRE, Python,
and so on.</p>

</blockquote>

<p>Having a look at the actual implementation shows that indeed, current
PostgreSQL code for <em>regexp</em> matching uses intermediate representations of
them as <code>NFA</code> and <code>DFA</code>. The code is quite complex, even more than I though it
would be, and I didn't have the time it would take to check it against the
proposed one from the <em>simple and fast</em> article.</p>

<pre class="src">
postgresql/src/backend/regex
  -rw-r--r--   1 dim  staff   4362 Sep 25 20:59 COPYRIGHT
  -rw-r--r--   1 dim  staff    614 Sep 25 20:59 Makefile
  -rw-r--r--   1 dim  staff  28217 Sep 25 20:59 re_syntax.n
  -rw-r--r--   1 dim  staff  16589 Sep 25 20:59 regc_color.c
  -rw-r--r--   1 dim  staff   3464 Sep 25 20:59 regc_cvec.c
  -rw-r--r--   1 dim  staff  25036 Sep 25 20:59 regc_lex.c
  -rw-r--r--   1 dim  staff  16845 Sep 25 20:59 regc_locale.c
  -rw-r--r--   1 dim  staff  35917 Sep 25 20:59 regc_nfa.c
  -rw-r--r--   1 dim  staff  50714 Sep 25 20:59 regcomp.c
  -rw-r--r--   1 dim  staff  17368 Sep 25 20:59 rege_dfa.c
  -rw-r--r--   1 dim  staff   3627 Sep 25 20:59 regerror.c
  -rw-r--r--   1 dim  staff  27664 Sep 25 20:59 regexec.c
  -rw-r--r--   1 dim  staff   2122 Sep 25 20:59 regfree.c
</pre>

<p>So all in all, I'll continue avoiding <em>regexp</em> as much as I currently do, and
will maintain my tendency to using <a href="http://www.gnu.org/manual/gawk/gawk.html">awk</a> when I need them on files (it allows
to refine the searching without resorting to more and more pipes in the
command line). And as far as resorting to using <em>regexp</em> in PostgreSQL is
concerned, it seems that the code here is already about topnotch. Once more.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Sun, 26 Sep 2010 21:00:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/09/26-regexp-performances-and-finite-automata.html</guid>
</item>
<item>
  <title>switch-window reaches 0.8</title>
  <link>http://tapoueh.org/blog/2010/09/13-switch-window-reaches-08.html</link>
  <description><![CDATA[<p class="first">I wanted to play with the idea of using the whole keyboard for my
<a href="http://github.com/dimitri/switch-window">switch-window</a> utility, but wondered how to get those keys in the right order
and all. Finally found <code>quail-keyboard-layout</code> which seems to exists for such
uses, as you can see:</p>

<pre class="src">
(<span style="color: #7f007f;">loop</span> with layout = (split-string quail-keyboard-layout <span style="color: #bc8f8f;">""</span>)
  for row from 1 to 4
  collect (<span style="color: #7f007f;">loop</span> for col from 1 to 12
                collect (nth (+ 1 (* 2 col) (* 30 row)) layout)))
((<span style="color: #bc8f8f;">"1"</span> <span style="color: #bc8f8f;">"2"</span> <span style="color: #bc8f8f;">"3"</span> <span style="color: #bc8f8f;">"4"</span> <span style="color: #bc8f8f;">"5"</span> <span style="color: #bc8f8f;">"6"</span> <span style="color: #bc8f8f;">"7"</span> <span style="color: #bc8f8f;">"8"</span> <span style="color: #bc8f8f;">"9"</span> <span style="color: #bc8f8f;">"0"</span> <span style="color: #bc8f8f;">"-"</span> <span style="color: #bc8f8f;">"="</span>)
 (<span style="color: #bc8f8f;">"q"</span> <span style="color: #bc8f8f;">"w"</span> <span style="color: #bc8f8f;">"e"</span> <span style="color: #bc8f8f;">"r"</span> <span style="color: #bc8f8f;">"t"</span> <span style="color: #bc8f8f;">"y"</span> <span style="color: #bc8f8f;">"u"</span> <span style="color: #bc8f8f;">"i"</span> <span style="color: #bc8f8f;">"o"</span> <span style="color: #bc8f8f;">"p"</span> <span style="color: #bc8f8f;">"["</span> <span style="color: #bc8f8f;">"]"</span>)
 (<span style="color: #bc8f8f;">"a"</span> <span style="color: #bc8f8f;">"s"</span> <span style="color: #bc8f8f;">"d"</span> <span style="color: #bc8f8f;">"f"</span> <span style="color: #bc8f8f;">"g"</span> <span style="color: #bc8f8f;">"h"</span> <span style="color: #bc8f8f;">"j"</span> <span style="color: #bc8f8f;">"k"</span> <span style="color: #bc8f8f;">"l"</span> <span style="color: #bc8f8f;">";"</span> <span style="color: #bc8f8f;">"'"</span> <span style="color: #bc8f8f;">"\\"</span>)
 (<span style="color: #bc8f8f;">"z"</span> <span style="color: #bc8f8f;">"x"</span> <span style="color: #bc8f8f;">"c"</span> <span style="color: #bc8f8f;">"v"</span> <span style="color: #bc8f8f;">"b"</span> <span style="color: #bc8f8f;">"n"</span> <span style="color: #bc8f8f;">"m"</span> <span style="color: #bc8f8f;">","</span> <span style="color: #bc8f8f;">"."</span> <span style="color: #bc8f8f;">"/"</span> <span style="color: #bc8f8f;">" "</span> <span style="color: #bc8f8f;">" "</span>))
</pre>

<p>So now <code>switch-window</code> will use that (but only the first <code>10</code> letters) instead
of <em>hard-coding</em> numbers from 1 to 9 as labels and direct switches. That makes
it more suitable to <a href="http://github.com/dimitri/cssh">cssh</a> users too, I guess.</p>

<p>In other news, I think <a href="http://github.com/dimitri/el-get">el-get</a> is about ready for its <code>1.0</code> release. Please
test it and report any problem very soon before the release!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 13 Sep 2010 17:45:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/09/13-switch-window-reaches-08.html</guid>
</item>


<item>
  <title>Want to share your recipes?</title>
  <link>http://tapoueh.org/blog/2010/08/31-want-to-share-your-recipes.html</link>
  <description><![CDATA[<p class="first">Yes, that's another <a href="http://github.com/dimitri/el-get/">el-get</a> related entry. It seems to take a lot of my
attention these days. After having setup the <code>git</code> repository so that you can
update <code>el-get</code> from within itself (so that it's <em>self-contained</em>), the next
logical step is providing <em>recipes</em>.</p>

<p>By that I mean that <code>el-get-sources</code> entries will certainly look a lot alike
between a user and another. Let's take the <code>el-get</code> entry itself:</p>

<pre class="src">
(<span style="color: #da70d6;">:name</span> el-get
       <span style="color: #da70d6;">:type</span> git
       <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"git://github.com/dimitri/el-get.git"</span>
       <span style="color: #da70d6;">:features</span> <span style="color: #bc8f8f;">"el-get"</span>)
</pre>

<p>I guess all <code>el-get</code> users will have just the same 4 lines in their
<code>el-get-sources</code>. So let's call that a <em>recipe</em>, and have <code>el-get</code> look for yours
into the <code>el-get-recipe-path</code> directories. A recipe is found looking in those
directories in order, and must be named <code>package.el</code>. Now, <code>el-get</code> already
contains a handful of them, as you can see:</p>

<pre class="src">
ELISP&gt; (directory-files <span style="color: #bc8f8f;">"~/dev/emacs/el-get/recipes/"</span> nil <span style="color: #bc8f8f;">"[</span><span style="color: #bc8f8f;">^</span><span style="color: #bc8f8f;">.]$"</span>)
(<span style="color: #bc8f8f;">"auctex.el"</span> <span style="color: #bc8f8f;">"bbdb.el"</span> <span style="color: #bc8f8f;">"cssh.el"</span> <span style="color: #bc8f8f;">"el-get.el"</span> <span style="color: #bc8f8f;">"emms.el"</span> <span style="color: #bc8f8f;">"erc-track-score.el"</span>
 <span style="color: #bc8f8f;">"escreen.el"</span> <span style="color: #bc8f8f;">"google-maps.el"</span> <span style="color: #bc8f8f;">"haskell-mode.el"</span> <span style="color: #bc8f8f;">"hl-sexp.el"</span> <span style="color: #bc8f8f;">"magit.el"</span>
 <span style="color: #bc8f8f;">"muse-blog.el"</span> <span style="color: #bc8f8f;">"nxhtml.el"</span> <span style="color: #bc8f8f;">"psvn.el"</span> <span style="color: #bc8f8f;">"rainbow-mode.el"</span> <span style="color: #bc8f8f;">"rcirc-groups.el"</span>
 <span style="color: #bc8f8f;">"vkill.el"</span> <span style="color: #bc8f8f;">"xcscope.el"</span> <span style="color: #bc8f8f;">"xml-rpc-el.el"</span> <span style="color: #bc8f8f;">"yasnippet.el"</span>)
</pre>

<p>Please note that you can have your own local recipes by adding directories
to <code>el-get-recipe-path</code>. So now your minimalistic <code>el-get-sources</code> list will
look like <code>'(el-get cssh screen)</code>, say. And if you want to override a recipe,
for instance to use the default one but still have a personal <code>:after</code>
function containing your own setup, then simply have your <code>el-get-source</code>
entry a partial entry. Missing <code>:type</code> and <code>el-get</code> will merge your local
overrides atop the default one.</p>

<p>Finally, the way to share your recipes is by sending me an email with the
file, or to do the same over the <code>github</code> interface, I guess I'll still
receive a mail then.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/08/31-want-to-share-your-recipes.html</guid>
</item>
<item>
  <title>Happy Numbers</title>
  <link>http://tapoueh.org/blog/2010/08/30-happy-numbers.html</link>
  <description><![CDATA[<p class="first">After discovering the excellent <a href="http://gwene.org/">Gwene</a> service, which allows you to subscribe
to <em>newsgroups</em> to read <code>RSS</code> content (<em>blogs</em>, <em>planets</em>, <em>commits</em>, etc), I came to
read this nice article about <a href="http://programmingpraxis.com/2010/07/23/happy-numbers/">Happy Numbers</a>. That's a little problem that
fits well an interview style question, so I first solved it yesterday
evening in <a href="http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/List-Processing.html#List-Processing">Emacs Lisp</a> as that's the language I use the most those days.</p>

<blockquote>
<p class="quoted">
A happy number is defined by the following process. Starting with any
positive integer, replace the number by the sum of the squares of its
digits, and repeat the process until the number equals 1 (where it will
stay), or it loops endlessly in a cycle which does not include 1. Those
numbers for which this process ends in 1 are happy numbers, while those
that do not end in 1 are unhappy numbers (or sad numbers).</p>

</blockquote>

<p>Now, what about implementing the same in pure <code>SQL</code>, for more fun? Now that's
interesting! After all, we didn't get <code>WITH RECURSIVE</code> for tree traversal
only, <a href="http://archives.postgresql.org/message-id/e08cc0400911042333o5361b21cu2c9438f82b1e55ce@mail.gmail.com">did we</a>?</p>

<p>Unfortunately, we need a little helper function first, if only to ease the
reading of the recursive query. I didn't try to inline it, but here it goes:</p>

<pre class="src">
create or replace function digits(x bigint)
  returns setof int
  language sql
as $$
  select substring($1::text from i for 1)::int
    from generate_series(1, length($1::text)) as t(i)
$$;
</pre>

<p>That was easy: it will output one row per digit of the input number — and
rather than resorting to powers of ten and divisions and remainders, we do
use plain old text representation and <code>substring</code>. Now, to the real
problem. If you're read what is an happy number and already did read the
fine manual about <a href="http://www.postgresql.org/docs/8.4/interactive/queries-with.html">Recursive Query Evaluation</a>, it should be quite easy to
read the following:</p>

<pre class="src">
with recursive happy(n, seen) as (
    select 7::bigint, <span style="color: #bc8f8f;">'{}'</span>::bigint[]
  union all
    select sum(d*d), h.seen || sum(d*d)
      from (select n, digits(n) as d, seen
              from happy
           ) as h
  group by h.n, h.seen
    having not seen @&gt; array[sum(d*d)]
)
  select * from happy;
  n  |       seen
<span style="color: #b22222;">-----+------------------
</span>   7 | {}
  49 | {49}
  97 | {49,97}
 130 | {49,97,130}
  10 | {49,97,130,10}
   1 | {49,97,130,10,1}
(6 rows)

Time: 1.238 ms
</pre>

<p>That shows how it works for some <em>happy</em> number, and it's easy to test for a
non-happy one, like for example <code>17</code>. The query won't cycle thanks to the <code>seen</code>
array and the <code>having</code> filter, so the only difference between an <em>happy</em> and a
<em>sad</em> number will be that in the former case the last line output by the
recursive query will have <code>n = 1</code>. Let's expand this knowledge
into a proper function (because we want to be able to have the number we
test for happiness as an argument):</p>

<pre class="src">
create or replace function happy(x bigint)
  returns boolean
  language sql
as $$
with recursive happy(n, seen) as (
    select $1, <span style="color: #bc8f8f;">'{}'</span>::bigint[]
  union all
    select sum(d*d), h.seen || sum(d*d)
      from (select n, digits(n) as d, seen
              from happy
           ) as h
  group by h.n, h.seen
    having not seen @&gt; array[sum(d*d)]
)
  select n = 1 as happy
    from happy
order by array_length(seen, 1) desc nulls last
   limit 1
$$;
</pre>

<p>We need the <code>desc nulls last</code> trick in the <code>order by</code> because the <code>array_length()</code>
of any dimension of an empty array is <code>NULL</code>, and we certainly don't want to
return all and any number as unhappy on the grounds that the query result
contains a line <code>input, {}</code>. Let's now play the same tricks as in the puzzle
article:</p>

<pre class="src">
=# select array_agg(x) as happy
     from generate_series(1, 50) as t(x)
    where happy(x);
              happy
<span style="color: #b22222;">----------------------------------
</span> {1,7,10,13,19,23,28,31,32,44,49}
(1 row)

Time: 24.527 ms

=# explain analyze select x
                     from generate_series(1, 10000) as t(x)
                    where happy(x);
                      QUERY PLAN
<span style="color: #b22222;">------------------------------------------------------------
</span> Function Scan on generate_series t
     (cost=0.00..265.00 rows=333 width=4)
     (actual time=2.938..3651.019 rows=1442 loops=1)
   Filter: happy((x)::bigint)
 Total runtime: 3651.534 ms
(3 rows)

Time: 3652.178 ms
</pre>

<p>(Yes, I tricked the <code>EXPLAIN ANALYZE</code> output so that it fits on the page width
here). For what it's worth, finding the first <code>10000</code> happy numbers in <em>Emacs
Lisp</em> on the same laptop takes <code>2830 ms</code>, also running a recursive version of
the code.</p>

<h3>Update, the Emacs Lisp version, inline</h3>

<p class="first">For your pleasure:</p>

<pre class="src">
(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">happy?</span> (<span style="color: #228b22;">&amp;optional</span> n seen)
  <span style="color: #bc8f8f;">"return true when n is a happy number"</span>
  (interactive)
  (<span style="color: #7f007f;">let*</span> ((number    (or n (read-from-minibuffer
                           <span style="color: #bc8f8f;">"Is this number happy: "</span>)))
         (digits    (mapcar
                     'string-to-int
                     (subseq (split-string number <span style="color: #bc8f8f;">""</span>) 1 -1)))
         (squares   (mapcar (<span style="color: #7f007f;">lambda</span> (x) (* x x)) digits))
         (happiness (apply '+ squares)))
    (<span style="color: #7f007f;">cond</span> ((eq 1 happiness)      t)
          ((memq happiness seen) nil)
          (t
           (happy? (number-to-string happiness)
                   (push happiness seen))))))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">find-happy-numbers</span> (<span style="color: #228b22;">&amp;optional</span> limit)
  <span style="color: #bc8f8f;">"find all happy numbers from 1 to limit"</span>
  (interactive)
  (<span style="color: #7f007f;">let</span> ((count (or limit
                   (read-from-minibuffer
                    <span style="color: #bc8f8f;">"List of happy numbers from 1 to: "</span>)))
        happy)
    (<span style="color: #7f007f;">dotimes</span> (n (string-to-int count))
      (<span style="color: #7f007f;">when</span> (happy? (number-to-string (1+ n)))
        (push (1+ n) happy)))
    (nreverse happy)))
</pre>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 30 Aug 2010 11:00:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/08/30-happy-numbers.html</guid>
</item>
<item>
  <title>welcome el-get scratch installer</title>
  <link>http://tapoueh.org/blog/2010/08/27-welcome-el-get-scratch-installer.html</link>
  <description><![CDATA[<p class="first">A very good remark from some users: installing and managing <code>el-get</code> should be
simpler. They wanted both an easy install of the thing, and a way to be able
to manage it afterwards (like, update the local copy against the
authoritative source). So I decided it was high time for getting the code
out of my <code>~/.emacs.d</code> git repository and up to a public place:
<a href="http://github.com/dimitri/el-get">http://github.com/dimitri/el-get</a>.</p>

<p>Then, I added some documentation (a <code>README</code>), and then, a <code>*scratch*
installer</code>, following great ideas from <code>ELPA</code>. So have at it, it's a copy paste
away!</p>

<p>Don't forget to setup your <code>el-get-sources</code> and include there the <code>el-get</code>
source for updates, there's nothing magic about it so it's up to you. You
may notice that it's not yet possible to init <code>el-get</code> from <code>el-get-sources</code>,
though, that's the drawback of the lack of magic. So you will have to still
add an explicit <code>(require 'el-get)</code> before to go and define you own
<code>el-get-sources</code> then finally <code>(el-get)</code>. I don't think that's a problem I need
to solve, though.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Fri, 27 Aug 2010 14:15:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/08/27-welcome-el-get-scratch-installer.html</guid>
</item>
<item>
  <title>el-get news</title>
  <link>http://tapoueh.org/blog/2010/08/26-el-get-news.html</link>
  <description><![CDATA[<p class="first">I've been receiving some requests for <a href="http://www.emacswiki.org/emacs/el-get.el">el-get</a>, some of them even included a
patch. So now there's support for <code>bzr</code>, <code>CSV</code> and <code>http-tar</code>, augmenting the
existing support for <code>git</code>, <code>git-svn</code>, <code>apt-get</code>, <code>fink</code> and <code>ELPA</code> formats.</p>

<p>Also, as the <code>install</code> and even the <code>build</code> are completely <em>asynchronous</em> —
there's a pending bugfix for the building, which is now using
<a href="http://www.gnu.org/software/emacs/elisp/html_node/Asynchronous-Processes.html">start-process-shell-command</a>. The advantage of doing so is that you're free
to use Emacs as usual while <code>el-get</code> is having your piece of <code>elisp</code> code
compiled, which can take time.</p>

<p>The drawback is that it's uneasy to to do the associated setup at the right
time without support from <code>el-get</code>, so you have the new option <code>:after</code> which
takes a <code>functionp</code> object: please consider using that to give your own
special setup for the external emacs bits and pieces you're using.</p>

<p>Let's see some examples of the new features:</p>

<pre class="src">
  (<span style="color: #da70d6;">:name</span> xml-rpc-el
         <span style="color: #da70d6;">:type</span> bzr
         <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"lp:xml-rpc-el"</span>)

  (<span style="color: #da70d6;">:name</span> haskell-mode
         <span style="color: #da70d6;">:type</span> http-tar
         <span style="color: #da70d6;">:options</span> (<span style="color: #bc8f8f;">"xzf"</span>)
         <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"http://projects.haskell.org/haskellmode-emacs/haskell-mode-2.8.0.</span><span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">tar.gz"</span>
         <span style="color: #da70d6;">:load</span> <span style="color: #bc8f8f;">"haskell-site-file.el"</span>
         <span style="color: #da70d6;">:after</span> (<span style="color: #7f007f;">lambda</span> ()
                  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
                  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)))

  (<span style="color: #da70d6;">:name</span> auctex
         <span style="color: #da70d6;">:type</span> cvs
         <span style="color: #da70d6;">:module</span> <span style="color: #bc8f8f;">"auctex"</span>
         <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">":pserver:anonymous@cvs.sv.gnu.org:/sources/auctex"</span>
         <span style="color: #da70d6;">:build</span> (<span style="color: #bc8f8f;">"./autogen.sh"</span> <span style="color: #bc8f8f;">"./configure"</span> <span style="color: #bc8f8f;">"make"</span>)
         <span style="color: #da70d6;">:load</span>  (<span style="color: #bc8f8f;">"auctex.el"</span> <span style="color: #bc8f8f;">"preview/preview-latex.el"</span>)
         <span style="color: #da70d6;">:info</span> <span style="color: #bc8f8f;">"doc"</span>)
</pre>

<p>As you can see, there are also the new options <code>:module</code> (only used by <code>CVS</code> so
far) and <code>:options</code> (only used by <code>http-tar</code> so far). With this later method,
the <code>:options</code> key allows you to have support for virtually any kind of <code>tar</code>
compression (<code>.tar.bz2</code>, etc).</p>

<p>The <code>CVS</code> support currently does not include authentication against the
anonymous <code>pserver</code>, because the only repository I've been asked support for
isn't using that, and the couple of servers that I know of are either
wanting no password at the prompt, or a dummy one. That's for another day,
if needed at all.</p>

<p>That pushes the little local hack to more than a thousand lines of <code>elisp</code>
code, and the next steps include proposing it to <a href="http://tromey.com/elpa/">ELPA</a> so that getting to use
it is easier than ever. You'd just have to choose whether to install <code>ELPA</code>
from <code>el-get</code> or the other way around.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 26 Aug 2010 16:30:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/08/26-el-get-news.html</guid>
</item>
<item>
  <title>el-get and dim-switch-window status update</title>
  <link>http://tapoueh.org/blog/2010/08/09-el-get-and-dim-switch-window-status-update.html</link>
  <description><![CDATA[<p class="first">Thanks to you readers of <a href="http://planet.emacsen.org/">Planet Emacsen</a> taking the time to try those pieces
of emacs lisp found in my blog, and also the time to comment on them, some
bugs have been fixed, and new releases appeared.</p>

<p><a href="http://tapoueh.org/projects.html#sec20">el-get</a> had some typo kind of bug in its support for <code>apt-get</code> and <code>fink</code>
packages, and I managed to break the <code>elpa</code> and <code>http</code> support when going <em>all
asynchronous</em> by forgetting to update the call convention I'm using. Fixing
that, I also switched to using <code>url-retrieve</code> so that the <code>http</code> support also is
<em>asynchronous</em>. That makes the version <code>0.5</code>, available on <a href="http://www.emacswiki.org/emacs/el-get.el">emacswiki el-get</a>
page.</p>

<p>Meanwhile <a href="http://tapoueh.org/projects.html#sec19">dim-switch-window.el</a> got some testers too and got updated with a
nice fix, or so I think. If you're using it with a small enough emacs frame,
or some very little windows in there, you'd have noticed that the number get
so big they don't fit anymore, and all you see while it's waiting for your
window number choice is... blank windows. Not very helpful. Thanks to the
following piece of code, that's no longer the case as of the current
version, available on <a href="http://www.emacswiki.org/emacs/switch-window.el">emacswiki switch-window</a> page.</p>

<p>In short, where I used to blindly apply <code>dim:switch-window-increase</code> on the
big numbers to display, the code now checks that there's enough room for it
to get there, and adjust the <em>increase</em> level scaling it down if
necessary. Very simple, and effective too:</p>

<pre class="src">
    (<span style="color: #7f007f;">with-current-buffer</span> buf
      (text-scale-increase
       (<span style="color: #7f007f;">if</span> (&gt; (/ (float (window-body-height win))
                 dim:switch-window-increase)
              1)
           dim:switch-window-increase
         (window-body-height win)))
      (insert <span style="color: #bc8f8f;">"\n\n    "</span> (number-to-string num)))
</pre>

<p>Centering the text in the window's width is another story entirely, as the
<code>text-scale-increase</code> ain't linear on this axis. I'd take any good idea,
here's what I'm currently at, but it's not there yet:</p>

<pre class="src">
    (<span style="color: #7f007f;">with-current-buffer</span> buf
      (<span style="color: #7f007f;">let*</span> ((w (window-width win))
             (h (window-body-height win))
             (increased-lines (/ (float h) dim:switch-window-increase))
             (scale (<span style="color: #7f007f;">if</span> (&gt; increased-lines 1) dim:switch-window-increase h))
             (lines-before (/ increased-lines 2))
             (margin-left (/ w h) ))
        <span style="color: #b22222;">;; </span><span style="color: #b22222;">increase to maximum dim:switch-window-increase
</span>        (text-scale-increase scale)
        <span style="color: #b22222;">;; </span><span style="color: #b22222;">make it so that the hyuge number appears centered
</span>        (<span style="color: #7f007f;">dotimes</span> (i lines-before) (insert <span style="color: #bc8f8f;">"\n"</span>))
        (<span style="color: #7f007f;">dotimes</span> (i margin-left)  (insert <span style="color: #bc8f8f;">" "</span>))
        (insert (number-to-string num))))
</pre>

<p>So, if you're using one or the other (both?) of those utilities, update your
local version of them!</p>

<p>Note: I also fixed a but in <a href="http://github.com/dimitri/rcirc-groups">rcirc-groups</a> this week-end, but I'll talk about
it in another entry, if I may.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 09 Aug 2010 15:35:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/08/09-el-get-and-dim-switch-window-status-update.html</guid>
</item>
<item>
  <title>el-get</title>
  <link>http://tapoueh.org/blog/2010/08/04-el-get.html</link>
  <description><![CDATA[<p class="first">I've been using emacs for a long time, and a long time it took me to
consider learning <a href="http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/index.html">Emacs Lisp</a>. Before that, I didn't trust my level of
understanding enough to be comfortable in managing my setup efficiently.</p>

<p>One of the main problems of setting up <a href="http://www.gnu.org/software/emacs/">Emacs</a> is that not only you tend to
accumulate so many tricks from <a href="http://www.emacswiki.org/">EmacsWiki</a> and <a href="http://planet.emacsen.org/">blog posts</a> that your <code>.emacs</code> has
to grow to a full <code>~/.emacs.d/</code> directory (starting at <code>~/.emacs.d/init.el</code>),
but also you finally depend on several <em>librairies</em> of code you're not
authoring nor maintaining. Let's call them <em>packages</em>.</p>

<p>Some of them will typically be available on <a href="http://tromey.com/elpa/index.html">ELPA</a>, which allows you to
breathe and keep cool. But most of them, let's face it, are not there. Most
of the packages I use I tend to get them either from <a href="http://www.debian.org/">debian</a> (see
<a href="http://packages.debian.org/sid/apt-rdepends">apt-rdepends</a> for having the complete list of packages that depends on emacs,
unfortunately I'm not finding an online version of the tool to link too), or
from <code>ELPA</code>, or from their own <code>git</code> repository somewhere. Some of them even I
get directly from an <a href="http://www.splode.com/~friedman/software/emacs-lisp">obscure website</a> not maintained anymore, but always
there when you need them.</p>

<p>Of course, my emacs setup is managed in a private <code>git</code> repository. Some
people on <code>#emacs</code> are using <a href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html">git submodules</a> (or was it straight <em>import</em>) for
managing external repositories in there, but all I can say is that I frown
on this idea. I want an easy canonical list of packages I depend on to run
emacs, and I want this documentation to be usable as-is. Enters <a href="http://www.emacswiki.org/emacs/el-get.el">el-get</a>!</p>

<p>As we're all damn lazy, here's a <em>visual</em> introduction to <code>el-get</code>:</p>

<pre class="src">
(setq el-get-sources
      '((<span style="color: #da70d6;">:name</span> bbdb
               <span style="color: #da70d6;">:type</span> git
               <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"git://github.com/barak/BBDB.git"</span>
               <span style="color: #da70d6;">:load-path</span> (<span style="color: #bc8f8f;">"./lisp"</span> <span style="color: #bc8f8f;">"./bits"</span>)
               <span style="color: #da70d6;">:info</span> <span style="color: #bc8f8f;">"texinfo"</span>
               <span style="color: #da70d6;">:build</span> (<span style="color: #bc8f8f;">"./configure"</span> <span style="color: #bc8f8f;">"make"</span>))

        (<span style="color: #da70d6;">:name</span> magit
               <span style="color: #da70d6;">:type</span> git
               <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"http://github.com/philjackson/magit.git"</span>
               <span style="color: #da70d6;">:info</span> <span style="color: #bc8f8f;">"."</span>
               <span style="color: #da70d6;">:build</span> (<span style="color: #bc8f8f;">"./autogen.sh"</span> <span style="color: #bc8f8f;">"./configure"</span> <span style="color: #bc8f8f;">"make"</span>))

        (<span style="color: #da70d6;">:name</span> vkill
               <span style="color: #da70d6;">:type</span> http
               <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"http://www.splode.com/~friedman/software/emacs-lisp/src/vki</span><span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">ll.el"</span>
               <span style="color: #da70d6;">:features</span> vkill)

        (<span style="color: #da70d6;">:name</span> yasnippet
               <span style="color: #da70d6;">:type</span> git-svn
               <span style="color: #da70d6;">:url</span> <span style="color: #bc8f8f;">"http://yasnippet.googlecode.com/svn/trunk/"</span>)

        (<span style="color: #da70d6;">:name</span> asciidoc         <span style="color: #da70d6;">:type</span> elpa)
        (<span style="color: #da70d6;">:name</span> dictionary-el    <span style="color: #da70d6;">:type</span> apt-get)
        (<span style="color: #da70d6;">:name</span> emacs-goodies-el <span style="color: #da70d6;">:type</span> apt-get)))

(el-get)
</pre>

<p>So now you have a pretty good documentation of the packages you want
installed, where to get them, and how to install them. For the <em>advanced</em>
methods (such as <code>elpa</code> or <code>apt-get</code>), you basically just need the package
name. When relying on a bare <code>git</code> repository, you need to give some more
information, such as the <code>URL</code> to <em>clone</em> and the <code>build</code> steps if any. Then also
what <em>features</em> to <code>require</code> and maybe where to find the <em>texinfo</em> documentation
of the package, for automatic inclusion into your local <em>Info</em> menu.</p>

<p>The good news is that not only you now have a solid readable description of
all that in a central place, but this very description is all <code>(el-get)</code> needs
to do its magic. This command will check that each and every package is
installed on your system (in <code>el-get-dir</code>) and if that's not the case, it will
actually install it. Then, it will <code>init</code> the packages: that means caring
about the <code>load-path</code>, the <code>Info-directory-list</code> (and <em>dir</em> texinfo menu
building), the <em>loading</em> of the <code>emacs-lisp</code> files, and finally it will <code>require</code>
the <em>features</em>.</p>

<p>Here's a prettyfied <code>ielm</code> session that will serve as a demo:</p>

<pre class="src">
ELISP&gt; (el-get)
(<span style="color: #bc8f8f;">"aspell-en"</span> <span style="color: #bc8f8f;">"aspell-fr"</span> <span style="color: #bc8f8f;">"muse"</span> <span style="color: #bc8f8f;">"dictionary"</span> <span style="color: #bc8f8f;">"htmlize"</span> <span style="color: #bc8f8f;">"bbdb"</span> <span style="color: #bc8f8f;">"google-maps"</span>
<span style="color: #bc8f8f;">"magit"</span> <span style="color: #bc8f8f;">"emms"</span> <span style="color: #bc8f8f;">"nxhtml"</span> <span style="color: #bc8f8f;">"vkill"</span> <span style="color: #bc8f8f;">"xcscope"</span> <span style="color: #bc8f8f;">"yasnippet"</span> <span style="color: #bc8f8f;">"asciidoc"</span>
<span style="color: #bc8f8f;">"auto-dictionary"</span> <span style="color: #bc8f8f;">"css-mode"</span> <span style="color: #bc8f8f;">"gist"</span> <span style="color: #bc8f8f;">"lua-mode"</span> <span style="color: #bc8f8f;">"lisppaste"</span>)
</pre>

<p>All the packages being already installed, it's running fast enough that I
won't bother measuring the run time, that seems to be somewhere around one
second.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Wed, 04 Aug 2010 22:30:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/08/04-el-get.html</guid>
</item>








<item>
  <title>dim-switch-window.el: fixes</title>
  <link>http://tapoueh.org/blog/2010/07/26-dim-switch-windowel-fixes.html</link>
  <description><![CDATA[<p class="first">Thanks to amazing readers of <a href="http://planet.emacsen.org/">planet emacsen</a>, two annoyances of
<a href="http://www.emacswiki.org/emacs/switch-window.el">switch-window.el</a> have already been fixed! The first is that handling of <code>C-g</code>
isn't exactly an option after all, and the other is that you want to avoid
the buffer creation in the simple cases (1 or 2 windows only), because it's
the usual case.</p>

<p>I've received code to handle the second case, that I mostly merged. Thanks a
lot guys, the new version is on <a href="http://wwww.emacswiki.org">emacswiki</a> already!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 26 Jul 2010 11:55:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/07/26-dim-switch-windowel-fixes.html</guid>
</item>
<item>
  <title>dim-switch-window.el</title>
  <link>http://tapoueh.org/blog/2010/07/25-dim-switch-windowel.html</link>
  <description><![CDATA[<p class="first">So it's Sunday and I'm thinking I'll get into <code>el-get</code> sometime later. Now is
the time to present <code>dim-switch-window.el</code> which implements a <em>visual</em> <code>C-x o</code>. I
know of only one way to present a <em>visual effect</em>, and that's with a screenshot:</p>

<center>
<p><img src="../../../images//emacs-switch-window.png" alt=""></p>
</center>

<p>So as you can see, it's all about showing a <em>big</em> number in each window,
tweaking each window's name, and waiting till the user press one of the
expected key — or timeout and stay on the same window as before <code>C-x o</code>. When
there's only 1 or 2 windows displayed, though, the right thing happen and
you see no huge number (in the former case, nothing happens, in the latter,
focus moves to the other window).</p>

<p>The code for that can be found on <a href="http://www.emacswiki.org/">emacswiki</a> under the name
<a href="http://www.emacswiki.org/emacs/switch-window.el">switch-window.el</a>. Hope you'll find it useful!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Sun, 25 Jul 2010 13:25:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/07/25-dim-switch-windowel.html</guid>
</item>
<item>
  <title>ClusterSSH gets dsh support</title>
  <link>http://tapoueh.org/blog/2010/07/23-clusterssh-gets-dsh-support.html</link>
  <description><![CDATA[<p class="first">If you don't know about <a href="cssh.html">ClusterSSH</a>, it's a project that builds on <code>M-x term</code>
and <code>ssh</code> to offer a nice and simple way to open remote terminals. It's
available in <a href="http://tromey.com/elpa/index.html">ELPA</a> and developed at <a href="http://github.com/dimitri/cssh">github cssh</a> repository.</p>

<p>The default binding is <code>C-=</code> and asks for the name of the server
to connect to, in the <em>minibuffer</em>, with completion. The host list used for
the completion comes from <code>tramp</code> and is pretty complete, all the more if
you've setup <code>~/.ssh/config</code> with <code>HashKnownHosts no</code>.</p>

<p>So the usual way to use <code>cssh.el</code> would be to just open a single remote
connection at a time. But of course you can open as many as you like, and
you get them all in a mosaic of <code>term</code> in your emacs frame, with an input
window at the bottom to control them all. There were two ways to get there,
either opening all remote hosts whose name is matching a given regexp, that
would be using <code>C-M-=</code> or getting to <code>IBuffer</code> and marking there
the existing remote <code>terms</code> you want to control all at once then use
<code>C-=</code>.</p>

<p>Well I've just added another mode of operation by supporting <em>enhanced</em> <a href="http://www.netfort.gr.jp/~dancer/software/dsh.html.en">dsh</a>
group files. In such files, you're supposed to have a remote host name per
line and that's it. We've added support for line containing <code>@group</code> kind of
lines so that you can <em>include</em> another group easily. To use the facility,
either open your <code>~/.dsh/group</code> directory in <code>dired</code> and type <code>C-=</code>
when on the right line, or simply use the global <code>C-=</code> you
already know and love. Then, type <code>@</code> and complete to any existing group found
in your <code>cssh-dsh-path</code> (it defaults to the right places, so chances are you
will never have to edit this one). And that's it, <a href="http://www.gnu.org/software/emacs/">Emacs</a> will open one <code>term</code>
per remote host you have in the <code>dsh</code> group you just picked. With a <code>*cssh*</code>
controler window, too.</p>

<p>Coming next, how I solved my <code>init.el</code> dependancies burden thanks to <code>el-get</code>!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Fri, 23 Jul 2010 22:20:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/07/23-clusterssh-gets-dsh-support.html</guid>
</item>
<item>
  <title>Emacs and PostgreSQL</title>
  <link>http://tapoueh.org/blog/2010/07/22-emacs-and-postgresql.html</link>
  <description><![CDATA[<p class="first">Those are my two all times favorite Open Source Software. Or <a href="http://www.gnu.org/philosophy/free-sw.html">Free Software</a>
in the <a href="http://www.gnu.org/">GNU</a> sense of the world, as both the <em>BSD</em> and the <em>GPL</em> are labeled free
there. Even if I prefer the <a href="http://www.debian.org/social_contract">The Debian Free Software Guidelines</a> as a global
definition and the <a href="http://sam.zoy.org/wtfpl/">WTFPL</a> license. But that's a digression.</p>

<p>I think that <a href="http://www.gnu.org/software/emacs/">Emacs</a> and <a href="http://www.postgresql.org/">PostgreSQL</a> do share a lot in common. I'd begin with
the documentation, which quality is amazing for both projects. Then of
course the extensibility with <a href="http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/Preface.html#Preface">Emacs Lisp</a> on the one hand and
<a href="http://www.postgresql.org/docs/8.4/static/extend.html">catalog-driven operations</a> on the other hand. Whether you're extending Emacs
or PostgreSQL you'll find that it's pretty easy to tweak the system <em>while
it's running</em>. The other comparison points are less important, like the fact
the both the systems get about the same uptime on my laptop (currently <em>13
days, 23 hours, 57 minutes, 10 seconds</em>).</p>

<p>So of course I'm using <em>Emacs</em> to edit <em>PostgreSQL</em> <code>.sql</code> files, including stored
procedures. And it so happens that <a href="http://archives.postgresql.org/pgsql-hackers/2010-07/msg01067.php">line numbering in plpgsql</a> is not as
straightforward as one would naively think, to the point that we'd like to
have better tool support there. So I've extended Emacs <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html">linum-mode minor mode</a>
to also display the line numbers as computed per PostgreSQL, and here's what
it looks like:</p>

<center>
<p><img src="../../../images//emacs-pgsql-line-numbers.png" alt=""></p>
</center>

<p>Now, here's also the source code, <a href="https://github.com/dimitri/pgsql-linum-format">pgsql-linum-format</a>. Hope you'll enjoy!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 22 Jul 2010 09:30:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/07/22-emacs-and-postgresql.html</guid>
</item>
<item>
  <title>Emacs Muse hacking</title>
  <link>http://tapoueh.org/blog/2010/03/04-emacs-muse-hacking.html</link>
  <description><![CDATA[<p class="first">Now you know what piece of software is used to publish this blog. I really
like it, the major mode makes it a great experience to be using this tool,
and the fact that you produce the <code>HTML</code> and <code>rsync</code> it all from within Emacs
(<code>C-c C-p</code> then <code>C-c C-r</code> with some easy <a href="http://git.tapoueh.org/?p=tapoueh.org.git;a=blob;f=dim-muse.el;hb=HEAD">elisp code</a>) is a big advantage as far
as I'm concerned. No need to resort to <code>shell</code> and <code>Makefile</code>.</p>

<p>What's new here is that I missed the <em>one page per article</em> trend that other
blog software propose, and the blog entries index too. I didn't want to
invest time into hacking Muse itself, that was my excuse for accepting the
situation. But I finally took a deeper look at the <a href="http://mwolson.org/static/doc/muse/Style-Elements.html#Style-Elements">Emacs Muse Manual</a>, and
found out about the <code>:after</code> and <code>:final</code> functions.</p>

<p>Those two function will get run while in the output buffer, the <code>HTML</code>
formatted one. With the <code>:after</code> function, it's still possible to edit the
buffer content, for example to add a mini index to previous articles,
whereas with the <code>:final</code> function the buffer is <code>read-only</code> and already written
to disk, so it's to late to edit it. Still it's possible to cut it in pieces
and write a new file per article you find in there.</p>

<p>The code to realize my wishes is <a href="http://git.tapoueh.org/?p=tapoueh.org.git;a=summary">available</a> but has not been edited with
customisation in mind, so to use it you will have to edit some places rather
than just <code>setq</code> some <code>defcustom</code>. Well, if I have demand, I'll generalize the
code and share it on <a href="http://www.emacswiki.org/">Emacs Wiki</a> and <a href="http://tromey.com/elpa/">ELPA</a>. Meanwhile, happy hacking!</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 04 Mar 2010 13:33:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2010/03/04-emacs-muse-hacking.html</guid>
</item>
<item>
  <title>pg_staging's bird view</title>
  <link>http://tapoueh.org/blog/2009/12/08-pg_stagings-bird-view.html</link>
  <description><![CDATA[<p class="first">One of the most important feedback I got about the presentation of <a href="pgstaging.html">pgstaging</a>
were the lack of pictures, something like a bird-view of how you operate
it. Well, thanks to <a href="http://ditaa.sourceforge.net/">ditaa</a> and Emacs <code>picture-mode</code> here it is:</p>

<center>
<p><img src="../../../images//pg_staging.png" alt=""></p>
</center>

<p>Hope you enjoy, it should not be necessary to comment much if I got to the
point!</p>

<p>Of course I commited the <a href="http://github.com/dimitri/pg_staging/blob/master/bird-view.txt">text source file</a> to the <code>Git</code> repository. The only
problem I ran into is that <code>ditaa</code> defaults to ouputing a quite big right
margin containing only white pixels, and that didn't fit well, visually, in
this blog. So I had to resort to <a href="http://www.imagemagick.org/script/command-line-options.php#crop">ImageMagik crop command</a> in order to avoid
any mouse usage in the production of this diagram.</p>

<pre class="src">
convert .../pg_staging/bird-view.png -crop <span style="color: #bc8f8f;">'!550'</span> bird-view.png
mv bird-view-0.png pg_staging.png
</pre>

<p>Quicker than learning to properly use a mouse, at least for me :)</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 08 Dec 2009 12:04:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/12/08-pg_stagings-bird-view.html</guid>
</item>
<item>
  <title>PGday.eu feedback</title>
  <link>http://tapoueh.org/blog/2009/12/01-pgdayeu-feedback.html</link>
  <description><![CDATA[<p class="first">At <a href="http://2009.pgday.eu/">pgday</a> there was this form you could fill to give speakers some <em>feedback</em>
about their talks. And that's a really nice way as a speaker to know what to
improve. And as <a href="http://blog.hagander.net/archives/157-Feedback-from-pgday.eu.html">Magnus</a> was searching a nice looking chart facility in python
and I spoke about <a href="http://matplotlib.sourceforge.net/gallery.html">matplotlib</a>, it felt like having to publish something.</p>

<p>Here is my try at some nice graphics. Well I'll let you decide how nice the
result is:</p>

<center>
<p><a class="image-link" href="../../../images//feedback.png">
<img src="../../../images/feedback.png"></a></p>
</center>

<p>If you want to see the little python script I used, here it is: <a href="http://git.tapoueh.org/?p=pgconfs.git;a=blob;f=pgday_2009/feedback.py;hb=master">feedback.py</a>,
with the data embedded and all...</p>

<p>Now, how to read it? Well, the darker the color the better the score. For
example I had <code>5</code> people score me <code>5</code> for <em>Topic Importance</em> on the Hi-Media talk
(in french) and only <code>3</code> people at this same score and topic for <code>pg_staging</code>
talk. The scores are from <code>1</code> to <code>5</code>, <code>5</code> being the best.</p>

<p>The comitee accepted interesting enough topics and it seems I managed to
deliver acceptable content from there. Not very good content, because
reading the comments I missed some nice birds-eye pictures to help the
audience get into the subject. As I'm unable to draw (with or without a
mouse) I plan to fix this in latter talks by using <a href="http://ditaa.sourceforge.net/">ditaa</a>, the <em>DIagrams
Through Ascii Art</em> tool. I already used it and together with <a href="news.dim.html">Emacs</a>
<code>picture-mode</code> it's very nice.</p>

<p>Oh yes the baseline of this post is that there will be later talks. I seem
to be liking those and the audience feedback this time is saying that it's
not too bad for them. See you soon :)</p>

<h3>Update</h3>

<p class="first">I have added the <code>feedback.py</code> script now that each page here is published
separately.</p>

<pre class="src">
<span style="color: #b22222;">#</span><span style="color: #b22222;">! /usr/bin/env python
</span><span style="color: #b22222;">#</span><span style="color: #b22222;">
</span><span style="color: #b22222;"># </span><span style="color: #b22222;">http://matplotlib.sourceforge.net/examples/pylab_examples/bar_stacked.html
</span>
<span style="color: #7f007f;">from</span> pylab <span style="color: #7f007f;">import</span> *
<span style="color: #7f007f;">import</span> numpy <span style="color: #7f007f;">as</span> np

clf()
subplot(111)

<span style="color: #b8860b;">N</span> = 4

<span style="color: #b22222;"># </span><span style="color: #b22222;">http://html-color-codes.info/ for inspiration
</span><span style="color: #b8860b;">scoreColors</span>   = ((<span style="color: #bc8f8f;">'#F5D0A9'</span>, <span style="color: #bc8f8f;">'#F7BE81'</span>,
                  <span style="color: #bc8f8f;">'#FAAC58'</span>, <span style="color: #bc8f8f;">'#FF8000'</span>, <span style="color: #bc8f8f;">'#DF7401'</span>),
                 (<span style="color: #bc8f8f;">'#A9F5A9'</span>, <span style="color: #bc8f8f;">'#81F781'</span>,
                  <span style="color: #bc8f8f;">'#58FA58'</span>, <span style="color: #bc8f8f;">'#2EFE2E'</span>, <span style="color: #bc8f8f;">'#01DF01'</span>))

<span style="color: #b22222;"># </span><span style="color: #b22222;">data from the mail
</span><span style="color: #b8860b;">expHMScores</span>   = ((0, 0, 1, 2, 5),
                 (0, 0, 1, 3, 4),
                 (0, 0, 0, 0, 8),
                 (0, 0, 0, 3, 5))

<span style="color: #b8860b;">stagingScores</span> = ((0, 0, 0, 3, 3),
                 (0, 1, 1, 1, 3),
                 (0, 0, 1, 1, 4),
                 (0, 0, 0, 4, 2))

<span style="color: #b8860b;">ind</span> = np.arange(N)    <span style="color: #b22222;"># </span><span style="color: #b22222;">the x locations for the groups
</span><span style="color: #b8860b;">width</span> = 0.4       <span style="color: #b22222;"># </span><span style="color: #b22222;">the width of the bars: can also be len(x) sequence
</span>
<span style="color: #b8860b;">hd</span> = array([expHMScores[x][0] <span style="color: #7f007f;">for</span> x <span style="color: #7f007f;">in</span> <span style="color: #da70d6;">range</span>(0, 4)])
<span style="color: #b8860b;">hp</span> = bar(ind, hd, width, color = scoreColors[0][0])

<span style="color: #b8860b;">sd</span> = array([stagingScores[x][0] <span style="color: #7f007f;">for</span> x <span style="color: #7f007f;">in</span> <span style="color: #da70d6;">range</span>(0, 4)])
<span style="color: #b8860b;">sp</span> = bar(ind+width, sd, width, color = scoreColors[1][0])

<span style="color: #7f007f;">for</span> s <span style="color: #7f007f;">in</span> <span style="color: #da70d6;">range</span>(1, 5):
    <span style="color: #b8860b;">d</span> = array([expHMScores[x][s] <span style="color: #7f007f;">for</span> x <span style="color: #7f007f;">in</span> <span style="color: #da70d6;">range</span>(0, 4)])
    bar(ind, d, width,
        color = scoreColors[0][s], bottom = hd)
    <span style="color: #b8860b;">hd</span> += d

    <span style="color: #b8860b;">d</span> = array([stagingScores[x][s] <span style="color: #7f007f;">for</span> x <span style="color: #7f007f;">in</span> <span style="color: #da70d6;">range</span>(0, 4)])
    bar(ind+width, d, width,
        color = scoreColors[1][s], bottom = sd)
    <span style="color: #b8860b;">sd</span> += d

ylabel(<span style="color: #bc8f8f;">'Scores'</span>)
title(<span style="color: #bc8f8f;">'PGday 2009 feedback'</span>)
xticks(ind+width,
       (<span style="color: #bc8f8f;">'Topic Importance'</span>,
        <span style="color: #bc8f8f;">'Content Quality'</span>,
        <span style="color: #bc8f8f;">'Speaker knowledge'</span>,
        <span style="color: #bc8f8f;">'Speaker Quality'</span>) )

legend([hp[0], sp[0]], [<span style="color: #bc8f8f;">"Hi-Media"</span>, <span style="color: #bc8f8f;">"pg_staging"</span>])

grid(<span style="color: #da70d6;">True</span>)
savefig(<span style="color: #bc8f8f;">'feedback.png'</span>, dpi=75, orientation=<span style="color: #bc8f8f;">'portrait'</span>)
</pre>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 01 Dec 2009 16:45:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/12/01-pgdayeu-feedback.html</guid>
</item>
<item>
  <title>Emacs Muse based publishing</title>
  <link>http://tapoueh.org/blog/2009/10/06-emacs-muse-based-publishing.html</link>
  <description><![CDATA[<p class="first">As you might have noticed, this little blog of mine is not compromising much
and entirely maintained from Emacs. Until today, I had to resort to <code>term</code> to
upload my publications, though, as I've been too lazy to hack up the tools
integration for simply doing a single <code>rsync</code> command line. That was one time
to many:</p>

<pre class="src">
(<span style="color: #7f007f;">defvar</span> <span style="color: #b8860b;">dim:muse-rsync-options</span> <span style="color: #bc8f8f;">"-avz"</span>
  <span style="color: #bc8f8f;">"rsync options"</span>)

(<span style="color: #7f007f;">defvar</span> <span style="color: #b8860b;">dim:muse-rsync-source</span> <span style="color: #bc8f8f;">"~/dev/muse/out"</span>
  <span style="color: #bc8f8f;">"local path from where to rsync, with no ending /"</span>)

(<span style="color: #7f007f;">defvar</span> <span style="color: #b8860b;">dim:muse-rsync-target</span>
  <span style="color: #bc8f8f;">"dim@tapoueh.org:/home/www/tapoueh.org/blog.tapoueh.org"</span>
  <span style="color: #bc8f8f;">"Remote URL to use as rsync target, with no ending /"</span>)

(<span style="color: #7f007f;">defvar</span> <span style="color: #b8860b;">dim:muse-rsync-extra-subdirs</span>
  '(<span style="color: #bc8f8f;">"../css"</span> <span style="color: #bc8f8f;">"../images"</span> <span style="color: #bc8f8f;">"../pdf"</span>)
  <span style="color: #bc8f8f;">"static subdirs to rsync too, path from dim:muse-rsync-source, no ending /"</span>)

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:muse-project-rsync</span> (<span style="color: #228b22;">&amp;optional</span> static)
  <span style="color: #bc8f8f;">"publish tapoueh.org using rsync"</span>
  (interactive <span style="color: #bc8f8f;">"P"</span>)
  (<span style="color: #7f007f;">let*</span> ((rsync-command (format <span style="color: #bc8f8f;">"rsync %s %s %s"</span>
                                dim:muse-rsync-options
                                (concat dim:muse-rsync-source <span style="color: #bc8f8f;">"/"</span>)
                                (concat dim:muse-rsync-target <span style="color: #bc8f8f;">"/"</span>))))
    (<span style="color: #7f007f;">with-current-buffer</span> (get-buffer-create <span style="color: #bc8f8f;">"*muse-rsync*"</span>)
      (erase-buffer)
      (insert (concat rsync-command <span style="color: #bc8f8f;">"\n"</span>))
      (message <span style="color: #bc8f8f;">"%s"</span> rsync-command)
      (insert (shell-command-to-string rsync-command))
      (insert <span style="color: #bc8f8f;">"\n"</span>)

      (<span style="color: #7f007f;">when</span> static
        (<span style="color: #7f007f;">dolist</span> (subdir dim:muse-rsync-extra-subdirs)
          (<span style="color: #7f007f;">let</span> ((cmd (format <span style="color: #bc8f8f;">"rsync %s %s %s"</span>
                             dim:muse-rsync-options
                             (concat dim:muse-rsync-source <span style="color: #bc8f8f;">"/"</span> subdir)
                             dim:muse-rsync-target)))
            (insert (concat cmd <span style="color: #bc8f8f;">"\n"</span>))
            (message <span style="color: #bc8f8f;">"%s"</span> cmd)
            (insert (shell-command-to-string cmd))
            (insert <span style="color: #bc8f8f;">"\n"</span>)))))))

(define-key muse-mode-map (kbd <span style="color: #bc8f8f;">"C-c R"</span>) 'dim:muse-project-rsync)
</pre>

<p>So now to publish this blog, it's just a <code>C-c R</code> away! :)</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 06 Oct 2009 17:23:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/10/06-emacs-muse-based-publishing.html</guid>
</item>
<item>
  <title>Emacs is Twinkling here</title>
  <link>http://tapoueh.org/blog/2009/09/24-emacs-is-twinkling-here.html</link>
  <description><![CDATA[<p class="first">So you have a <em>rolodex</em> like database in your Emacs, or you have this phone
number in a mail and you want to call it. It happens you have <code>VoIP</code> setup and
you're using <a href="http://www.twinklephone.com/">Twinkle</a> to make your calls. Maybe you'll then find this
function useful:</p>

<pre class="src">
(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">twinkle-call-symbol-or-region</span> ()
  <span style="color: #bc8f8f;">"Call the phone number at point (symbol seems good enough), or in region"</span>
  (interactive)
  (shell-command-to-string
   (format <span style="color: #bc8f8f;">"twinkle --cmd 'call %s'"</span>
           (replace-regexp-in-string
            <span style="color: #bc8f8f;">"[</span><span style="color: #bc8f8f;">^</span><span style="color: #bc8f8f;">0-9+]"</span> <span style="color: #bc8f8f;">""</span>
            (<span style="color: #7f007f;">if</span> (use-region-p)
                (buffer-substring (region-beginning) (region-end))
              (thing-at-point 'symbol))))))
</pre>

<p>It happens that <code>symbol</code> is better than <code>word</code> here because some phone numbers
begin with <code>+</code>. And some contains <code>/</code> or <code>.</code> as separators, or some other
variations (spaces) so as the number is easy to read for human eyes. <em>Twinkle</em>
will not like this.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Thu, 24 Sep 2009 18:08:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/09/24-emacs-is-twinkling-here.html</guid>
</item>
<item>
  <title>Escreen integration</title>
  <link>http://tapoueh.org/blog/2009/09/22-escreen-integration.html</link>
  <description><![CDATA[<p class="first">After having used <a href="http://www.morishima.net/~naoto/software/elscreen/">elscreen</a> for a long time, I'm now a very happy user of
<a href="http://www.splode.com/~friedman/software/emacs-lisp/#ui">escreen</a>, which feels much better integrated and allows to have one ring of
recently visited buffers per screen. Which is what you need when using a
<em>screen</em> like feature, really.</p>

<p>At first, it seemed so good as not to require any tweaking, but soon enough
I had to adapt it to my workflow. After all that's exactly for being able to
do this that I'm using emacs :)</p>

<p>It began quite simple with things like <code>M-[</code> and <code>M-]</code> to navigate in screens,
and mouse wheel support to, but then I found that the <code>C-\ b</code> list of screens
could also support the <code>C-\ a runs the command
escreen-get-active-screen-numbers</code> command by just adding some <em>emphasis</em> to
the current escreen in use.</p>

<p>As soon as I had this, and seeing people eyes blinking when working with me
in front of my computer, I wanted to have <em>escreen</em> switching display where I
am in the minibuffer. You have to try the mouse wheel navigation to fully
appreciate it I guess. Anyway, here it is:</p>

<pre class="src">
(load <span style="color: #bc8f8f;">"escreen"</span>)
(escreen-install)

<span style="color: #b22222;">;; </span><span style="color: #b22222;">add C-\ l to list screens with emphase for current one
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">escreen-get-active-screen-numbers-with-emphasis</span> ()
  <span style="color: #bc8f8f;">"what the name says"</span>
  (interactive)
  (<span style="color: #7f007f;">let</span> ((escreens (escreen-get-active-screen-numbers))
        (emphased <span style="color: #bc8f8f;">""</span>))

    (<span style="color: #7f007f;">dolist</span> (s escreens)
      (setq emphased
            (concat emphased (<span style="color: #7f007f;">if</span> (= escreen-current-screen-number s)
                                 (propertize (number-to-string s)
                                             <span style="color: #b22222;">;;</span><span style="color: #b22222;">'face 'custom-variable-tag) " ")
</span>                                             'face 'info-title-3)
                                             <span style="color: #b22222;">;;</span><span style="color: #b22222;">'face 'font-lock-warning-face)
</span>                                             <span style="color: #b22222;">;;</span><span style="color: #b22222;">'face 'secondary-selection)
</span>                               (number-to-string s))
                    <span style="color: #bc8f8f;">" "</span>)))
    (message <span style="color: #bc8f8f;">"escreen: active screens: %s"</span> emphased)))

(global-set-key (kbd <span style="color: #bc8f8f;">"C-\\ l"</span>) 'escreen-get-active-screen-numbers-with-emphasis)

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:escreen-goto-last-screen</span> ()
  (interactive)
  (escreen-goto-last-screen)
  (escreen-get-active-screen-numbers-with-emphasis))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:escreen-goto-prev-screen</span> (<span style="color: #228b22;">&amp;optional</span> n)
  (interactive <span style="color: #bc8f8f;">"p"</span>)
  (escreen-goto-prev-screen n)
  (escreen-get-active-screen-numbers-with-emphasis))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:escreen-goto-next-screen</span> (<span style="color: #228b22;">&amp;optional</span> n)
  (interactive <span style="color: #bc8f8f;">"p"</span>)
  (escreen-goto-next-screen n)
  (escreen-get-active-screen-numbers-with-emphasis))

(define-key escreen-map escreen-prefix-char 'dim:escreen-goto-last-screen)

(global-set-key (kbd <span style="color: #bc8f8f;">"M-["</span>) 'dim:escreen-goto-prev-screen)
(global-set-key (kbd <span style="color: #bc8f8f;">"M-]"</span>) 'dim:escreen-goto-next-screen)
(global-set-key (kbd <span style="color: #bc8f8f;">"C-\\ DEL"</span>) 'dim:escreen-goto-prev-screen)
(global-set-key (kbd <span style="color: #bc8f8f;">"C-\\ SPC"</span>) 'dim:escreen-goto-next-screen)

(global-set-key '[s-mouse-4] 'dim:escreen-goto-prev-screen)
(global-set-key '[s-mouse-5] 'dim:escreen-goto-next-screen)
</pre>

<p>Oh, and as I'm in the <em>terms in emacs</em> part of universe (rather than using
<code>emacs -nw</code> in some terminal emulator, but loosing sync between X clipbloard
and emacs selection), I had to add this too:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">add support for C-\ from terms
</span>(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">term</span>)
(define-key term-raw-map escreen-prefix-char escreen-map)
(define-key term-raw-map (kbd <span style="color: #bc8f8f;">"M-["</span>) 'dim:escreen-goto-prev-screen)
(define-key term-raw-map (kbd <span style="color: #bc8f8f;">"M-]"</span>) 'dim:escreen-goto-next-screen)
</pre>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 22 Sep 2009 23:04:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/09/22-escreen-integration.html</guid>
</item>
<item>
  <title>Follow-up on dim:mailrc-add-entry</title>
  <link>http://tapoueh.org/blog/2009/09/07-follow-up-on-dimmailrc-add-entry.html</link>
  <description><![CDATA[<p class="first">The function didn't allow for using more than one <code>mailrc</code> file, which isn't a
good idea, so I've just added that. Oh and for <code>gnus</code> integration what I need
is <code>(add-hook 'message-mode-hook 'mail-abbrevs-setup)</code> it seems... so that if
I type the alias it'll get automatically expanded. And to be real lazy and
avoid having to type in the entire alias, <code>mail-abbrev-complete-alias</code> to the
rescue, assigned to some easy to reach keys.</p>

<pre class="src">
(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">message</span>)
(define-key message-mode-map (kbd <span style="color: #bc8f8f;">"C-'"</span>) 'mail-abbrev-complete-alias)

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:mailrc-add-entry</span> (<span style="color: #228b22;">&amp;optional</span> prefix alias)
  <span style="color: #bc8f8f;">"read email at point and add it to an ~/.mailrc file"</span>
  (interactive <span style="color: #bc8f8f;">"P\nMalias: "</span>)
  (<span style="color: #7f007f;">let*</span> ((default-mailrc (file-name-nondirectory mail-personal-alias-file))
         (mailrc (<span style="color: #7f007f;">if</span> prefix (expand-file-name
                             (read-file-name
                              <span style="color: #bc8f8f;">"Add alias into file: "</span>
                              <span style="color: #bc8f8f;">"~/"</span>
                              default-mailrc
                              t
                              default-mailrc))
                   mail-personal-alias-file))
         (address (thing-at-point 'email-address))
         (buffer (find-file-noselect mailrc t)))
    (<span style="color: #7f007f;">when</span> address
      (<span style="color: #7f007f;">with-current-buffer</span> buffer
        <span style="color: #b22222;">;; </span><span style="color: #b22222;">we don't support updating existing alias in the file
</span>        (<span style="color: #7f007f;">save-excursion</span>
          (goto-char (point-min))
          (<span style="color: #7f007f;">if</span> (search-forward (concat <span style="color: #bc8f8f;">"alias "</span> alias) nil t)
              (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #bc8f8f;">"Alias %s is already present in .mailrc"</span> alias)))

        (<span style="color: #7f007f;">save-current-buffer</span>
          (<span style="color: #7f007f;">save-excursion</span>
            (goto-char (point-max))
            (insert (format <span style="color: #bc8f8f;">"\nalias %s \"%s &lt;%s&gt;\""</span> alias (cdr address) (car ad<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">dress)))))))))</span>
</pre>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 07 Sep 2009 12:50:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/09/07-follow-up-on-dimmailrc-add-entry.html</guid>
</item>
<item>
  <title>Improving ~/.mailrc usage</title>
  <link>http://tapoueh.org/blog/2009/09/07-improving-mailrc-usage.html</link>
  <description><![CDATA[<p class="first">So I've been adviced to use <code>~/.mailrc</code> for keeping a basic address book in
Emacs, for use within <code>gnus</code> for example. I had to resort to the manual to
find out how to use the file aliases when I need them, that is when
composing a mail. For the record, here's what I had to do:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">mails and aliases
</span>(add-hook 'mail-mode-hook 'mail-abbrevs-setup)
(global-set-key (kbd <span style="color: #bc8f8f;">"C-c @"</span>) 'mail-abbrev-insert-alias)
</pre>

<p>That means I prefer hitting <code>C-c @</code>, then typing the alias in the minibuffer
(with completion) and there after see the full mail address in my
<code>message-mode</code> buffer. This looks like it'll change over time, but rather than
searching how to have a nice inline alias completion (<code>M-tab</code> maybe, but
already used by the <em>window manager</em>), I've tackled the problem of maintaining
the ~/.mailrc file.</p>

<p>Lazy as I am (or I wouldn't be using Emacs this much), having to manually
select the email region in the buffer, open or switch to the <code>mailrc</code> buffer
then paste my new entry, not forgetting to format it with <code>alias foo</code> prefix
and checking for alias usage while doing so didn't strike me as
appealing. Oh and don't forget to add quote where they belong, too.</p>

<p>Too much work that I wanted to automate. Here we go:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">automate adding mail at point to ~/.mailrc
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:mailrc-add-entry</span> (alias)
  <span style="color: #bc8f8f;">"read email at point"</span>
  (interactive <span style="color: #bc8f8f;">"Malias: "</span>)
  (<span style="color: #7f007f;">let</span> ((address (thing-at-point 'email-address))
        (buffer (find-file-noselect mail-personal-alias-file t)))
    (<span style="color: #7f007f;">when</span> address
      (<span style="color: #7f007f;">with-current-buffer</span> buffer
        <span style="color: #b22222;">;; </span><span style="color: #b22222;">we don't support updating existing alias in the file
</span>        (<span style="color: #7f007f;">save-excursion</span>
          (goto-char (point-min))
          (<span style="color: #7f007f;">if</span> (search-forward (concat <span style="color: #bc8f8f;">"alias "</span> alias) nil t)
              (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #bc8f8f;">"Alias %s is already present in .mailrc"</span> alias)))

        (<span style="color: #7f007f;">save-current-buffer</span>
          (<span style="color: #7f007f;">save-excursion</span>
            (goto-char (point-max))
            (insert (format <span style="color: #bc8f8f;">"\nalias %s \"%s &lt;%s&gt;\""</span> alias (cdr address) (car ad<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">dress)))))))))</span>

(global-set-key (kbd <span style="color: #bc8f8f;">"C-c C-@"</span>) 'dim:mailrc-add-entry)
</pre>

<p>Quite there, you'll notice that I'm using <code>thing-at-point 'email-address</code>, and
maybe you already know that <code>emacs23</code> does not provide this. It provides
<code>thing-at-point 'email</code> which will ignore real name and all. For example,
given a point somewhere inside the right part of <code>John Doe
&lt;johndoe@email.tld&gt;</code> the <code>'email</code> variant of <code>thing-at-point</code> will return
<code>johndoe@email.tld</code>. In words of one syllabe: not what I want.</p>

<p>So after searching around for a solution, I saw <code>mail-header-parse-address</code>
from the API oriented <code>mail-parse</code> librairy, and finaly came up with this dead simple
solution which works fine enough for me:</p>

<pre class="src">
(<span style="color: #7f007f;">require</span> '<span style="color: #5f9ea0;">mail-parse</span>)

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">thing-at-point-bounds-of-email-address</span> ()
  <span style="color: #bc8f8f;">"return a cons of begin and end position of email address at point, including </span><span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">full name"</span>
  (<span style="color: #7f007f;">save-excursion</span>
    (<span style="color: #7f007f;">let*</span> ((search-point (point))
           (start (re-search-backward <span style="color: #bc8f8f;">"[:,]"</span> (line-beginning-position) 'move))
           (dummy (goto-char search-point))
           (end   (re-search-forward  <span style="color: #bc8f8f;">"[:,]"</span> (line-end-position) t)))
      (setq start (<span style="color: #7f007f;">if</span> start (+ 1 start)
                    (line-beginning-position)))
      (<span style="color: #7f007f;">unless</span> end (setq end (line-end-position)))
      (cons start end))))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">thing-at-point-email-address</span> ()
  <span style="color: #bc8f8f;">"return full email address at point"</span>
  (<span style="color: #7f007f;">let*</span> ((bounds (thing-at-point-bounds-of-email-address))
         (email-address-text
          (<span style="color: #7f007f;">when</span> bounds (buffer-substring-no-properties (car bounds) (cdr bounds)<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">))))</span>
    (mail-header-parse-address email-address-text)))

(put 'email-address 'bounds-of-thing-at-point 'thing-at-point-bounds-of-email-ad<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">dress)</span>
(put 'email-address 'thing-at-point 'thing-at-point-email-address)
</pre>

<p>Now, when I receive a mail and want to store an alias for it, I simply place
point somewhere in the mail then hit <code>C-c C-@</code>, and <em>voilà</em> my <code>~/.mailrc</code> is
uptodate.</p>

<p>Hope it'll be useful for someone else, but at least I'm keeping annotated
history of the files :)</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 07 Sep 2009 01:29:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/09/07-improving-mailrc-usage.html</guid>
</item>
<item>
  <title>Some emacs nifties</title>
  <link>http://tapoueh.org/blog/2009/08/03-some-emacs-nifties.html</link>
  <description><![CDATA[<p class="first">First, here's a way to insert at current position the last message printed
into the minibuffer... well not exactly, in <code>*Messages*</code> buffer in fact. I was
tired of doing it myself after invoking, e.g., <code>M-x emacs-version</code>.</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">print last message
</span><span style="color: #b22222;">;; </span><span style="color: #b22222;">current-message is already lost by the time this gets called
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:previous-message</span> (<span style="color: #228b22;">&amp;optional</span> nth)
  <span style="color: #bc8f8f;">"get last line of *Message* buffer"</span>
  (<span style="color: #7f007f;">with-current-buffer</span> (get-buffer <span style="color: #bc8f8f;">"*Messages*"</span>)
    (<span style="color: #7f007f;">save-excursion</span>
      (goto-char (point-max))
      (setq nth (<span style="color: #7f007f;">if</span> nth nth 1))
      (<span style="color: #7f007f;">while</span> (&gt; nth 0)
        (previous-line)
        (setq nth (- nth 1)))
      (buffer-substring (line-beginning-position) (line-end-position)))))

(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">dim:insert-previous-message</span> (<span style="color: #228b22;">&amp;optional</span> nth)
  <span style="color: #bc8f8f;">"insert last message of *Message* to current position"</span>
  (interactive <span style="color: #bc8f8f;">"p"</span>)
  (insert (format <span style="color: #bc8f8f;">"%s"</span> (dim:previous-message nth))))

(global-set-key (kbd <span style="color: #bc8f8f;">"C-c m"</span>) 'dim:insert-previous-message)
</pre>

<p>Now I stumbled accross <a href="http://planet.emacsen.org/">Planet Emacsen</a> and saw this <a href="http://curiousprogrammer.wordpress.com/2009/07/26/emacs-utility-functions/">Emacs Utility Functions</a>
post, containing a version of <code>duplicate-current-line</code> that I didn't
like... here's mine:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">duplicate current line
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">duplicate-current-line</span> (<span style="color: #228b22;">&amp;optional</span> n)
  <span style="color: #bc8f8f;">"duplicate current line, make more than 1 copy given a numeric argument"</span>
  (interactive <span style="color: #bc8f8f;">"p"</span>)
  (<span style="color: #7f007f;">save-excursion</span>
    (<span style="color: #7f007f;">let</span> ((nb (or n 1))
          (current-line (thing-at-point 'line)))
      <span style="color: #b22222;">;; </span><span style="color: #b22222;">when on last line, insert a newline first
</span>      (<span style="color: #7f007f;">when</span> (or (= 1 (forward-line 1)) (eq (point) (point-max)))
        (insert <span style="color: #bc8f8f;">"\n"</span>))

      <span style="color: #b22222;">;; </span><span style="color: #b22222;">now insert as many time as requested
</span>      (<span style="color: #7f007f;">while</span> (&gt; n 0)
        (insert current-line)
        (decf n)))))

(global-set-key (kbd <span style="color: #bc8f8f;">"C-S-d"</span>) 'duplicate-current-line)
</pre>

<p>And a last one inspired by some strange <code>vim</code> behavior for which I fail to see
a need:</p>

<pre class="src">
<span style="color: #b22222;">;; </span><span style="color: #b22222;">on request by cyrilb, who missed it from vim
</span><span style="color: #b22222;">;; </span><span style="color: #b22222;">no global-set-key yet, still have to think I'll use it someday...
</span>(<span style="color: #7f007f;">defun</span> <span style="color: #0000ff;">copy-char-from-prev-line</span> ()
  <span style="color: #bc8f8f;">"Copy char at same position on previous line, when such a line and position ex</span><span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">ists"</span>
  (interactive)
  (<span style="color: #7f007f;">let</span> ((c)
        (p (- (point) (line-beginning-position))))
    (<span style="color: #7f007f;">save-excursion</span>
      (<span style="color: #7f007f;">when</span> (eq 0 (forward-line -1))
        (<span style="color: #7f007f;">when</span> (&lt; (+ (point) p) (line-end-position))
          (forward-char p)
          (setq c (thing-at-point 'char)))))
    (<span style="color: #7f007f;">when</span> c
      (insert c))))
</pre>

<p>Next time I'll try to talk about <code>rcirc-groups</code> or <code>cssh</code> which have managed to
take some of my free time recently.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 03 Aug 2009 15:15:00 +0200</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2009/08/03-some-emacs-nifties.html</guid>
</item>
<item>
  <title>Useful emacs trick</title>
  <link>http://tapoueh.org/blog/2008/12/09-useful-emacs-trick.html</link>
  <description><![CDATA[<p class="first">Watch <a href="http://www.ted.com/index.php/talks/kevin_kelly_on_the_next_5_000_days_of_the_web.html">Kevin Kelly's Talk</a> here, it's about trying to predict what the
Internet will look like 5 thousands days from now.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Tue, 09 Dec 2008 00:00:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2008/12/09-useful-emacs-trick.html</guid>
</item>
<item>
  <title>emacs-snapshot</title>
  <link>http://tapoueh.org/blog/2008/12/08-emacs-snapshot.html</link>
  <description><![CDATA[<p class="first">If you want to live on the bleeding edge, it's easy enough to get a non
existing release of <a href="http://www.gnu.org/software/emacs/">GNU Emacs</a> under <a href="http://www.debian.org/releases/unstable/">debian sid</a>, thanks to
<a href="http://emacs.orebokech.com/">http://emacs.orebokech.com/</a>.</p>

<p>The problem is that <a href="http://mwolson.org/projects/EmacsMuse.html">Emacs Muse</a> is broken on <code>emacs-snapshot</code>, partly because
of <a href="http://www.emacswiki.org/emacs/Htmlize">Htmlize</a> which is unable to find the face fonts (I got <code>(error &quot;Invalid
face&quot;)</code>), partly because of my configuration itself:</p>

<pre class="src">
hunk ./dim-muse.el 22
-      '((<span style="color: #bc8f8f;">"pgsql.tapoueh.org"</span> $
-        (,@(muse-project-alist-dirs <span style="color: #bc8f8f;">"~/dev/muse/site"</span>) $
+      '((<span style="color: #bc8f8f;">"pgsql.tapoueh.org"</span> (<span style="color: #bc8f8f;">"~/dev/muse/site"</span>
+        <span style="color: #b22222;">;;</span><span style="color: #b22222;">(,@(muse-project-alist-dirs "~/dev/muse/site") $
</span></pre>

<p>The solution was to switch to using <code>Emacs 22</code> on sid for <a href="http://pgsql.tapoueh.org/site/muse/site/">pgsql.tapoueh.org</a>
editing, while using <a href="http://www.emacswiki.org/emacs/?action=browse;oldid=EmacsCVS;id=EmacsFromCVS">EmacsCVS</a> for other activities.</p>

<p>And I'm using the patched <code>Htmlize</code> on both the versions, by the way.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Mon, 08 Dec 2008 16:10:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2008/12/08-emacs-snapshot.html</guid>
</item>
<item>
  <title>new site, using new software</title>
  <link>http://tapoueh.org/blog/2008/12/06-new-site.html</link>
  <description><![CDATA[<p class="first">Oh and check out the <a href="skytools.html">skytools</a> page too. <a href="http://mwolson.org/projects/EmacsMuse.html">Emacs Muse</a> is so great a project
that instead of just working on how to publish a website with this tool, I
found myself editing a rather large document about <code>londite.py</code>.</p>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Sat, 06 Dec 2008 00:00:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2008/12/06-new-site.html</guid>
</item>
<item>
  <title>Emacs Muse powered blog</title>
  <link>http://tapoueh.org/blog/2008/12/05-emacs-muse-powered-blog.html</link>
  <description><![CDATA[<p class="first">So finaly a blogging software for <em>geeks</em> exists?</p>

<blockquote>
<p class="quoted">
The problem with communication is that you think it happened.</p>

</blockquote>
]]></description>
  <author>dim@tapoueh.org (Dimitri Fontaine)</author>
  <pubDate>Fri, 05 Dec 2008 00:00:00 +0100</pubDate>
  <guid isPermaLink="true">http://tapoueh.org/blog/2008/12/05-emacs-muse-powered-blog.html</guid>
</item>
  </channel>
</rss>

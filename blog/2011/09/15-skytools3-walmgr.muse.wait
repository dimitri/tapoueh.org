#author Dimitri Fontaine
#title  Skytools3: walmgr
#date   20110915-11:22
#tags   PostgreSQL Skytools WalMgr Replication Archiving

Let's begin the [[http://wiki.postgresql.org/wiki/SkyTools][Skytools 3]] documentation effort, which is long overdue.  The
code is waiting for you over at [[https://github.com/markokr/skytools][github]], and is stable and working.  Why is
it still in *release candidate* status, I hear you asking?  Well because it's
missing updated documentation.

[[http://packages.debian.org/experimental/skytools3-walmgr][WalMgr]] is the Skytools component that manages *WAL shipping* for you, and
archiving too.  It knows how to prepare your master and standby setup, how
to take a base backup and push it to the standby's system, how to archive
(at the satndby) master's WAL files as they are produced and have the
standby restore from this archive.

What's new in =walmgr= from Skytools 3 is its support for *Streaming
Replication* that made its way into PostgreSQL 9.0 and is even more useful in
PostgreSQL 9.1 (better monitoring, synchronous replication option).

* Getting ready

Now, I'm using debian here, and a build virtual machine where I'm doing the
*backporting* work.  As [[http://www.postgresql.org/about/news.1349][PostgreSQL 9.1]] is now out, let's use that.

<src>
:~$ pg_lsclusters 
Version Cluster   Port Status Owner    Data directory                     Log file
8.4     main      5432 online postgres /var/lib/postgresql/8.4/main       /var/log/postgresql/postgresql-8.4-main.log
9.0     main      5433 online postgres /var/lib/postgresql/9.0/main       /var/log/postgresql/postgresql-9.0-main.log
9.1     main      5434 online postgres /var/lib/postgresql/9.1/main       /var/log/postgresql/postgresql-9.1-main.log
</src>

After some editing of the configuration files (enabling *hot standby* and
switching =pg_hba.conf= to =trust= for the sake of this example), we can see
that the cluster is ready to be abused:

<src>
:~$ sudo pg_ctlcluster 9.1 main restart
:~$ psql --cluster 9.1/main  -U postgres \
-c "select name, setting from pg_settings where name in ('max_wal_senders', 'wal_level')"
      name       |   setting   
-----------------+-------------
 max_wal_senders | 1
 wal_level       | hot_standby
(2 rows)

:~$ sudo mkdir -p /etc/walshipping/9.1/main
:~$ sudo chown -R postgres:postgres /etc/walshipping

:~$ ssh-keygen -t dsa
:~/.ssh$ cp id_dsa.pub authorized_keys
:~$ ssh localhost
</src>

So the order of operations is to prepare a standby, then have it restore
from the archives, then activate the wal streaming and check that the setup
allows the standby to switch back and forth between the streaming and the
archives.

* Setting walmgr 

To prepare the standby, we will do a *base backup* of the master.  That step
is handled by =walmgr=, so we first need to set it up.  Here's the sample
file:

<src lang="conf">
[walmgr]
job_name             = wal-master
logfile              = /var/log/postgresql/%(job_name)s.log
pidfile              = /var/run/postgresql/%(job_name)s.pid
use_skylog           = 0

master_db            = dbname=template1
master_data          = /data/postgresql/9.0/main/
master_config        = /etc/postgresql/9.0/main/postgresql.conf
master_bin           = /usr/lib/postgresql/9.0/bin

# set this only if you can afford database restarts during setup and stop.
master_restart_cmd   = pg_ctlcluster 9.0 main restart

slave = 192.168.27.142
slave_config = /etc/walshipping/9.0/main/slave.ini

walmgr_data          = /data/walshipping/9.0/main
completed_wals       = %(walmgr_data)s/logs.complete
partial_wals         = %(walmgr_data)s/logs.partial
full_backup          = %(walmgr_data)s/data.master
config_backup        = %(walmgr_data)s/config.backup

# syncdaemon update frequency
loop_delay           = 10.0
# use record based shipping available since 8.2
use_xlog_functions   = 0

# pass -z to rsync, useful on low bandwidth links
compression          = 0

# keep symlinks for pg_xlog and pg_log
keep_symlinks        = 1

# tell walmgr to set wal_level to hot_standby during setup
#hot_standby          = 1

# periodic sync
#command_interval     = 600
#periodic_command     = /var/lib/postgresql/walshipping/periodic.sh
</src>

* Base Backup

Now we have a master to play with, let's build a standby out of it.

* Archiving

* Restore

* Hot Standby and walmgr

* Streaming Replication and walmgr


<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs Lisp on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/categories/emacs-lisp/</link>
    <description>Recent content in Emacs Lisp on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jul 2013 13:34:00 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/categories/emacs-lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emacs Muse meets Common Lisp</title>
      <link>https://tapoueh.org/blog/2013/07/emacs-muse-meets-common-lisp/</link>
      <pubDate>Mon, 08 Jul 2013 13:34:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/07/emacs-muse-meets-common-lisp/</guid>
      <description>This blog of mine is written in the very good Emacs Muse format, that I find much more friendly to writing articles than both org-mode and markdown-mode that I both use in a regular basis too. The main think that I like in Muse that those two others lack is the support for displaying images inline.
Here&amp;rsquo;s what it looks like to edit with Emacs Muse
The Muse publishing system The idea is that you edit .</description>
    </item>
    
    <item>
      <title>M-x ack</title>
      <link>https://tapoueh.org/blog/2012/11/m-x-ack/</link>
      <pubDate>Thu, 22 Nov 2012 17:36:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2012/11/m-x-ack/</guid>
      <description>I&amp;rsquo;ve been asked about how to integrate the ack tool (you know, the one that is better than grep) into Emacs today. Again. And I just realized that I didn&amp;rsquo;t blog about my solution. That might explain why I keep getting asked about it after all&amp;hellip;
So here it is, M-x ack:
;;; dim-ack.el --- Dimitri Fontaine ;; ;; http://stackoverflow.com/questions/2322389/ack-does-not-work-when-run-from-grep-find-in-emacs-on-windows (defcustom ack-command (or (executable-find &amp;quot;ack&amp;quot;) (executable-find &amp;quot;ack-grep&amp;quot;)) &amp;quot;Command to use to call ack, e.</description>
    </item>
    
    <item>
      <title>Elisp Breadcrumbs</title>
      <link>https://tapoueh.org/blog/2011/07/elisp-breadcrumbs/</link>
      <pubDate>Thu, 14 Jul 2011 18:44:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/07/elisp-breadcrumbs/</guid>
      <description>A breadcrumb is a navigation aid. I just added one to this website, so that it gets easier to browse from any article to its local and parents indexes and back to /dev/dim, the root webpage of this site.
As it was not that much work to implement, here&amp;rsquo;s the whole of it:
;;; ;;; Breadcrumb support ;;; (defun tapoueh-breadcrumb-to-current-page () &amp;quot;Return a list of (name . link) from the index root page to current one&amp;quot; (let* ((current (muse-current-file)) (cwd (file-name-directory current)) (project (muse-project-of-file current)) (root (muse-style-element :path (caddr project))) (path (tapoueh-path-to-root)) (dirs (split-string (file-relative-name current root) &amp;quot;/&amp;quot;))) ;; (&amp;quot;blog&amp;quot; &amp;quot;2011&amp;quot; &amp;quot;07&amp;quot; &amp;quot;13-back-from-char11.</description>
    </item>
    
    <item>
      <title>Muse setup revised</title>
      <link>https://tapoueh.org/blog/2011/07/muse-setup-revised/</link>
      <pubDate>Tue, 05 Jul 2011 19:55:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/07/muse-setup-revised/</guid>
      <description>Most of you are probably reading my posts directly in their RSS reader tools (mine is gnus thanks to the Gwene service), so you probably missed it, but I just pushed a whole new version of my website, still using Emacs Muse as the engine.
My setup is tentatively called tapoueh.el and browsable online. It consists of some tweaks on top of Muse, so that I can enjoy tags and proper rss support.</description>
    </item>
    
    <item>
      <title>Mailq modeline display</title>
      <link>https://tapoueh.org/blog/2011/05/mailq-modeline-display/</link>
      <pubDate>Thu, 05 May 2011 14:10:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/05/mailq-modeline-display/</guid>
      <description>If you&amp;rsquo;ve not been following along, you might have missed it: it appears to me that even today, in 2011, mail systems work much better when setup the old way. Meaning with a local MTA for outgoing mail. With some niceties, such as sender dependent relayhost maps.
That&amp;rsquo;s why I needed M-x mailq to display the mail queue and have some easy shortcuts in order to operate it (mainly f runs the command mailq-mode-flush, but per site and per id delivery are useful too).</description>
    </item>
    
    <item>
      <title>Postfix sender_dependent_relayhost_maps</title>
      <link>https://tapoueh.org/blog/2010/09/postfix-sender_dependent_relayhost_maps/</link>
      <pubDate>Thu, 23 Sep 2010 14:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/09/postfix-sender_dependent_relayhost_maps/</guid>
      <description>The previous article about M-x mailq has raised several mails asking me details about the Postfix setup I&amp;rsquo;m talking about. The problem we&amp;rsquo;re trying to solve is having a local MTA to send mails, so that any old-style Unix tool just works, instead of only the MUA you&amp;rsquo;ve spent time setting up.
Postfix makes it possible to do that quite easily, but it gets a little more involved if you have more than one relayhost that you want to use depending on your current From address.</description>
    </item>
    
    <item>
      <title>Scratch that itch: M-x mailq</title>
      <link>https://tapoueh.org/blog/2010/09/scratch-that-itch-m-x-mailq/</link>
      <pubDate>Thu, 23 Sep 2010 09:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/09/scratch-that-itch-m-x-mailq/</guid>
      <description>Nowadays, most people would think that email is something simple, you just setup your preferred client (that&amp;rsquo;s called a MUA) with some information such as the smtp host you want it to talk to (that&amp;rsquo;s call a MTA and this one is your relayhost). Then there&amp;rsquo;s all the receiving mails part, and that&amp;rsquo;s smtp again on the server side. Then there&amp;rsquo;s how to get those mail, read them, flag them, manage them, and that&amp;rsquo;s better served by IMAP.</description>
    </item>
    
    <item>
      <title>Want to share your recipes?</title>
      <link>https://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</link>
      <pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</guid>
      <description>Yes, that&amp;rsquo;s another el-get related entry. It seems to take a lot of my attention these days. After having setup the git repository so that you can update el-get from within itself (so that it&amp;rsquo;s self-contained), the next logical step is providing recipes.
By that I mean that el-get-sources entries will certainly look a lot alike between a user and another. Let&amp;rsquo;s take the el-get entry itself:
(:name el-get :type git :url &amp;quot;git://github.</description>
    </item>
    
    <item>
      <title>ClusterSSH gets dsh support</title>
      <link>https://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</link>
      <pubDate>Fri, 23 Jul 2010 22:20:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</guid>
      <description>If you don&amp;rsquo;t know about ClusterSSH, it&amp;rsquo;s a project that builds on M-x term and ssh to offer a nice and simple way to open remote terminals. It&amp;rsquo;s available in ELPA and developed at github cssh repository.
The default binding is C-= and asks for the name of the server to connect to, in the minibuffer, with completion. The host list used for the completion comes from tramp and is pretty complete, all the more if you&amp;rsquo;ve setup ~/.</description>
    </item>
    
    <item>
      <title>Emacs Muse hacking</title>
      <link>https://tapoueh.org/blog/2010/03/emacs-muse-hacking/</link>
      <pubDate>Thu, 04 Mar 2010 13:33:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/03/emacs-muse-hacking/</guid>
      <description>Now you know what piece of software is used to publish this blog. I really like it, the major mode makes it a great experience to be using this tool, and the fact that you produce the HTML and rsync it all from within Emacs ( C-c C-p then C-c C-r with some easy elisp code) is a big advantage as far as I&amp;rsquo;m concerned. No need to resort to shell and Makefile.</description>
    </item>
    
    <item>
      <title>Emacs Muse based publishing</title>
      <link>https://tapoueh.org/blog/2009/10/emacs-muse-based-publishing/</link>
      <pubDate>Tue, 06 Oct 2009 17:23:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/10/emacs-muse-based-publishing/</guid>
      <description>As you might have noticed, this little blog of mine is not compromising much and entirely maintained from Emacs. Until today, I had to resort to term to upload my publications, though, as I&amp;rsquo;ve been too lazy to hack up the tools integration for simply doing a single rsync command line. That was one time to many:
(defvar dim:muse-rsync-options &amp;quot;-avz&amp;quot; &amp;quot;rsync options&amp;quot;) (defvar dim:muse-rsync-source &amp;quot;~/dev/muse/out&amp;quot; &amp;quot;local path from where to rsync, with no ending /&amp;quot;) (defvar dim:muse-rsync-target &amp;quot;dim@tapoueh.</description>
    </item>
    
    <item>
      <title>Some emacs nifties</title>
      <link>https://tapoueh.org/blog/2009/08/some-emacs-nifties/</link>
      <pubDate>Mon, 03 Aug 2009 15:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/08/some-emacs-nifties/</guid>
      <description>First, here&amp;rsquo;s a way to insert at current position the last message printed into the minibuffer&amp;hellip; well not exactly, in *Messages* buffer in fact. I was tired of doing it myself after invoking, e.g., M-x emacs-version.
;; print last message ;; current-message is already lost by the time this gets called (defun dim:previous-message (&amp;amp;optional nth) &amp;quot;get last line of *Message* buffer&amp;quot; (with-current-buffer (get-buffer &amp;quot;*Messages*&amp;quot;) (save-excursion (goto-char (point-max)) (setq nth (if nth nth 1)) (while (&amp;gt; nth 0) (previous-line) (setq nth (- nth 1))) (buffer-substring (line-beginning-position) (line-end-position))))) (defun dim:insert-previous-message (&amp;amp;optional nth) &amp;quot;insert last message of *Message* to current position&amp;quot; (interactive &amp;quot;p&amp;quot;) (insert (format &amp;quot;%s&amp;quot; (dim:previous-message nth)))) (global-set-key (kbd &amp;quot;C-c m&amp;quot;) &#39;dim:insert-previous-message)  Now I stumbled accross Planet Emacsen and saw this Emacs Utility Functions post, containing a version of duplicate-current-line that I didn&amp;rsquo;t like&amp;hellip; here&amp;rsquo;s mine:</description>
    </item>
    
    <item>
      <title>Emacs Muse powered blog</title>
      <link>https://tapoueh.org/blog/2008/12/emacs-muse-powered-blog/</link>
      <pubDate>Fri, 05 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2008/12/emacs-muse-powered-blog/</guid>
      <description>So finaly a blogging software for geeks exists?
 The problem with communication is that you think it happened.
 </description>
    </item>
    
    <item>
      <title>Fake entry</title>
      <link>https://tapoueh.org/blog/2008/12/fake-entry/</link>
      <pubDate>Thu, 04 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2008/12/fake-entry/</guid>
      <description>This is a test of a fake entry to see how muse will manage this.
With some SQL inside:
 SELECT * FROM planet.postgresql.org WHERE author = &amp;quot;dim&amp;quot;; 
 </description>
    </item>
    
  </channel>
</rss>
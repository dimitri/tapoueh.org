<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pgloader on Dimitri Fontaine, Expert PostgreSQL</title>
    <link>http://tapoueh.org/categories/pgloader/</link>
    <description>Recent content in Pgloader on Dimitri Fontaine, Expert PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 May 2015 16:06:00 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/categories/pgloader/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quicklisp and debian</title>
      <link>http://tapoueh.org/blog/2015/05/quicklisp-and-debian/</link>
      <pubDate>Sat, 02 May 2015 16:06:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2015/05/quicklisp-and-debian/</guid>
      <description>&lt;p&gt;Common Lisp users are very happy to use
&lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt; when it comes to
downloading and maintaining dependencies between their own code and the
&lt;a href=&#34;http://quickdocs.org/&#34;&gt;librairies&lt;/a&gt; it is using.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why is pgloader so much faster?</title>
      <link>http://tapoueh.org/blog/2014/05/why-is-pgloader-so-much-faster/</link>
      <pubDate>Wed, 14 May 2014 14:59:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2014/05/why-is-pgloader-so-much-faster/</guid>
      <description>pgloader loads data into PostgreSQL. The new version is stable enough nowadays that it&amp;rsquo;s soon to be released, the last piece of the 3.1.0 puzzle being full debian packaging of the tool.
The pgloader logo is a loader truck, just because.
As you might have noticed if you&amp;rsquo;ve read my blog before, I decided that pgloader needed a full rewrite in order for it to be able to enter the current decade as a relevant tool.</description>
    </item>
    
    <item>
      <title>Import fixed width data with pgloader</title>
      <link>http://tapoueh.org/blog/2013/11/import-fixed-width-data-with-pgloader/</link>
      <pubDate>Mon, 18 Nov 2013 12:48:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/11/import-fixed-width-data-with-pgloader/</guid>
      <description>A long time ago we talked about how to Import fixed width data with pgloader, following up on other stories still online at Postgres OnLine Journal and on David Fetter&amp;rsquo;s blog. Back then, I showed that using pgloader made it easier to import the data, but also showed quite poor performances characteristics due to using the debug mode in the timings. Let&amp;rsquo;s update that article with current pgloader wonders!</description>
    </item>
    
    <item>
      <title>Migrating Sakila from MySQL to PostgreSQL</title>
      <link>http://tapoueh.org/blog/2013/11/migrating-sakila-from-mysql-to-postgresql/</link>
      <pubDate>Tue, 12 Nov 2013 11:37:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/11/migrating-sakila-from-mysql-to-postgresql/</guid>
      <description>As presented at the PostgreSQL Conference Europe the new version of pgloader is now able to fully migrate a MySQL database, including discovering the schema, casting data types, transforming data and default values. Sakila is the traditional MySQL example database, in this article we&amp;rsquo;re going to fully migrate it over to PostgreSQL.
What about switching to PostgreSQL, it&amp;rsquo;s easier than ever.
Without further ado, here&amp;rsquo;s what happens when you ask pgloader to please migrate the whole thing over to PostgreSQL:</description>
    </item>
    
    <item>
      <title>A Worthwile Micro Optimisation</title>
      <link>http://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</link>
      <pubDate>Thu, 03 Oct 2013 22:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</guid>
      <description>In our previous article about Loading Geolocation Data, we did load some data into PostgreSQL and saw the quite noticable impact of a user transformation. As it happens, the function that did the integer to IP representation was so naive as to scratch the micro optimisation itch of some Common Lisp hackers: thanks a lot guys, in particular stassats who came up with the solution we&amp;rsquo;re seeing now.
The previous code was a straight rewrite of the provided documentation in Common Lisp.</description>
    </item>
    
    <item>
      <title>Loading Geolocation Data</title>
      <link>http://tapoueh.org/blog/2013/10/loading-geolocation-data/</link>
      <pubDate>Tue, 01 Oct 2013 16:52:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/loading-geolocation-data/</guid>
      <description>As I&amp;rsquo;ve been mentionning in the past already, I&amp;rsquo;m currently rewriting pgloader from scratch in Common Lisp. In terms of technical debt that&amp;rsquo;s akin to declaring bankrupcy, which is both sad news and good news as there&amp;rsquo;s suddenly new hope of doing it right this time.
Let&amp;rsquo;s dive into the python to common lisp rewrite
Why rewriting pgloader? Several problems hinted me into doing something other than maintaining the code I had for pgloader.</description>
    </item>
    
    <item>
      <title>Migrating from MySQL to PostgreSQL</title>
      <link>http://tapoueh.org/blog/2013/08/migrating-from-mysql-to-postgresql/</link>
      <pubDate>Thu, 08 Aug 2013 17:41:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/08/migrating-from-mysql-to-postgresql/</guid>
      <description>About the only time when I will accept to work with MySQL is when you need help to migrate away from it because you decided to move to PostgreSQL instead. And it&amp;rsquo;s already been too much of a pain really, so after all this time I began consolidating what I know about that topic and am writing a software to help me here. Consider it the MySQL Migration Toolkit.
A real classic that I couldn&amp;rsquo;t resist using here&amp;hellip;</description>
    </item>
    
    <item>
      <title>Playing with pgloader</title>
      <link>http://tapoueh.org/blog/2013/02/playing-with-pgloader/</link>
      <pubDate>Tue, 12 Feb 2013 11:17:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/02/playing-with-pgloader/</guid>
      <description>While making progress with both Event Triggers and Extension Templates, I needed to make a little break. My current keeping sane mental exercise seems to mainly involve using Common Lisp, a programming language that ships with about all the building blocks you need.
Yes, that old language brings so much on the table
When using Common Lisp, you have an awesome interactive development environment where you can redefine function and objects while testing them.</description>
    </item>
    
    <item>
      <title>pgloader: what&#39;s next?</title>
      <link>http://tapoueh.org/blog/2013/01/pgloader-whats-next/</link>
      <pubDate>Mon, 28 Jan 2013 10:48:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/01/pgloader-whats-next/</guid>
      <description>pgloader is a tool to help loading data into PostgreSQL, adding some error management to the COPY command. COPY is the fast way of loading data into PostgreSQL and is transaction safe. That means that if a single error appears within your bulk of data, you will have loaded none of it. pgloader will submit the data again in smaller chunks until it&amp;rsquo;s able to isolate the bad from the good, and then the good is loaded in.</description>
    </item>
    
    <item>
      <title>Automated Setup for pgloader</title>
      <link>http://tapoueh.org/blog/2013/01/automated-setup-for-pgloader/</link>
      <pubDate>Thu, 17 Jan 2013 14:32:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/01/automated-setup-for-pgloader/</guid>
      <description>Another day, another migration from MySQL to PostgreSQL&amp;hellip; or at least that&amp;rsquo;s how it feels sometimes. This time again I&amp;rsquo;ve been using some quite old scripts to help me do the migration.
That&amp;rsquo;s how I feel for MySQL users
Migrating the schema For the schema parts, I&amp;rsquo;ve been using mysql2pgsql with success for many years. This tool is not complete and will do only about 80% of the work. As I think that the schema should always be validated manually when doing a migration anyway, I happen to think that it&amp;rsquo;s good news.</description>
    </item>
    
    <item>
      <title>Tutoriel pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/tutoriel-pgloader/</link>
      <pubDate>Mon, 15 Aug 2011 15:39:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/tutoriel-pgloader/</guid>
      <description>En reprenant le contenu des articles de la série sur pgloader, j&amp;rsquo;ai pris le temps de compiler un tutoriel complet, en anglais. Si j&amp;rsquo;en crois les quelques mails que je reçois régulièrement au sujet de pgloader depuis quelques années maintenant, cela devrait aider les nouveaux utilisateurs.</description>
    </item>
    
    <item>
      <title>pgloader tutorial</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-tutorial/</link>
      <pubDate>Mon, 15 Aug 2011 15:33:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-tutorial/</guid>
      <description>To finish up the pgloader series, I&amp;rsquo;ve compiled all the information into a single page, the long awaited pgloader tutorial. That should help lots of users to get started with pgloader.</description>
    </item>
    
    <item>
      <title>Champs statiques &amp; pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/champs-statiques--pgloader/</link>
      <pubDate>Fri, 12 Aug 2011 11:01:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/champs-statiques--pgloader/</guid>
      <description>Dans la série de nos articles sur pgloader, l&amp;rsquo;article du jour décrit comment insérer des valeurs constantes (absentes du fichier de données) pendant le chargement. Cela permet par exemple d&amp;rsquo;ajouter un champ « origine », qui dépend typiquement de la chaîne de production des données et se retrouve souvent dans le nom du fichier de données lui-même.</description>
    </item>
    
    <item>
      <title>pgloader constant cols</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-constant-cols/</link>
      <pubDate>Fri, 12 Aug 2011 11:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-constant-cols/</guid>
      <description>The previous articles in the pgloader series detailed How To Use PgLoader then How to Setup pgloader, then what to expect from a parallel pgloader setup, and then pgloader reformating. Another need you might encounter when you get to use pgloader is adding constant values into a table&amp;rsquo;s column.
The basic situation where you need to do so is adding an origin field to your table. The value of that is not to be found in the data file itself, typically, but known in the pgloader setup.</description>
    </item>
    
    <item>
      <title>pgloader reformating</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-reformating/</link>
      <pubDate>Fri, 05 Aug 2011 11:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-reformating/</guid>
      <description>Back to our series about pgloader. The previous articles detailed How To Use PgLoader then How to Setup pgloader, then what to expect from a parallel pgloader setup. This article will detail how to reformat input columns so that what PostgreSQL sees is not what&amp;rsquo;s in the data file, but the result of a transformation from this data into something acceptable as an input for the target data type.
Here&amp;rsquo;s what the pgloader documentation has to say about this reformat parameter: The value of this option is a comma separated list of columns to rewrite, which are a colon separated list of column name, reformat module name, reformat function name.</description>
    </item>
    
    <item>
      <title>Reformater avec pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/reformater-avec-pgloader/</link>
      <pubDate>Fri, 05 Aug 2011 11:26:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/reformater-avec-pgloader/</guid>
      <description>Dans la série de nos articles sur pgloader, le dernier venu détaille comment utiliser la fonction de reformatage de cet outil. Dans le cadre d&amp;rsquo;utilisation d&amp;rsquo;un ETL, cela est assimilé à la phase Transform, ce qui fait de pgloader une solution simple pour vos besoins d&amp;rsquo;ETL.</description>
    </item>
    
    <item>
      <title>Parallel pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/parallel-pgloader/</link>
      <pubDate>Mon, 01 Aug 2011 12:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/parallel-pgloader/</guid>
      <description>This article continues the series that began with How To Use PgLoader then detailed How to Setup pgloader. We have some more fine points to talk about here, today&amp;rsquo;s article is about loading your data in parallel with pgloader.
several files at a time Parallelism is implemented in 3 different ways in pgloader. First, you can load more than one file at a time thanks to the max_parallel_sections parameter, that has to be setup in the global section of the file.</description>
    </item>
    
    <item>
      <title>pgloader en parallèle</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-en-parall%C3%A8le/</link>
      <pubDate>Mon, 01 Aug 2011 12:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-en-parall%C3%A8le/</guid>
      <description>Dans la série des articles sur pgloader, nous détaillons cette fois la configuration du paraléllisme de chargement des données. Une fois de plus, je vous réfère à l&amp;rsquo;article de référence en anglais : Parallel pgloader.
L&amp;rsquo;ensemble des articles de cette série permettra de constituer un tutoriel pgloader plus étoffé que l&amp;rsquo;actuel. Si vous êtes intéressés par une version française, un mail de votre part justifierait l&amp;rsquo;effort que cela représente !</description>
    </item>
    
    <item>
      <title>Configurer pgloader</title>
      <link>http://tapoueh.org/blog/2011/07/configurer-pgloader/</link>
      <pubDate>Fri, 29 Jul 2011 15:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/configurer-pgloader/</guid>
      <description>Je viens de publier un billet en anglais intitulé How to Setup pgloader, qui complète l&amp;rsquo;écriture en cours d&amp;rsquo;un tutoriel pgloader plus complet. Une fois de plus, je n&amp;rsquo;ai pas pris le temps de traduire cet article en français avant de savoir si cela vous intéresse, ô lecteurs. Si c&amp;rsquo;est le cas il suffit de me l&amp;rsquo;indiquer par mail (ou courriel, après tout) pour que j&amp;rsquo;ajoute cela dans ma TODO liste.</description>
    </item>
    
    <item>
      <title>How to Setup pgloader</title>
      <link>http://tapoueh.org/blog/2011/07/how-to-setup-pgloader/</link>
      <pubDate>Fri, 29 Jul 2011 15:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/how-to-setup-pgloader/</guid>
      <description>In a previous article we detailed how to use pgloader, let&amp;rsquo;s now see how to write the pgloader.conf that instructs pgloader about what to do.
This file is expected in the INI format, with a global section then one section per file you want to import. The global section defines some default options and how to connect to the PostgreSQL server.
The configuration setup is fully documented on the pgloader man page that you can even easily find online.</description>
    </item>
    
    <item>
      <title>Comment Utiliser pgloader</title>
      <link>http://tapoueh.org/blog/2011/07/comment-utiliser-pgloader/</link>
      <pubDate>Fri, 22 Jul 2011 13:48:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/comment-utiliser-pgloader/</guid>
      <description>C&amp;rsquo;est une question qui revient régulièrement, et à laquelle je pensais avoir apporté une réponse satisfaisante avec les exemples pgloader. Ce document ressemble un peu à un tutoriel, en anglais, et je l&amp;rsquo;ai détaillé dans l&amp;rsquo;article how to use pgloader sur ce même site, en anglais. Si la demande est suffisante, je le traduirai en français.
En attendant, bonne lecture !</description>
    </item>
    
    <item>
      <title>How To Use PgLoader</title>
      <link>http://tapoueh.org/blog/2011/07/how-to-use-pgloader/</link>
      <pubDate>Fri, 22 Jul 2011 13:38:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/how-to-use-pgloader/</guid>
      <description>This question about pgloader usage coms in quite frequently, and I think the examples README goes a long way in answering it. It&amp;rsquo;s not exactly a tutorial but is almost there. Let me paste it here for reference:
installing pgloader Either use the debian package or the one for your distribution of choice if you use another one. RedHat, CentOS, FreeBSD, OpenBSD and some more already include a binary package that you can use directly.</description>
    </item>
    
    <item>
      <title>Import fixed width data with pgloader</title>
      <link>http://tapoueh.org/blog/2010/04/import-fixed-width-data-with-pgloader/</link>
      <pubDate>Tue, 27 Apr 2010 12:01:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/04/import-fixed-width-data-with-pgloader/</guid>
      <description>So, following previous blog entries about importing fixed width data, from Postgres Online Journal and David (perl) Fetter, I couldn&amp;rsquo;t resist following the meme and showing how to achieve the same thing with pgloader.
I can&amp;rsquo;t say how much I dislike such things as the following, and I can&amp;rsquo;t help thinking that non IT people are right looking at us like this when encountering such prose.
map {s/\D*(\d+)-(\d+).*/$a.=&amp;quot;A&amp;quot;.(1+$2-$1). &amp;quot; &amp;quot;/e} split(/\n/,&amp;lt;&amp;lt;&#39;EOT&#39;);  So, the pgloader way.</description>
    </item>
    
    <item>
      <title>pgloader activity report</title>
      <link>http://tapoueh.org/blog/2010/04/pgloader-activity-report/</link>
      <pubDate>Tue, 06 Apr 2010 09:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/04/pgloader-activity-report/</guid>
      <description>Yes. This pgloader project is still maintained and somewhat active. Development happens when I receive a complaint, either about a bug in existing code or a feature in yet-to-write code. If you have a bug to report, just send me an email!
If you&amp;rsquo;re following the development of it, the sources just moved from CVS at pgfoundry to http://github.com/dimitri/pgloader. I will still put the releases at pgfoundry, and the existing binary packages maintenance should continue.</description>
    </item>
    
    <item>
      <title>prefix 1.0.0</title>
      <link>http://tapoueh.org/blog/2009/10/prefix-1.0.0/</link>
      <pubDate>Tue, 06 Oct 2009 15:56:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/10/prefix-1.0.0/</guid>
      <description>So there it is, at long last, the final 1.0.0 release of prefix! It&amp;rsquo;s on its way into the debian repository (targetting sid, in testing in 10 days) and available on pgfoundry to.
In order to make it clear that I intend to maintain this version, the number has 3 digits rather than 2&amp;hellip; which is also what PostgreSQL users will expect.
The only last minute change is that you can now use the first version of the two following rather than the second one:</description>
    </item>
    
  </channel>
</rss>
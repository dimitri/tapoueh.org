<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/categories/emacs/</link>
    <description>Recent content in Emacs on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jan 2014 21:34:00 +0100</lastBuildDate><atom:link href="https://tapoueh.org/categories/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>El-Get is now Rolling Releases</title>
      <link>https://tapoueh.org/blog/2014/01/el-get-is-now-rolling-releases/</link>
      <pubDate>Sat, 11 Jan 2014 21:34:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2014/01/el-get-is-now-rolling-releases/</guid>
      <description>The code of El-Get has been pretty stable for a long time now. About the whole set of patches against the 4.x series has been about bug fixing corner cases (sometimes cases that had nothing cornery about them too) and providing more and more recipes. That&amp;rsquo;s what you expect from a stable software, and that what allows us to move to a rolling releases model.
In practice, it means that you won&amp;rsquo;t have to suffer from using a badly maintained stable branch anymore.</description>
    </item>
    
    <item>
      <title>Marking whole word</title>
      <link>https://tapoueh.org/blog/2013/02/marking-whole-word/</link>
      <pubDate>Fri, 08 Feb 2013 17:15:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/02/marking-whole-word/</guid>
      <description>I&amp;rsquo;ve discovered recently another Emacs facility that I since then use several times a day, and I wonder how I did without it before: C-M-SPC runs the command mark-sexp.
*Well, `mark-sexp` apparently is related to the Sex Pistols* It&amp;rsquo;s pretty simple actually, when you have the point at the beginning of a word or an identifier (containing numbers, dashes, underscores and other punctuation signs), you can select the whole of it in a single key chord!</description>
    </item>
    
    <item>
      <title>About Vimgolf</title>
      <link>https://tapoueh.org/blog/2012/11/about-vimgolf/</link>
      <pubDate>Sun, 11 Nov 2012 20:52:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2012/11/about-vimgolf/</guid>
      <description>Following some tweet I found myself desultory watching an episode of the awesome VimGolf in Emacs video series by Tim Visher. Those series are about picking some challenge from vimgolf and implementing it with our favorite editor instead. Because Emacs Rocks guys.
    Let me tell you upfront that I really dislike the whole idea of the vim golf challenge. I&amp;rsquo;ve been a user of both Emacs and Vim for many years, and finally decided to switch to living in Emacs; or if you prefer, climbing my way up from level 2 as in The Levels Of Emacs Proficiency.</description>
    </item>
    
    <item>
      <title>Editing SQL</title>
      <link>https://tapoueh.org/blog/2012/11/editing-sql/</link>
      <pubDate>Tue, 06 Nov 2012 09:55:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2012/11/editing-sql/</guid>
      <description>It&amp;rsquo;s hard to read my blog yet not know I&amp;rsquo;m using Emacs. It really is a great tool and has a lot to compare to PostgreSQL in terms of extensibility, documentation quality and community. And there&amp;rsquo;s even a native implementation of the PostgreSQL Protocol written in Emacs Lisp.
    One of the things where Emacs really shines is that interactive development environment you get when working on some Emacs Lisp code.</description>
    </item>
    
    <item>
      <title>El-Get 4.1 is out</title>
      <link>https://tapoueh.org/blog/2012/08/el-get-4.1-is-out/</link>
      <pubDate>Tue, 28 Aug 2012 11:43:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2012/08/el-get-4.1-is-out/</guid>
      <description>Please welcome the new stable version of El-Get, the much awaited version 4.1 has now been branched for your pleasure. It&amp;rsquo;s packed with lots of features to make your life easy, comes with a Info documentation book and even has a logo. That&amp;rsquo;s no joke, I found one, at least:
Why El-Get is relevant Emacs 24.1 is the first release that includes package.el, and it even allows the user to setup several sources where to fetch packages.</description>
    </item>
    
    <item>
      <title>M-x recompile</title>
      <link>https://tapoueh.org/blog/2012/06/m-x-recompile/</link>
      <pubDate>Fri, 01 Jun 2012 18:45:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2012/06/m-x-recompile/</guid>
      <description>A friend of mine just asked me for advice to tweak some Emacs features, and I think that&amp;rsquo;s really typical of using Emacs: rather than getting used to the way things are shipped to you, when using Emacs, you start wanting to adapt the tools to the way you want things to be working instead. And you can call that the awesome!
In this case we&amp;rsquo;re talking about the M-x compile and M-x recompile functions.</description>
    </item>
    
    <item>
      <title>el-get-3.1</title>
      <link>https://tapoueh.org/blog/2011/09/el-get-3.1/</link>
      <pubDate>Fri, 16 Sep 2011 14:13:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/09/el-get-3.1/</guid>
      <description>The el-get project releases its new stable version, 3.1. This new release fixes bugs, add a host of new recipes (we have 420 of them and counting) and some nice new features too. You really want to upgrade.
New features Among the features you will find dependencies management and M-x el-get-list-packages, that you should try as soon as possible. Of course, don&amp;rsquo;t miss M-x el-get-self-update that eases the process somehow.</description>
    </item>
    
    <item>
      <title>el-get-list-packages</title>
      <link>https://tapoueh.org/blog/2011/08/el-get-list-packages/</link>
      <pubDate>Thu, 18 Aug 2011 18:10:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/08/el-get-list-packages/</guid>
      <description>From the first days of el-get is was quite clear for me that we would reach a point where users would want a nice listing including descriptions of the packages, and a major mode allowing you to select packages to install, remove and update. It was also quite clear that I was not much interested into doing it myself, even if I would appreciate having it done.
Well, the joy of Open Source &amp;amp; Free Software (pick your own poison).</description>
    </item>
    
    <item>
      <title>Emacs Startup</title>
      <link>https://tapoueh.org/blog/2011/08/emacs-startup/</link>
      <pubDate>Sat, 06 Aug 2011 14:58:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/08/emacs-startup/</guid>
      <description>Using Emacs we get to manage a larger and larger setup file (either ~/.emacs or ~/.emacs.d/init.el), sometime with lots of dependencies, and some sub-files thanks to the load function or the provide and require mechanism.
Some users are even starting Emacs often enough for the startup time to be a concern. With an emacs-uptime (yes it&amp;rsquo;s a command, you can M-x emacs-uptime) of days to weeks ( 10 days, 17 hours, 45 minutes, 34 seconds as of this writing), it&amp;rsquo;s not something I really care about much.</description>
    </item>
    
    <item>
      <title>Emacs ANSI colors</title>
      <link>https://tapoueh.org/blog/2011/07/emacs-ansi-colors/</link>
      <pubDate>Fri, 29 Jul 2011 10:00:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/07/emacs-ansi-colors/</guid>
      <description>Emacs comes with a pretty good implementation of a terminal emulator, M-x term. Well not that good actually, but given what I use it for, it&amp;rsquo;s just what I need. Particulary if you add to that my cssh tool, so that connecting with ssh to a remote host is just a =C-= runs the command cssh-term-remote-open away, and completes on the host name thanks to ~/.ssh/known_hosts.
Now, a problem that I still had to solve was the colors used in the terminal.</description>
    </item>
    
    <item>
      <title>Emacs Cheat Sheet</title>
      <link>https://tapoueh.org/blog/2011/07/emacs-cheat-sheet/</link>
      <pubDate>Wed, 20 Jul 2011 10:44:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/07/emacs-cheat-sheet/</guid>
      <description>I stumbled upon the following cheat sheet for Emacs yesterday, and it&amp;rsquo;s worth sharing. I already learnt or discovered again some nice default chords, like for example C-x C-o runs the command delete-blank-lines and C-M-o runs the command split-line. I guess I will use the later one a lot.
  Hope you&amp;rsquo;ll like it!</description>
    </item>
    
    <item>
      <title>Don&#39;t be afraid of &#39;cl</title>
      <link>https://tapoueh.org/blog/2011/06/dont-be-afraid-of-cl/</link>
      <pubDate>Mon, 20 Jun 2011 00:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/06/dont-be-afraid-of-cl/</guid>
      <description>In this blog article, you&amp;rsquo;re shown a quite long function that loop through your buffers to find out if any of them is associated with a file whose full name includes &amp;quot;projects&amp;quot;. Well, you should not be afraid of using cl:
(require &#39;cl) (loop for b being the buffers when (string-match &amp;quot;projects&amp;quot; (or (buffer-file-name b) &amp;quot;&amp;quot;)) return t) If you want to collect the list of buffers whose name matches your test, then replace return t by collect b and you&amp;rsquo;re done.</description>
    </item>
    
    <item>
      <title>el-get 2.2</title>
      <link>https://tapoueh.org/blog/2011/05/el-get-2.2/</link>
      <pubDate>Thu, 26 May 2011 12:00:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/05/el-get-2.2/</guid>
      <description>We&amp;rsquo;ve spotted a little too late for our own taste a discrepancy in the source tree: a work in progress patch landed in git just before to release el-get stable. So we cleaned the tree (thanks again Julien), branched a stable maintenance tree, and released 2.2 from there.
You&amp;rsquo;re back to enjoying el-get :)</description>
    </item>
    
    <item>
      <title>el-get 2.1</title>
      <link>https://tapoueh.org/blog/2011/05/el-get-2.1/</link>
      <pubDate>Thu, 26 May 2011 10:00:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/05/el-get-2.1/</guid>
      <description>Current el-get status is stable, ready for daily use and packed with extra features that make life easier. There are some more things we could do, as always, but they will be about smoothing things further.
Latest released version el-get version 2.1 is available, with a boatload of features, including autoloads support, byte-compiling in an external clean room Emacs instance, custom support, lazy initialisation support (defering all init functions to eval-after-load), and multi repositories ELPA support.</description>
    </item>
    
    <item>
      <title>Emacs and PostgreSQL, PL line numbering</title>
      <link>https://tapoueh.org/blog/2011/04/emacs-and-postgresql-pl-line-numbering/</link>
      <pubDate>Sat, 23 Apr 2011 10:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/04/emacs-and-postgresql-pl-line-numbering/</guid>
      <description>A while ago I&amp;rsquo;ve been fixing and publishing pgsql-linum-format separately. That allows to number PL/whatever code lines when editing from Emacs, and it&amp;rsquo;s something very useful to turn on when debugging.
The carrets on the fringe in the emacs window are the result of (setq-default indicate-buffer-boundaries &#39;left) and here it&amp;rsquo;s just overloading the image somehow. But the idea is to just M-x linum-mode when you need it, at least that&amp;rsquo;s my usage of it.</description>
    </item>
    
    <item>
      <title>desktop-mode and readahead</title>
      <link>https://tapoueh.org/blog/2011/02/desktop-mode-and-readahead/</link>
      <pubDate>Wed, 23 Feb 2011 16:45:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/02/desktop-mode-and-readahead/</guid>
      <description>I&amp;rsquo;m using Desktop Save Mode so that Emacs knows to open again all the buffers I&amp;rsquo;ve been using. That goes quite well with how often I start Emacs, that is once a week or once a month. Now, M-x ibuffer last line is as following:
718 buffers 19838205 668 files, 15 processes That means that at startup, Emacs will load that many files. In order not to have to wait until it&amp;rsquo;s done doing so, I&amp;rsquo;ve setup things this way:</description>
    </item>
    
    <item>
      <title>Regexp performances and Finite Automata</title>
      <link>https://tapoueh.org/blog/2010/09/regexp-performances-and-finite-automata/</link>
      <pubDate>Sun, 26 Sep 2010 21:00:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/09/regexp-performances-and-finite-automata/</guid>
      <description>The major reason why I dislike perl so much, and ruby too, and the thing I&amp;rsquo;d want different in the Emacs Lisp API so far is how they set developers mind into using regexp. You know the quote, don&amp;rsquo;t you?
 Some people, when confronted with a problem, think “I know, I&amp;rsquo;ll use regular expressions.” Now they have two problems.
 That said, some situations require the use of regexp — or are so much simpler to solve using them than the maintenance hell you&amp;rsquo;re building here ain&amp;rsquo;t that big a drag.</description>
    </item>
    
    <item>
      <title>welcome el-get scratch installer</title>
      <link>https://tapoueh.org/blog/2010/08/welcome-el-get-scratch-installer/</link>
      <pubDate>Fri, 27 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/welcome-el-get-scratch-installer/</guid>
      <description>A very good remark from some users: installing and managing el-get should be simpler. They wanted both an easy install of the thing, and a way to be able to manage it afterwards (like, update the local copy against the authoritative source). So I decided it was high time for getting the code out of my ~/.emacs.d git repository and up to a public place: http://github.com/dimitri/el-get.
Then, I added some documentation (a README), and then, a *scratch* installer, following great ideas from ELPA.</description>
    </item>
    
    <item>
      <title>el-get news</title>
      <link>https://tapoueh.org/blog/2010/08/el-get-news/</link>
      <pubDate>Thu, 26 Aug 2010 16:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/el-get-news/</guid>
      <description>I&amp;rsquo;ve been receiving some requests for el-get, some of them even included a patch. So now there&amp;rsquo;s support for bzr, CSV and http-tar, augmenting the existing support for git, git-svn, apt-get, fink and ELPA formats.
Also, as the install and even the build are completely asynchronous — there&amp;rsquo;s a pending bugfix for the building, which is now using start-process-shell-command. The advantage of doing so is that you&amp;rsquo;re free to use Emacs as usual while el-get is having your piece of elisp code compiled, which can take time.</description>
    </item>
    
    <item>
      <title>Emacs is Twinkling here</title>
      <link>https://tapoueh.org/blog/2009/09/emacs-is-twinkling-here/</link>
      <pubDate>Thu, 24 Sep 2009 18:08:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/09/emacs-is-twinkling-here/</guid>
      <description>So you have a rolodex like database in your Emacs, or you have this phone number in a mail and you want to call it. It happens you have VoIP setup and you&amp;rsquo;re using Twinkle to make your calls. Maybe you&amp;rsquo;ll then find this function useful:
(defun twinkle-call-symbol-or-region () &amp;quot;Call the phone number at point (symbol seems good enough), or in region&amp;quot; (interactive) (shell-command-to-string (format &amp;quot;twinkle --cmd &#39;call %s&#39;&amp;quot; (replace-regexp-in-string &amp;quot;[^0-9+]&amp;quot; &amp;quot;&amp;quot; (if (use-region-p) (buffer-substring (region-beginning) (region-end)) (thing-at-point &#39;symbol)))))) It happens that symbol is better than word here because some phone numbers begin with +.</description>
    </item>
    
    <item>
      <title>Escreen integration</title>
      <link>https://tapoueh.org/blog/2009/09/escreen-integration/</link>
      <pubDate>Tue, 22 Sep 2009 23:04:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/09/escreen-integration/</guid>
      <description>After having used elscreen for a long time, I&amp;rsquo;m now a very happy user of escreen, which feels much better integrated and allows to have one ring of recently visited buffers per screen. Which is what you need when using a screen like feature, really.
At first, it seemed so good as not to require any tweaking, but soon enough I had to adapt it to my workflow. After all that&amp;rsquo;s exactly for being able to do this that I&amp;rsquo;m using emacs :)</description>
    </item>
    
    <item>
      <title>Follow-up on dim:mailrc-add-entry</title>
      <link>https://tapoueh.org/blog/2009/09/follow-up-on-dimmailrc-add-entry/</link>
      <pubDate>Mon, 07 Sep 2009 12:50:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/09/follow-up-on-dimmailrc-add-entry/</guid>
      <description>The function didn&amp;rsquo;t allow for using more than one mailrc file, which isn&amp;rsquo;t a good idea, so I&amp;rsquo;ve just added that. Oh and for gnus integration what I need is (add-hook &#39;message-mode-hook &#39;mail-abbrevs-setup) it seems&amp;hellip; so that if I type the alias it&amp;rsquo;ll get automatically expanded. And to be real lazy and avoid having to type in the entire alias, mail-abbrev-complete-alias to the rescue, assigned to some easy to reach keys.</description>
    </item>
    
    <item>
      <title>Improving ~/.mailrc usage</title>
      <link>https://tapoueh.org/blog/2009/09/improving-~/.mailrc-usage/</link>
      <pubDate>Mon, 07 Sep 2009 01:29:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/09/improving-~/.mailrc-usage/</guid>
      <description>So I&amp;rsquo;ve been adviced to use ~/.mailrc for keeping a basic address book in Emacs, for use within gnus for example. I had to resort to the manual to find out how to use the file aliases when I need them, that is when composing a mail. For the record, here&amp;rsquo;s what I had to do:
;; mails and aliases (add-hook &#39;mail-mode-hook &#39;mail-abbrevs-setup) (global-set-key (kbd &amp;quot;C-c @&amp;quot;) &#39;mail-abbrev-insert-alias) That means I prefer hitting C-c @, then typing the alias in the minibuffer (with completion) and there after see the full mail address in my message-mode buffer.</description>
    </item>
    
    <item>
      <title>Useful emacs trick</title>
      <link>https://tapoueh.org/blog/2008/12/useful-emacs-trick/</link>
      <pubDate>Tue, 09 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2008/12/useful-emacs-trick/</guid>
      <description>Watch Kevin Kelly&amp;rsquo;s Talk here, it&amp;rsquo;s about trying to predict what the Internet will look like 5 thousands days from now.</description>
    </item>
    
  </channel>
</rss>

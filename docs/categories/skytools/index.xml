<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skytools on Dimitri Fontaine, Expert PostgreSQL</title>
    <link>http://tapoueh.org/categories/skytools/</link>
    <description>Recent content in Skytools on Dimitri Fontaine, Expert PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Mar 2013 14:54:00 +0100</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/categories/skytools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bulk Replication</title>
      <link>http://tapoueh.org/blog/2013/03/bulk-replication/</link>
      <pubDate>Mon, 18 Mar 2013 14:54:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/03/bulk-replication/</guid>
      <description>In the previous article here we talked about how to properly update more than one row at a time, under the title Batch Update. We did consider performances, including network round trips, and did look at the behavior of our results when used concurrently.
A case where we want to apply the previous article approach is when replicating data with a trigger based solution, such as SkyTools and londiste. Well, maybe not in all cases, we need to have a amount of UPDATE trafic worthy of setting up the solution.</description>
    </item>
    
    <item>
      <title>Clean PGQ Subconsumers</title>
      <link>http://tapoueh.org/blog/2012/04/clean-pgq-subconsumers/</link>
      <pubDate>Thu, 26 Apr 2012 15:05:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/04/clean-pgq-subconsumers/</guid>
      <description>Now that you&amp;rsquo;re all using the wonders of Cooperative Consumers to help you efficiently and reliably implement your business constraints and offload them from the main user transactions, you&amp;rsquo;re reaching a point where you have to clean up your development environment (because that&amp;rsquo;s what happens to development environments, right?), and you want a way to start again from a clean empty place.
Here we go. It used to be much more simple than that, so if you&amp;rsquo;re still using PGQ from Skytools2, just jump to the next step.</description>
    </item>
    
    <item>
      <title>PGQ Coop Consumers</title>
      <link>http://tapoueh.org/blog/2012/03/pgq-coop-consumers/</link>
      <pubDate>Mon, 12 Mar 2012 14:43:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/03/pgq-coop-consumers/</guid>
      <description>While working a new PostgreSQL architecture for an high scale project that used to be in the top 10 of internet popular web sites (in terms of visitors), I needed to be able to off load some processing from the main path: that&amp;rsquo;s called a batch job. This needs to be transactional: don&amp;rsquo;t run the job if we did rollback; the transaction, process all events that were part of the same transaction in the same transaction, etc.</description>
    </item>
    
    <item>
      <title>Skytools3: walmgr</title>
      <link>http://tapoueh.org/blog/2011/09/skytools3-walmgr/</link>
      <pubDate>Wed, 21 Sep 2011 17:21:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/09/skytools3-walmgr/</guid>
      <description>Let&amp;rsquo;s begin the Skytools 3 documentation effort, which is long overdue. The code is waiting for you over at github, and is stable and working. Why is it still in release candidate status, I hear you asking? Well because it&amp;rsquo;s missing updated documentation.
WalMgr is the Skytools component that manages WAL shipping for you, and archiving too. It knows how to prepare your master and standby setup, how to take a base backup and push it to the standby&amp;rsquo;s system, how to archive (at the satndby) master&amp;rsquo;s WAL files as they are produced and have the standby restore from this archive.</description>
    </item>
    
    <item>
      <title>Skytools, version 3</title>
      <link>http://tapoueh.org/blog/2011/08/skytools-version-3/</link>
      <pubDate>Fri, 26 Aug 2011 21:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/skytools-version-3/</guid>
      <description>You can find skytools3 in debian experimental already, it&amp;rsquo;s in release candidate status. What&amp;rsquo;s missing is the documentation, so here&amp;rsquo;s an idea: I&amp;rsquo;m going to make a blog post series about skytools next features, how to use them, what they are good for, etc. This first article of the series will just list what are those new features.
Here are the slides from the CHAR(11) talk I made last month, about that very subject:</description>
    </item>
    
    <item>
      <title>pg_basebackup</title>
      <link>http://tapoueh.org/blog/2010/11/pg_basebackup/</link>
      <pubDate>Sun, 07 Nov 2010 13:45:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/11/pg_basebackup/</guid>
      <description>Hannu just gave me a good idea in this email on -hackers, proposing that pg_basebackup should get the xlog files again and again in a loop for the whole duration of the base backup. That&amp;rsquo;s now done in the aforementioned tool, whose options got a little more useful now:
Usage: pg_basebackup.py [-v] [-f] [-j jobs] &amp;quot;dsn&amp;quot; dest Options: -h, --help show this help message and exit --version show version and quit -x, --pg_xlog backup the pg_xlog files -v, --verbose be verbose and about processing progress -d, --debug show debug information, including SQL queries -f, --force remove destination directory if it exists -j JOBS, --jobs=JOBS how many helper jobs to launch -D DELAY, --delay=DELAY pg_xlog subprocess loop delay, see -x -S, --slave auxilliary process --stdin get list of files to backup from stdin  Yeah, as implementing the xlog idea required having some kind of parallelism, I built on it and the script now has a --jobs option for you to setup how many processes to launch in parallel, all fetching some base backup files in its own standard ( libpq) PostgreSQL connection, in compressed chunks of 8 MB (so that&amp;rsquo;s not 8 MB chunks sent over).</description>
    </item>
    
    <item>
      <title>PgCon 2009</title>
      <link>http://tapoueh.org/blog/2009/05/pgcon-2009/</link>
      <pubDate>Wed, 27 May 2009 14:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/05/pgcon-2009/</guid>
      <description>I can&amp;rsquo;t really compare PgCon 2009 with previous years versions, last time I enjoyed the event it was in 2006, in Toronto. But still I found the experience to be a great one, and I hope I&amp;rsquo;ll be there next year too!
I&amp;rsquo;ve met a lot of known people in the community, some of them I already had the chance to run into at Toronto or Prato, but this was the first time I got to talk to many of them about interresting projects and ideas.</description>
    </item>
    
    <item>
      <title>Skytools ticker daemon and londiste</title>
      <link>http://tapoueh.org/blog/2009/02/skytools-ticker-daemon-and-londiste/</link>
      <pubDate>Tue, 03 Feb 2009 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/02/skytools-ticker-daemon-and-londiste/</guid>
      <description>One of the difficulties in getting to understand and configure londiste reside in the relation between the ticker and the replication. This question was raised once more on IRC yesterday, so I made a new FAQ entry about it: How do this ticker thing relates to londiste?</description>
    </item>
    
    <item>
      <title>Comparing Londiste and Slony</title>
      <link>http://tapoueh.org/blog/2009/01/comparing-londiste-and-slony/</link>
      <pubDate>Sat, 31 Jan 2009 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/01/comparing-londiste-and-slony/</guid>
      <description>In the page about Skytools I&amp;rsquo;ve encouraged people to ask some more questions in order for me to be able to try and answer them. That just happened, as usual on the #postgresql IRC, and the question is What does londiste lack that slony has?</description>
    </item>
    
    <item>
      <title>Londiste Trick</title>
      <link>http://tapoueh.org/blog/2009/01/londiste-trick/</link>
      <pubDate>Wed, 21 Jan 2009 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/01/londiste-trick/</guid>
      <description>So, you&amp;rsquo;re using londiste and the ticker has not been running all night long, due to some restart glitch in your procedures, and the on call admin didn&amp;rsquo;t notice the restart failure. If you blindly restart the replication daemon, it will load in memory all those events produced during the night, at once, because you now have only one tick where to put them all.
The following query allows you to count how many events that represents, with the magic tick numbers coming from pgq.</description>
    </item>
    
    <item>
      <title>new site, using new software</title>
      <link>http://tapoueh.org/blog/2008/12/new-site-using-new-software/</link>
      <pubDate>Sat, 06 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2008/12/new-site-using-new-software/</guid>
      <description>Oh and check out the skytools page too. Emacs Muse is so great a project that instead of just working on how to publish a website with this tool, I found myself editing a rather large document about londite.py.</description>
    </item>
    
  </channel>
</rss>
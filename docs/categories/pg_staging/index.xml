<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pg_staging on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/categories/pg_staging/</link>
    <description>Recent content in Pg_staging on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Oct 2011 22:22:00 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/categories/pg_staging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing backups</title>
      <link>https://tapoueh.org/blog/2011/10/implementing-backups/</link>
      <pubDate>Wed, 12 Oct 2011 22:22:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/10/implementing-backups/</guid>
      <description>I&amp;rsquo;ve been asked about my opinion on backup strategy and best practices, and it so happens that I have some kind of an opinion on the matter.
I tend to think best practice here begins with defining properly the backup plan you want to implement. It&amp;rsquo;s quite a complex matter, so be sure to ask yourself about your needs: what do you want to be protected from?
The two main things to want to protect from are hardware loss (crash disaster, plane in the data center, fire, water flood, etc) and human error ( UPDATE without a where clause).</description>
    </item>
    
    <item>
      <title>pg_restore -L &amp; pg_staging</title>
      <link>https://tapoueh.org/blog/2011/08/pg_restore--l--pg_staging/</link>
      <pubDate>Mon, 29 Aug 2011 18:05:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/08/pg_restore--l--pg_staging/</guid>
      <description>On the PostgreSQL Hackers mailing lists, Andrew Dunstan just proposed some new options for pg_dump and pg_restore to ease our lives. One of the answers was talking about some scripts available to exploit the pg_restore listing that you play with using options -l and -L, or the long name versions --list and --use-list. The pg_staging tool allows you to easily exploit those lists too.
The pg_restore list is just a listing of one object per line of all objects contained into a custom dump, that is one made with pg_dump -Fc.</description>
    </item>
    
    <item>
      <title>towards pg_staging 1.0</title>
      <link>https://tapoueh.org/blog/2011/03/towards-pg_staging-1.0/</link>
      <pubDate>Tue, 29 Mar 2011 15:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/03/towards-pg_staging-1.0/</guid>
      <description>If you don&amp;rsquo;t remember about what pg_staging is all about, it&amp;rsquo;s a central console from where to control all your PostgreSQL databases. Typically you use it to manage your development and pre-production setup, where developers ask you pretty often to install them some newer dump from the production, and you want that operation streamlined and easy.
Usage The typical session would be something like this:
pg_staging&amp;gt; databases foodb.dev foodb foodb_20100824 :5432 foodb_20100209 foodb_20100209 :5432 foodb_20100824 foodb_20100824 :5432 pgbouncer pgbouncer :6432 postgres postgres :5432 pg_staging&amp;gt; dbsizes foodb.</description>
    </item>
    
    <item>
      <title>pg_staging&#39;s bird view</title>
      <link>https://tapoueh.org/blog/2009/12/pg_stagings-bird-view/</link>
      <pubDate>Tue, 08 Dec 2009 12:04:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/12/pg_stagings-bird-view/</guid>
      <description>One of the most important feedback I got about the presentation of pgstaging were the lack of pictures, something like a bird-view of how you operate it. Well, thanks to ditaa and Emacs picture-mode here it is:
Hope you enjoy, it should not be necessary to comment much if I got to the point!
Of course I commited the text source file to the Git repository. The only problem I ran into is that ditaa defaults to ouputing a quite big right margin containing only white pixels, and that didn&amp;rsquo;t fit well, visually, in this blog.</description>
    </item>
    
    <item>
      <title>Yet Another PostgreSQL tool hits debian</title>
      <link>https://tapoueh.org/blog/2009/11/yet-another-postgresql-tool-hits-debian/</link>
      <pubDate>Wed, 25 Nov 2009 11:49:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/11/yet-another-postgresql-tool-hits-debian/</guid>
      <description>So there it is, this newer contribution of mine that I presented at PGDay is now in debian NEW queue. pg_staging will empower you with respect to what you do about those nightly backups ( pg_dump -Fc or something).
The tool provides a lot of commands to either dump or restore a database. It comes with documentation covering about it all, except for the londiste support part, which will be there in time for 1.</description>
    </item>
    
  </channel>
</rss>
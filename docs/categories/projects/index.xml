<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>http://tapoueh.org/categories/projects/</link>
    <description>Recent content in Projects on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jul 2017 17:30:11 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/categories/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>from MySQL to PostgreSQL</title>
      <link>http://tapoueh.org/blog/2017/07/from-mysql-to-postgresql/</link>
      <pubDate>Thu, 06 Jul 2017 17:30:11 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2017/07/from-mysql-to-postgresql/</guid>
      <description>&lt;p&gt;Today
&lt;a href=&#34;https://github.com/dimitri/pgloader/releases/tag/v3.4.1&#34;&gt;pgloader v3.4.1&lt;/a&gt;
is released and available! This new release comes with 110 commits as show
in
&lt;a href=&#34;https://github.com/dimitri/pgloader/compare/v3.3.2...v3.4.1&#34;&gt;github compare view&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This release of &lt;a href=&#34;http://pgloader.io&#34;&gt;pgloader&lt;/a&gt; is following the tradition of
simplifying things for users, or if you allow me to
quote &lt;a href=&#34;https://en.wikiquote.org/wiki/Alan_Kay&#34;&gt;Alan Key&lt;/a&gt;, I believe that if
&lt;em&gt;simple things should be simple, complex things should be possible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quicklisp and debian</title>
      <link>http://tapoueh.org/blog/2015/05/quicklisp-and-debian/</link>
      <pubDate>Sat, 02 May 2015 16:06:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2015/05/quicklisp-and-debian/</guid>
      <description>&lt;p&gt;Common Lisp users are very happy to use
&lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt; when it comes to
downloading and maintaining dependencies between their own code and the
&lt;a href=&#34;http://quickdocs.org/&#34;&gt;librairies&lt;/a&gt; it is using.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why is pgloader so much faster?</title>
      <link>http://tapoueh.org/blog/2014/05/why-is-pgloader-so-much-faster/</link>
      <pubDate>Wed, 14 May 2014 14:59:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2014/05/why-is-pgloader-so-much-faster/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pgloader.io/&#34;&gt;pgloader&lt;/a&gt; loads data into PostgreSQL. The new version is stable enough
nowadays that it&amp;rsquo;s soon to be released, the last piece of the
&lt;code&gt;3.1.0&lt;/code&gt; puzzle
being full
&lt;a href=&#34;https://www.debian.org/&#34;&gt;debian&lt;/a&gt; packaging of the tool.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Import fixed width data with pgloader</title>
      <link>http://tapoueh.org/blog/2013/11/import-fixed-width-data-with-pgloader/</link>
      <pubDate>Mon, 18 Nov 2013 12:48:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/11/import-fixed-width-data-with-pgloader/</guid>
      <description>&lt;p&gt;A long time ago we talked about how to
&lt;a href=&#34;http://tapoueh.org/blog/2010/04/27-import-fixed-width-data-with-pgloader.html&#34;&gt;Import fixed width data with pgloader&lt;/a&gt;, following up on other stories still
online at
&lt;a href=&#34;http://www.postgresonline.com/journal/index.php?/archives/157-Import-fixed-width-data-into-PostgreSQL-with-just-PSQL.html&#34;&gt;Postgres OnLine Journal&lt;/a&gt; and on
&lt;a href=&#34;http://people.planetpostgresql.org/dfetter/index.php?/archives/58-psql,-Paste,-Perl-Pefficiency!.html&#34;&gt;David Fetter&amp;rsquo;s blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back then, I showed that using pgloader made it easier to import the data,
but also showed quite poor performances characteristics due to using the
&lt;code&gt;debug&lt;/code&gt; mode in the timings. Let&amp;rsquo;s update that article with
current &lt;a href=&#34;https://github.com/dimitri/pgloader&#34;&gt;pgloader&lt;/a&gt; wonders!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating Sakila from MySQL to PostgreSQL</title>
      <link>http://tapoueh.org/blog/2013/11/migrating-sakila-from-mysql-to-postgresql/</link>
      <pubDate>Tue, 12 Nov 2013 11:37:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/11/migrating-sakila-from-mysql-to-postgresql/</guid>
      <description>&lt;p&gt;As presented at the
&lt;a href=&#34;http://2013.pgconf.eu/&#34;&gt;PostgreSQL Conference Europe&lt;/a&gt; the new version of
&lt;a href=&#34;https://github.com/dimitri/pgloader&#34;&gt;pgloader&lt;/a&gt;
is now able to fully migrate a MySQL database, including discovering the
schema, casting data types, transforming data and default values.
&lt;a href=&#34;http://dev.mysql.com/doc/sakila/en/&#34;&gt;Sakila&lt;/a&gt; is
the traditional MySQL example database, in this article we&amp;rsquo;re going to fully
migrate it over to PostgreSQL.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Worthwile Micro Optimisation</title>
      <link>http://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</link>
      <pubDate>Thu, 03 Oct 2013 22:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</guid>
      <description>&lt;p&gt;In our previous article about
&lt;a href=&#34;http://tapoueh.org/blog/2013/10/01-loading-geolocation-data&#34;&gt;Loading Geolocation Data&lt;/a&gt;, we did load some
data into PostgreSQL and saw the quite noticable impact of a user
transformation. As it happens, the function that did the integer to IP
representation was so naive as to scratch the micro optimisation itch of
some Common Lisp hackers: thanks a lot guys, in particular
&lt;a href=&#34;https://github.com/stassats&#34;&gt;stassats&lt;/a&gt; who came
up with the solution we&amp;rsquo;re seeing now.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loading Geolocation Data</title>
      <link>http://tapoueh.org/blog/2013/10/loading-geolocation-data/</link>
      <pubDate>Tue, 01 Oct 2013 16:52:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/loading-geolocation-data/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve been mentionning in the past already, I&amp;rsquo;m currently rewriting
pgloader from scratch in
&lt;a href=&#34;http://tapoueh.org/tags/common-lisp&#34;&gt;Common Lisp&lt;/a&gt;. In terms of
&lt;a href=&#34;http://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt; that&amp;rsquo;s akin
to declaring
&lt;em&gt;bankrupcy&lt;/em&gt;, which is both sad news and good news as there&amp;rsquo;s
suddenly new hope of doing it right this time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating from MySQL to PostgreSQL</title>
      <link>http://tapoueh.org/blog/2013/08/migrating-from-mysql-to-postgresql/</link>
      <pubDate>Thu, 08 Aug 2013 17:41:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/08/migrating-from-mysql-to-postgresql/</guid>
      <description>&lt;p&gt;About the only time when I will accept to work with MySQL is when you need
help to migrate away from it because you decided to move to
&lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;
instead. And it&amp;rsquo;s already been too much of a pain really, so after all this
time I began consolidating what I know about that topic and am writing a
software to help me here. Consider it the
&lt;strong&gt;&lt;em&gt;MySQL Migration Toolkit&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playing with pgloader</title>
      <link>http://tapoueh.org/blog/2013/02/playing-with-pgloader/</link>
      <pubDate>Tue, 12 Feb 2013 11:17:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/02/playing-with-pgloader/</guid>
      <description>While making progress with both Event Triggers and Extension Templates, I needed to make a little break. My current keeping sane mental exercise seems to mainly involve using Common Lisp, a programming language that ships with about all the building blocks you need.
Yes, that old language brings so much on the table
When using Common Lisp, you have an awesome interactive development environment where you can redefine function and objects while testing them.</description>
    </item>
    
    <item>
      <title>pgloader: what&#39;s next?</title>
      <link>http://tapoueh.org/blog/2013/01/pgloader-whats-next/</link>
      <pubDate>Mon, 28 Jan 2013 10:48:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/01/pgloader-whats-next/</guid>
      <description>pgloader is a tool to help loading data into PostgreSQL, adding some error management to the COPY command. COPY is the fast way of loading data into PostgreSQL and is transaction safe. That means that if a single error appears within your bulk of data, you will have loaded none of it. pgloader will submit the data again in smaller chunks until it&amp;rsquo;s able to isolate the bad from the good, and then the good is loaded in.</description>
    </item>
    
    <item>
      <title>Automated Setup for pgloader</title>
      <link>http://tapoueh.org/blog/2013/01/automated-setup-for-pgloader/</link>
      <pubDate>Thu, 17 Jan 2013 14:32:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/01/automated-setup-for-pgloader/</guid>
      <description>&lt;p&gt;Another day, another migration from &lt;em&gt;MySQL&lt;/em&gt;
to &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;&amp;hellip; or at least that&amp;rsquo;s how it
feels sometimes. This time again I&amp;rsquo;ve been using some quite old scripts to
help me do the migration.&lt;/p&gt;

&lt;div class=&#34;alert danger &#34;&gt;
  &lt;p&gt;This article is about versions 2.x of pgloader, which are not supported
anymore. Consider using &lt;a href=&#34;http://pgloader.io&#34;&gt;pgloader&lt;/a&gt; version 3.x instead.
You won&amp;rsquo;t need to generate the configuration anymore as pgloader now
connects to a live instance of the source database and query its system
catalogs for you.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Implementing backups</title>
      <link>http://tapoueh.org/blog/2011/10/implementing-backups/</link>
      <pubDate>Wed, 12 Oct 2011 22:22:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/10/implementing-backups/</guid>
      <description>I&amp;rsquo;ve been asked about my opinion on backup strategy and best practices, and it so happens that I have some kind of an opinion on the matter.
I tend to think best practice here begins with defining properly the backup plan you want to implement. It&amp;rsquo;s quite a complex matter, so be sure to ask yourself about your needs: what do you want to be protected from?
The two main things to want to protect from are hardware loss (crash disaster, plane in the data center, fire, water flood, etc) and human error ( UPDATE without a where clause).</description>
    </item>
    
    <item>
      <title>pg_restore -L &amp; pg_staging</title>
      <link>http://tapoueh.org/blog/2011/08/pg_restore--l--pg_staging/</link>
      <pubDate>Mon, 29 Aug 2011 18:05:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pg_restore--l--pg_staging/</guid>
      <description>On the PostgreSQL Hackers mailing lists, Andrew Dunstan just proposed some new options for pg_dump and pg_restore to ease our lives. One of the answers was talking about some scripts available to exploit the pg_restore listing that you play with using options -l and -L, or the long name versions --list and --use-list. The pg_staging tool allows you to easily exploit those lists too.
The pg_restore list is just a listing of one object per line of all objects contained into a custom dump, that is one made with pg_dump -Fc.</description>
    </item>
    
    <item>
      <title>Tutoriel pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/tutoriel-pgloader/</link>
      <pubDate>Mon, 15 Aug 2011 15:39:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/tutoriel-pgloader/</guid>
      <description>En reprenant le contenu des articles de la série sur pgloader, j&amp;rsquo;ai pris le temps de compiler un tutoriel complet, en anglais. Si j&amp;rsquo;en crois les quelques mails que je reçois régulièrement au sujet de pgloader depuis quelques années maintenant, cela devrait aider les nouveaux utilisateurs.</description>
    </item>
    
    <item>
      <title>pgloader tutorial</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-tutorial/</link>
      <pubDate>Mon, 15 Aug 2011 15:33:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-tutorial/</guid>
      <description>To finish up the pgloader series, I&amp;rsquo;ve compiled all the information into a single page, the long awaited pgloader tutorial. That should help lots of users to get started with pgloader.</description>
    </item>
    
    <item>
      <title>Champs statiques &amp; pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/champs-statiques--pgloader/</link>
      <pubDate>Fri, 12 Aug 2011 11:01:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/champs-statiques--pgloader/</guid>
      <description>Dans la série de nos articles sur pgloader, l&amp;rsquo;article du jour décrit comment insérer des valeurs constantes (absentes du fichier de données) pendant le chargement. Cela permet par exemple d&amp;rsquo;ajouter un champ « origine », qui dépend typiquement de la chaîne de production des données et se retrouve souvent dans le nom du fichier de données lui-même.</description>
    </item>
    
    <item>
      <title>pgloader constant cols</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-constant-cols/</link>
      <pubDate>Fri, 12 Aug 2011 11:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-constant-cols/</guid>
      <description>&lt;p&gt;The previous articles in the &lt;a href=&#34;http://pgloader.io&#34;&gt;pgloader&lt;/a&gt; series
detailed
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/22-how-to-use-pgloader.html&#34;&gt;How To Use PgLoader&lt;/a&gt; then
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/29-how-to-setup-pgloader.html&#34;&gt;How to Setup pgloader&lt;/a&gt;,
then what to expect from
a
&lt;a href=&#34;http://tapoueh.org/blog/2011/08/01-parallel-pgloader.html&#34;&gt;parallel pgloader&lt;/a&gt; setup,
and
then
&lt;a href=&#34;http://tapoueh.org/blog/2011/08/05-reformating-modules-for-pgloader.html&#34;&gt;pgloader reformating&lt;/a&gt;.
Another need you might encounter when you get to
use &lt;a href=&#34;../../../pgsql/pgloader.html&#34;&gt;pgloader&lt;/a&gt; is adding &lt;em&gt;constant&lt;/em&gt; values
into a table&amp;rsquo;s column.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pgloader reformating</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-reformating/</link>
      <pubDate>Fri, 05 Aug 2011 11:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-reformating/</guid>
      <description>&lt;p&gt;Back to our series about &lt;a href=&#34;http://pgloader.io&#34;&gt;pgloader&lt;/a&gt;. The previous
articles
detailed
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/22-how-to-use-pgloader.html&#34;&gt;How To Use PgLoader&lt;/a&gt; then
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/29-how-to-setup-pgloader.html&#34;&gt;How to Setup pgloader&lt;/a&gt;,
then what to expect from
a
&lt;a href=&#34;http://tapoueh.org/blog/2011/08/01-parallel-pgloader.html&#34;&gt;parallel pgloader&lt;/a&gt; setup.
This article will detail how to &lt;em&gt;reformat&lt;/em&gt; input columns so that
what &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; sees is not what&amp;rsquo;s in the data
file, but the result of a &lt;em&gt;transformation&lt;/em&gt; from this data into something
acceptable as an &lt;em&gt;input&lt;/em&gt; for the target data type.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reformater avec pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/reformater-avec-pgloader/</link>
      <pubDate>Fri, 05 Aug 2011 11:26:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/reformater-avec-pgloader/</guid>
      <description>Dans la série de nos articles sur pgloader, le dernier venu détaille comment utiliser la fonction de reformatage de cet outil. Dans le cadre d&amp;rsquo;utilisation d&amp;rsquo;un ETL, cela est assimilé à la phase Transform, ce qui fait de pgloader une solution simple pour vos besoins d&amp;rsquo;ETL.</description>
    </item>
    
    <item>
      <title>Parallel pgloader</title>
      <link>http://tapoueh.org/blog/2011/08/parallel-pgloader/</link>
      <pubDate>Mon, 01 Aug 2011 12:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/parallel-pgloader/</guid>
      <description>&lt;p&gt;This article continues the series that began
with
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/22-how-to-use-pgloader.html&#34;&gt;How To Use PgLoader&lt;/a&gt; then
detailed
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/29-how-to-setup-pgloader.html&#34;&gt;How to Setup pgloader&lt;/a&gt;.
We have some more fine points to talk about here, today&amp;rsquo;s article is about
loading your data in parallel with &lt;a href=&#34;../../../pgsql/pgloader.html&#34;&gt;pgloader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pgloader en parallèle</title>
      <link>http://tapoueh.org/blog/2011/08/pgloader-en-parall%C3%A8le/</link>
      <pubDate>Mon, 01 Aug 2011 12:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/pgloader-en-parall%C3%A8le/</guid>
      <description>&lt;p&gt;Dans la série des articles sur
&lt;a href=&#34;../../../pgsql/pgloader.html&#34;&gt;pgloader&lt;/a&gt;, nous détaillons cette fois la
configuration du paraléllisme de chargement des données.  Une fois de plus,
je vous réfère à l&amp;rsquo;article de référence en anglais :
&lt;a href=&#34;http://tapoueh.org/blog/2011/08/01-parallel-pgloader.html&#34;&gt;Parallel pgloader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configurer pgloader</title>
      <link>http://tapoueh.org/blog/2011/07/configurer-pgloader/</link>
      <pubDate>Fri, 29 Jul 2011 15:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/configurer-pgloader/</guid>
      <description>Je viens de publier un billet en anglais intitulé How to Setup pgloader, qui complète l&amp;rsquo;écriture en cours d&amp;rsquo;un tutoriel pgloader plus complet. Une fois de plus, je n&amp;rsquo;ai pas pris le temps de traduire cet article en français avant de savoir si cela vous intéresse, ô lecteurs. Si c&amp;rsquo;est le cas il suffit de me l&amp;rsquo;indiquer par mail (ou courriel, après tout) pour que j&amp;rsquo;ajoute cela dans ma TODO liste.</description>
    </item>
    
    <item>
      <title>How to Setup pgloader</title>
      <link>http://tapoueh.org/blog/2011/07/how-to-setup-pgloader/</link>
      <pubDate>Fri, 29 Jul 2011 15:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/how-to-setup-pgloader/</guid>
      <description>&lt;p&gt;In a previous article we
detailed
&lt;a href=&#34;http://tapoueh.org/blog/2011/07/22-how-to-use-pgloader.html&#34;&gt;how to use pgloader&lt;/a&gt;,
let&amp;rsquo;s now see how to write the &lt;code&gt;pgloader.conf&lt;/code&gt; that
instructs &lt;a href=&#34;http://pgloader.io&#34;&gt;pgloader&lt;/a&gt; about what to
do.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comment Utiliser pgloader</title>
      <link>http://tapoueh.org/blog/2011/07/comment-utiliser-pgloader/</link>
      <pubDate>Fri, 22 Jul 2011 13:48:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/comment-utiliser-pgloader/</guid>
      <description>C&amp;rsquo;est une question qui revient régulièrement, et à laquelle je pensais avoir apporté une réponse satisfaisante avec les exemples pgloader. Ce document ressemble un peu à un tutoriel, en anglais, et je l&amp;rsquo;ai détaillé dans l&amp;rsquo;article how to use pgloader sur ce même site, en anglais. Si la demande est suffisante, je le traduirai en français.
En attendant, bonne lecture !</description>
    </item>
    
    <item>
      <title>How To Use PgLoader</title>
      <link>http://tapoueh.org/blog/2011/07/how-to-use-pgloader/</link>
      <pubDate>Fri, 22 Jul 2011 13:38:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/how-to-use-pgloader/</guid>
      <description>&lt;p&gt;This question about &lt;a href=&#34;../../../pgsql/pgloader.html&#34;&gt;pgloader&lt;/a&gt; usage coms in
quite frequently, and I think the
examples &lt;a href=&#34;https://github.com/dimitri/pgloader/tree/master/examples&#34;&gt;README&lt;/a&gt;
goes a long way in answering it. It&amp;rsquo;s not exactly a &lt;em&gt;tutorial&lt;/em&gt; but is almost
there.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extension module_pathname and .sql.in</title>
      <link>http://tapoueh.org/blog/2011/05/extension-module_pathname-and-.sql.in/</link>
      <pubDate>Mon, 02 May 2011 17:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/05/extension-module_pathname-and-.sql.in/</guid>
      <description>While currently too busy at work to deliver much Open Source contributions, let&amp;rsquo;s debunk an old habit of PostgreSQL extension authors. It&amp;rsquo;s all down to copy pasting from contrib, and there&amp;rsquo;s no reason to continue doing $libdir this way ever since 7.4 days.
Let&amp;rsquo;s take an example here, with the prefix extension. This one too will need some love, but is still behind on my spare time todo list, sorry about that.</description>
    </item>
    
    <item>
      <title>Emacs Kicker</title>
      <link>http://tapoueh.org/blog/2011/04/emacs-kicker/</link>
      <pubDate>Fri, 15 Apr 2011 21:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/04/emacs-kicker/</guid>
      <description>Following up on the very popular emacs-starter-kit, I&amp;rsquo;m now proposing the emacs-kicker. It&amp;rsquo;s about the .emacs file you&amp;rsquo;ve seen in older posts here, which I maintain for some colleagues. After all, if they find it useful, some more people might to, so I&amp;rsquo;ve decided to publish it.
What you&amp;rsquo;ll find is a very simple 128 lines Emacs user init file, based on el-get for external packages. A not so random selection of those is used, here&amp;rsquo;s the list when you hide some details:</description>
    </item>
    
    <item>
      <title>towards pg_staging 1.0</title>
      <link>http://tapoueh.org/blog/2011/03/towards-pg_staging-1.0/</link>
      <pubDate>Tue, 29 Mar 2011 15:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/03/towards-pg_staging-1.0/</guid>
      <description>If you don&amp;rsquo;t remember about what pg_staging is all about, it&amp;rsquo;s a central console from where to control all your PostgreSQL databases. Typically you use it to manage your development and pre-production setup, where developers ask you pretty often to install them some newer dump from the production, and you want that operation streamlined and easy.
Usage The typical session would be something like this:
pg_staging&amp;gt; databases foodb.dev foodb foodb_20100824 :5432 foodb_20100209 foodb_20100209 :5432 foodb_20100824 foodb_20100824 :5432 pgbouncer pgbouncer :6432 postgres postgres :5432 pg_staging&amp;gt; dbsizes foodb.</description>
    </item>
    
    <item>
      <title>Starting afresh with el-get</title>
      <link>http://tapoueh.org/blog/2011/01/starting-afresh-with-el-get/</link>
      <pubDate>Tue, 11 Jan 2011 16:20:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/01/starting-afresh-with-el-get/</guid>
      <description>It so happens that a colleague of mine wanted to start using Emacs but couldn&amp;rsquo;t get to it. He insists on having proper color themes in all applications and some sensible defaults full of nifty add-ons everywhere, and didn&amp;rsquo;t want to have to learn that much about Emacs and Emacs Lisp to get started. I&amp;rsquo;m not even sure that he will Take the Emacs tour.
You would tell me that there&amp;rsquo;s nothing we can do for so unfriendly users.</description>
    </item>
    
    <item>
      <title>Introducing Extensions</title>
      <link>http://tapoueh.org/blog/2010/10/introducing-extensions/</link>
      <pubDate>Thu, 21 Oct 2010 13:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/10/introducing-extensions/</guid>
      <description>After reading Simon&amp;rsquo;s blog post, I can&amp;rsquo;t help but try to give some details about what it is exactly that I&amp;rsquo;m working on. As he said, there are several aspects to extensions in PostgreSQL, it all begins here: Chapter 35. Extending SQL.
It&amp;rsquo;s possible, and mostly simple enough, to add your own code or behavior to PostgreSQL, so that it will use your code and your semantics while solving user queries.</description>
    </item>
    
    <item>
      <title>el-get reaches 1.0</title>
      <link>http://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</link>
      <pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</guid>
      <description>It&amp;rsquo;s been a week since the last commits in the el-get repository, and those were all about fixing and adding recipes, and about notifications. Nothing like core plumbing you see. Also, 0.9 was released on 2010-08-24 and felt pretty complete already, then received lots of improvements. It&amp;rsquo;s high time to cross the line and call it 1.0!
Now existing users will certainly just be moderatly happy to see the tool reach that version number, depending whether they think more about the bugs they want to see fixed (ftp is supported, only called http) and the new features they want to see in ( info documentation) or more about what el-get does for them already today&amp;hellip;</description>
    </item>
    
    <item>
      <title>switch-window reaches 0.8</title>
      <link>http://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</guid>
      <description>I wanted to play with the idea of using the whole keyboard for my switch-window utility, but wondered how to get those keys in the right order and all. Finally found quail-keyboard-layout which seems to exists for such uses, as you can see:
(loop with layout = (split-string quail-keyboard-layout &amp;quot;&amp;quot;) for row from 1 to 4 collect (loop for col from 1 to 12 (&amp;quot;q&amp;quot; &amp;quot;w&amp;quot; &amp;quot;e&amp;quot; &amp;quot;r&amp;quot; &amp;quot;t&amp;quot; &amp;quot;y&amp;quot; &amp;quot;u&amp;quot; &amp;quot;i&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;) (&amp;quot;a&amp;quot; &amp;quot;s&amp;quot; &amp;quot;d&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;;&amp;quot; &amp;quot;&#39;&amp;quot; &amp;quot;\\&amp;quot;) (&amp;quot;z&amp;quot; &amp;quot;x&amp;quot; &amp;quot;c&amp;quot; &amp;quot;v&amp;quot; &amp;quot;b&amp;quot; &amp;quot;n&amp;quot; &amp;quot;m&amp;quot; &amp;quot;,&amp;quot; &amp;quot;.</description>
    </item>
    
    <item>
      <title>el-get and dim-switch-window status update</title>
      <link>http://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</link>
      <pubDate>Mon, 09 Aug 2010 15:35:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</guid>
      <description>Thanks to you readers of Planet Emacsen taking the time to try those pieces of emacs lisp found in my blog, and also the time to comment on them, some bugs have been fixed, and new releases appeared.
el-get had some typo kind of bug in its support for apt-get and fink packages, and I managed to break the elpa and http support when going all asynchronous by forgetting to update the call convention I&amp;rsquo;m using.</description>
    </item>
    
    <item>
      <title>debian packaging PostgreSQL extensions</title>
      <link>http://tapoueh.org/blog/2010/08/debian-packaging-postgresql-extensions/</link>
      <pubDate>Fri, 06 Aug 2010 13:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/debian-packaging-postgresql-extensions/</guid>
      <description>In trying to help an extension debian packaging effort, I&amp;rsquo;ve once again proposed to handle it. That&amp;rsquo;s because I now begin to know how to do it, as you can see in my package overview page at debian QA facility. There&amp;rsquo;s a reason why I proposed myself here, it&amp;rsquo;s that yet another tool of mine is now to be found in debian, and should greatly help extension packaging there. You can already check for the postgresql-server-dev-all package page if you&amp;rsquo;re that impatient!</description>
    </item>
    
    <item>
      <title>dim-switch-window.el: fixes</title>
      <link>http://tapoueh.org/blog/2010/07/dim-switch-window.el-fixes/</link>
      <pubDate>Mon, 26 Jul 2010 11:55:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/dim-switch-window.el-fixes/</guid>
      <description>Thanks to amazing readers of planet emacsen, two annoyances of switch-window.el have already been fixed! The first is that handling of C-g isn&amp;rsquo;t exactly an option after all, and the other is that you want to avoid the buffer creation in the simple cases (1 or 2 windows only), because it&amp;rsquo;s the usual case.
I&amp;rsquo;ve received code to handle the second case, that I mostly merged. Thanks a lot guys, the new version is on emacswiki already!</description>
    </item>
    
    <item>
      <title>dim-switch-window.el</title>
      <link>http://tapoueh.org/blog/2010/07/dim-switch-window.el/</link>
      <pubDate>Sun, 25 Jul 2010 13:25:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/dim-switch-window.el/</guid>
      <description>So it&amp;rsquo;s Sunday and I&amp;rsquo;m thinking I&amp;rsquo;ll get into el-get sometime later. Now is the time to present dim-switch-window.el which implements a visual C-x o. I know of only one way to present a visual effect, and that&amp;rsquo;s with a screenshot:
So as you can see, it&amp;rsquo;s all about showing a big number in each window, tweaking each window&amp;rsquo;s name, and waiting till the user press one of the expected key — or timeout and stay on the same window as before C-x o.</description>
    </item>
    
    <item>
      <title>Import fixed width data with pgloader</title>
      <link>http://tapoueh.org/blog/2010/04/import-fixed-width-data-with-pgloader/</link>
      <pubDate>Tue, 27 Apr 2010 12:01:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/04/import-fixed-width-data-with-pgloader/</guid>
      <description>&lt;p&gt;So, following previous blog entries about importing
&lt;em&gt;fixed width&lt;/em&gt; data, from
&lt;a href=&#34;http://www.postgresonline.com/journal/index.php?/archives/157-Import-fixed-width-data-into-PostgreSQL-with-just-PSQL.html&#34;&gt;Postgres Online Journal&lt;/a&gt; and
&lt;a href=&#34;http://people.planetpostgresql.org/dfetter/index.php?/archives/58-psql,-Paste,-Perl-Pefficiency!.html&#34;&gt;David (perl) Fetter&lt;/a&gt;, I couldn&amp;rsquo;t resist following
the meme and showing how to achieve the same thing with
&lt;a href=&#34;http://pgloader.projects.postgresql.org/#toc9&#34;&gt;pgloader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pgloader activity report</title>
      <link>http://tapoueh.org/blog/2010/04/pgloader-activity-report/</link>
      <pubDate>Tue, 06 Apr 2010 09:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/04/pgloader-activity-report/</guid>
      <description>&lt;p&gt;Yes. This
&lt;a href=&#34;http://pgloader.projects.postgresql.org/&#34;&gt;pgloader&lt;/a&gt; project is still maintained and somewhat
active. Development happens when I receive a complaint, either about a bug
in existing code or a feature in yet-to-write code. If you have a bug to
report, just send me an email!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pg_staging&#39;s bird view</title>
      <link>http://tapoueh.org/blog/2009/12/pg_stagings-bird-view/</link>
      <pubDate>Tue, 08 Dec 2009 12:04:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/12/pg_stagings-bird-view/</guid>
      <description>One of the most important feedback I got about the presentation of pgstaging were the lack of pictures, something like a bird-view of how you operate it. Well, thanks to ditaa and Emacs picture-mode here it is:
Hope you enjoy, it should not be necessary to comment much if I got to the point!
Of course I commited the text source file to the Git repository. The only problem I ran into is that ditaa defaults to ouputing a quite big right margin containing only white pixels, and that didn&amp;rsquo;t fit well, visually, in this blog.</description>
    </item>
    
    <item>
      <title>prefix 1.1.0</title>
      <link>http://tapoueh.org/blog/2009/11/prefix-1.1.0/</link>
      <pubDate>Mon, 30 Nov 2009 12:10:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/11/prefix-1.1.0/</guid>
      <description>So I had two bug reports about prefix in less than a week. It means several things, one of them is that my code is getting used in the wild, which is nice. The other side of the coin is that people do find bugs in there. This one is about the behavior of the btree opclass of the type prefix range. We cheat a lot there by simply having written one, because a range does not have a strict ordering: is [1-3] before of after [2-4]?</description>
    </item>
    
    <item>
      <title>Yet Another PostgreSQL tool hits debian</title>
      <link>http://tapoueh.org/blog/2009/11/yet-another-postgresql-tool-hits-debian/</link>
      <pubDate>Wed, 25 Nov 2009 11:49:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/11/yet-another-postgresql-tool-hits-debian/</guid>
      <description>So there it is, this newer contribution of mine that I presented at PGDay is now in debian NEW queue. pg_staging will empower you with respect to what you do about those nightly backups ( pg_dump -Fc or something).
The tool provides a lot of commands to either dump or restore a database. It comes with documentation covering about it all, except for the londiste support part, which will be there in time for 1.</description>
    </item>
    
    <item>
      <title>prefix 1.0.0</title>
      <link>http://tapoueh.org/blog/2009/10/prefix-1.0.0/</link>
      <pubDate>Tue, 06 Oct 2009 15:56:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/10/prefix-1.0.0/</guid>
      <description>So there it is, at long last, the final 1.0.0 release of prefix! It&amp;rsquo;s on its way into the debian repository (targetting sid, in testing in 10 days) and available on pgfoundry to.
In order to make it clear that I intend to maintain this version, the number has 3 digits rather than 2&amp;hellip; which is also what PostgreSQL users will expect.
The only last minute change is that you can now use the first version of the two following rather than the second one:</description>
    </item>
    
    <item>
      <title>hstore-new &amp; preprepare reach debian too</title>
      <link>http://tapoueh.org/blog/2009/08/hstore-new--preprepare-reach-debian-too/</link>
      <pubDate>Tue, 18 Aug 2009 09:14:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/08/hstore-new--preprepare-reach-debian-too/</guid>
      <description>It seems like debian developers are back from annual conference and holiday, so they have had a look at the NEW queue and processed the packages in there. Two of them were mines and waiting to get in unstable, hstore-new and preprepare.
Time to do some bug fixing already, as hstore-new packaging is using a bash&amp;rsquo;ism I shouldn&amp;rsquo;t rely on (or so the debian buildfarm is telling me) and for preprepare I was waiting for inclusion before to go improving the GUC management, stealing some code from Selena&amp;rsquo;s pgGearman :)</description>
    </item>
    
    <item>
      <title>prefix 1.0~rc2 in debian testing</title>
      <link>http://tapoueh.org/blog/2009/08/prefix-1.0~rc2-in-debian-testing/</link>
      <pubDate>Mon, 03 Aug 2009 14:50:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/08/prefix-1.0~rc2-in-debian-testing/</guid>
      <description>At long last, here it is. With binary versions both for postgresal-8.3 and postgresal-8.4! Unfortunately my other packaging efforts are still waiting on the NEW queue, but I hope to soon see hstore-new and preprepare enter debian too.
Anyway, the plan for prefix is to now wait something like 2 weeks, then, baring showstopper bugs, release the 1.0 final version. If you have a use for it, now is the good time for testing it!</description>
    </item>
    
    <item>
      <title>prefix 1.0~rc2-1</title>
      <link>http://tapoueh.org/blog/2009/07/prefix-1.0~rc2-1/</link>
      <pubDate>Thu, 09 Jul 2009 12:48:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/07/prefix-1.0~rc2-1/</guid>
      <description>I&amp;rsquo;ve been having problem with building both postgresql-8.3-prefix and postgresql-8.4-prefix debian packages from the same source package, and fixing the packaging issue forced me into modifying the main prefix Makefile. So while reaching rc2, I tried to think about missing pieces easy to add this late in the game: and there&amp;rsquo;s one, that&amp;rsquo;s a function length(prefix_range), so that you don&amp;rsquo;t have to cast to text no more in the following wildspread query:</description>
    </item>
    
    <item>
      <title>prefix extension reaches 1.0 (rc1)</title>
      <link>http://tapoueh.org/blog/2009/06/prefix-extension-reaches-1.0-rc1/</link>
      <pubDate>Tue, 23 Jun 2009 10:53:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/06/prefix-extension-reaches-1.0-rc1/</guid>
      <description>At long last, after millions and millions of queries just here at work and some more in other places, the prefix project is reaching 1.0 milestone. The release candidate is getting uploaded into debian at the moment of this writing, and available at the following place: prefix-1.0~rc1.tar.gz.
If you have any use for it (as some VoIP companies have already), please consider testing it, in order for me to release a shiny 1.</description>
    </item>
    
    <item>
      <title>Prepared Statements and pgbouncer</title>
      <link>http://tapoueh.org/blog/2009/05/prepared-statements-and-pgbouncer/</link>
      <pubDate>Thu, 14 May 2009 00:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/05/prepared-statements-and-pgbouncer/</guid>
      <description>On the performance mailing list, a recent thread drew my attention. It devired to be about using a connection pool software and prepared statements in order to increase scalability of PostgreSQL when confronted to a lot of concurrent clients all doing simple select queries. The advantage of the pooler is to reduce the number of backends needed to serve the queries, thus reducing PostgreSQL internal bookkeeping. Of course, my choice of software here is clear: PgBouncer is an excellent top grade solution, performs real well (it won&amp;rsquo;t parse queries), reliable, flexible.</description>
    </item>
    
    <item>
      <title>Prefix GiST index now in 8.1</title>
      <link>http://tapoueh.org/blog/2009/02/prefix-gist-index-now-in-8.1/</link>
      <pubDate>Tue, 10 Feb 2009 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/02/prefix-gist-index-now-in-8.1/</guid>
      <description>The prefix project is about matching a literal against prefixes in your table, the typical example being a telecom routing table. Thanks to the excellent work around generic indexes in PostgreSQL with GiST, indexing prefix matches is easy to support in an external module. Which is what the prefix extension is all about.
Maybe you didn&amp;rsquo;t come across this project before, so here&amp;rsquo;s the typical query you want to run to benefit from the special indexing, where the @&amp;gt; operator is read contains or is a prefix of:</description>
    </item>
    
  </channel>
</rss>
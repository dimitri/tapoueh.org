<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Catalogs on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>http://tapoueh.org/categories/catalogs/</link>
    <description>Recent content in Catalogs on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jul 2011 22:35:00 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/categories/catalogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Next month partitions</title>
      <link>http://tapoueh.org/blog/2011/07/next-month-partitions/</link>
      <pubDate>Wed, 27 Jul 2011 22:35:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/next-month-partitions/</guid>
      <description>When you do partition your tables monthly, then comes the question of when to create next partitions. I tend to create them just the week before next month and I have some nice nagios scripts to alert me in case I&amp;rsquo;ve forgotten to do so. How to check that by hand in the end of a month?
Here&amp;rsquo;s a catalog query to help you there:
=&amp;gt; select * -&amp;gt; from -&amp;gt; ( (&amp;gt; select &#39;previous parts&#39; as schemaname, count(*)::text as tablename (&amp;gt; from pg_tables (&amp;gt; where schemaname not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) (&amp;gt; and tablename like to_char(now(), &#39;%YYYYMM&#39;) (&amp;gt; (&amp;gt; union (&amp;gt; (&amp;gt; select schemaname, substring(tablename,1,length(tablename)-6) || &#39;201108&#39; (&amp;gt; from pg_tables (&amp;gt; where schemaname not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) (&amp;gt; and tablename like to_char(now(), &#39;%YYYYMM&#39;) (&amp;gt; (&amp;gt; except (&amp;gt; (&amp;gt; select schemaname, tablename (&amp;gt; from pg_tables (&amp;gt; where schemaname not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) (&amp;gt; and tablename like to_char(now() + interval &#39;1 month&#39;, &#39;%YYYYMM&#39;) (&amp;gt; ) as t -&amp;gt; order by schemaname &amp;lt;&amp;gt; &#39;previous parts&#39;, schemaname; schemaname | tablename ----------------+------------------------ previous parts | 1 central | stats_entrantes_201108 (2 rows)  As you see, our partitions are named _YYYYMM so that&amp;rsquo;s it&amp;rsquo;s easy to match them in our queries, but I guess about everyone does about the same here.</description>
    </item>
    
    <item>
      <title>Editing constants in constraints</title>
      <link>http://tapoueh.org/blog/2010/08/editing-constants-in-constraints/</link>
      <pubDate>Mon, 09 Aug 2010 14:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/editing-constants-in-constraints/</guid>
      <description>We&amp;rsquo;re using constants in some constraints here, for example in cases where several servers are replicating to the same federating one: each origin server has his own schema, and all is replicated nicely on the central host, thanks to Londiste, as you might have guessed already.
For bare-metal recovery scripts, I&amp;rsquo;m working on how to change those constants in the constraints, so that pg_dump -s plus some schema tweaking would kick-start a server.</description>
    </item>
    
    <item>
      <title>Querying the Catalog to plan an upgrade</title>
      <link>http://tapoueh.org/blog/2010/08/querying-the-catalog-to-plan-an-upgrade/</link>
      <pubDate>Thu, 05 Aug 2010 11:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/querying-the-catalog-to-plan-an-upgrade/</guid>
      <description>Some user on IRC was reading the releases notes in order to plan for a minor upgrade of his 8.3.3 installation, and was puzzled about potential needs for rebuilding GIST indexes. That&amp;rsquo;s from the 8.3.5 release notes, and from the 8.3.8 notes you see that you need to consider hash indexes on interval columns too. Now the question is, how to find out if any such beasts are in use in your database?</description>
    </item>
    
    <item>
      <title>Resetting sequences. All of them, please!</title>
      <link>http://tapoueh.org/blog/2010/02/resetting-sequences.-all-of-them-please/</link>
      <pubDate>Tue, 16 Feb 2010 16:23:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/02/resetting-sequences.-all-of-them-please/</guid>
      <description>So, after restoring a production dump with intermediate filtering, none of our sequences were set to the right value. I could have tried to review the process of filtering the dump here, but it&amp;rsquo;s a one-shot action and you know what that sometimes mean. With some pressure you don&amp;rsquo;t script enough of it and you just crawl more and more.
Still, I think how I solved it is worthy of a blog entry.</description>
    </item>
    
    <item>
      <title>Controling HOT usage in 8.3</title>
      <link>http://tapoueh.org/blog/2009/01/controling-hot-usage-in-8.3/</link>
      <pubDate>Wed, 28 Jan 2009 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/01/controling-hot-usage-in-8.3/</guid>
      <description>As it happens, I&amp;rsquo;ve got some environments where I want to make sure HOT ( aka Heap Only Tuples) is in use. Because we&amp;rsquo;re doing so much updates a second that I want to get sure it&amp;rsquo;s not killing my database server. I not only wrote some checking view to see about it, but also made a quick article about it in the French PostgreSQL website. Handling around in #postgresql means that I&amp;rsquo;m now bound to write about it in English too!</description>
    </item>
    
  </channel>
</rss>
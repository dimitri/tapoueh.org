<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Encoding on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/tags/encoding/</link>
    <description>Recent content in Encoding on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Apr 2018 13:33:01 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/encoding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL Data Types: Text Encoding</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-encoding/</link>
      <pubDate>Mon, 09 Apr 2018 13:33:01 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-encoding/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL text data type. The first notion to
understand when processing text in any program is of course the notion of
encoding.&lt;/p&gt;

&lt;p&gt;So when addressing the text datatype we must mention encoding settings, and
possibly also issues. An encoding is a particular representation of
characters in bits and bytes. In the ASCII encoding the letter &lt;code&gt;A&lt;/code&gt; is
encoded as the 7-bits byte &lt;code&gt;1000001&lt;/code&gt;, or 65 in decimal, or 41 in
hexadecimal. All those numbers are going to be written the same way on-disk,
and the letter &lt;code&gt;A&lt;/code&gt; too.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting out of SQL_ASCII, part 2</title>
      <link>https://tapoueh.org/blog/2010/02/getting-out-of-sql_ascii-part-2/</link>
      <pubDate>Tue, 23 Feb 2010 17:30:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/02/getting-out-of-sql_ascii-part-2/</guid>
      <description>So, if you followed the previous blog entry, now you have a new database containing all the static tables encoded in UTF-8 rather than SQL_ASCII. Because if it was not yet the case, you now severely distrust this non-encoding.
Now is the time to have a look at properly encoding the live data, those stored in tables that continue to receive write traffic. The idea is to use the UPDATE facilities of PostgreSQL to tweak the data, and too fix the applications so as not to continue inserting badly encoded strings in there.</description>
    </item>
    
    <item>
      <title>Getting out of SQL_ASCII, part 1</title>
      <link>https://tapoueh.org/blog/2010/02/getting-out-of-sql_ascii-part-1/</link>
      <pubDate>Thu, 18 Feb 2010 11:37:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/02/getting-out-of-sql_ascii-part-1/</guid>
      <description>It happens that you have to manage databases designed by your predecessor, and it even happens that the team used to not have a DBA. Those histerical raisins can lead to having a SQL_ASCII database. The horror!
What SQL_ASCII means, if you&amp;rsquo;re not already familiar with the consequences of such a choice, is that all the text and varchar data that you put in the database is accepted as-is. No checks.</description>
    </item>
    
  </channel>
</rss>
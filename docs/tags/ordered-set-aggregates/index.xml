<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ordered-Set Aggregates on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/ordered-set-aggregates/</link>
    <description>Recent content in Ordered-Set Aggregates on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Nov 2017 18:15:51 +0100</lastBuildDate><atom:link href="https://tapoueh.org/tags/ordered-set-aggregates/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Mode Ordered-Set Aggregate Function</title>
      <link>https://tapoueh.org/blog/2017/11/the-mode-ordered-set-aggregate-function/</link>
      <pubDate>Mon, 13 Nov 2017 18:15:51 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/11/the-mode-ordered-set-aggregate-function/</guid>
      <description>&lt;p&gt;In our article &lt;a href=&#34;https://tapoueh.org/blog/2017/06/exploring-a-data-set-in-sql/&#34;&gt;Exploring a Data Set in
SQL&lt;/a&gt; we discovered a data set
related to music: the &lt;a href=&#34;https://github.com/lerocha/chinook-database&#34;&gt;Chinook&lt;/a&gt;
sample database.&lt;/p&gt;

&lt;p&gt;Our discovery led us to find albums containing tracks of multiple genres,
and for the analytics we were then pursuing, we wanted to &lt;em&gt;clean&lt;/em&gt; the data
set and assign a single genre per album. We did that in SQL of course, and
didn&amp;rsquo;t actually edit the data.&lt;/p&gt;

&lt;p&gt;Finding the most frequent input value in a group is a job for the &lt;code&gt;mode()
WITHIN GROUP (ORDER BY sort_expression)&lt;/code&gt; Ordered-Set Aggregate Function, as
documented in the PostgreSQL page about &lt;a href=&#34;https://www.postgresql.org/docs/current/static/functions-aggregate.html#FUNCTIONS-ORDEREDSET-TABLE&#34;&gt;Aggregate
Functions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

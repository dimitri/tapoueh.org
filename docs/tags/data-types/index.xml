<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Types on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/tags/data-types/</link>
    <description>Recent content in Data Types on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Apr 2018 00:15:44 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/data-types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL Data Types: Date, Timestamp, and Time Zones</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-date-timestamp-and-time-zones/</link>
      <pubDate>Fri, 13 Apr 2018 00:15:44 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-date-timestamp-and-time-zones/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce date, timestamp, and interval data types.&lt;/p&gt;

&lt;p&gt;PostgreSQL implementation of the calendar is very good, and we&amp;rsquo;re going to
show some mice example about how confusing this matter is. The time zone
notion in particular is mainly a political tool these days, and it makes no
sense on an engineering principle: there&amp;rsquo;s no way to solve time zone
problems from first hand principles!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Text Processing</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-processing/</link>
      <pubDate>Wed, 11 Apr 2018 23:15:42 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-processing/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce some of the PostgreSQL text processing functions.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a very rich set of PostgreSQL functions to process text — you can
find them all in the &lt;a href=&#34;https://www.postgresql.org/docs/current/static/functions-string.html&#34;&gt;string functions and
operators&lt;/a&gt;
documentation chapter — with functions such as &lt;em&gt;overlay()&lt;/em&gt;, &lt;em&gt;substring()&lt;/em&gt;,
&lt;em&gt;position()&lt;/em&gt; or &lt;em&gt;trim()&lt;/em&gt;. Or aggregates such as &lt;em&gt;string_agg()&lt;/em&gt;. There are
also &lt;em&gt;regular expression&lt;/em&gt; functions, including the very powerful
&lt;em&gt;regexp_split_to_table()&lt;/em&gt;. In this article we see practical example putting
them in practice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Text Encoding</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-encoding/</link>
      <pubDate>Mon, 09 Apr 2018 13:33:01 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-encoding/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL text data type. The first notion to
understand when processing text in any program is of course the notion of
encoding.&lt;/p&gt;

&lt;p&gt;So when addressing the text datatype we must mention encoding settings, and
possibly also issues. An encoding is a particular representation of
characters in bits and bytes. In the ASCII encoding the letter &lt;code&gt;A&lt;/code&gt; is
encoded as the 7-bits byte &lt;code&gt;1000001&lt;/code&gt;, or 65 in decimal, or 41 in
hexadecimal. All those numbers are going to be written the same way on-disk,
and the letter &lt;code&gt;A&lt;/code&gt; too.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: an intro</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-an-intro/</link>
      <pubDate>Fri, 06 Apr 2018 11:32:43 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-an-intro/</guid>
      <description>&lt;p&gt;Today, we&amp;rsquo;re going to begin a dive into the PostgreSQL Data Types. As my
colleague &lt;a href=&#34;https://bitfission.com&#34;&gt;Will Leinweber&lt;/a&gt; said recently in his talk
&lt;a href=&#34;https://www.postgresql.eu/events/pgdayparis2018/schedule/session/1835-constraints-a-developers-secret-weapon/&#34;&gt;Constraints: a Developer&amp;rsquo;s Secret
Weapon&lt;/a&gt;
that he gave at &lt;a href=&#34;https://2018.pgday.paris&#34;&gt;pgDay Paris&lt;/a&gt;: &lt;a href=&#34;https://www.citusdata.com/blog/2018/03/19/postgres-database-constraints/&#34;&gt;database
constraints in Postgres are the last line of
defense&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important of those constraints is the data type, or the &lt;em&gt;attribute
domain&lt;/em&gt; in normalization slang. By declaring an attribute to be of a certain
data type, then PostgreSQL ensures that this property is always true, and
then implements advanced processing features for each data type, so that you
may push the computation to the data, when needed.&lt;/p&gt;

&lt;p&gt;This article is the first of a series that will go through many of the
PostgreSQL data types, and we open the journey with &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Types on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/data-types/</link>
    <description>Recent content in Data Types on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 May 2018 14:47:05 +0200</lastBuildDate><atom:link href="https://tapoueh.org/tags/data-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL Data Types</title>
      <link>https://tapoueh.org/blog/2018/05/postgresql-data-types/</link>
      <pubDate>Thu, 24 May 2018 14:47:05 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/05/postgresql-data-types/</guid>
      <description>&lt;p&gt;Today it&amp;rsquo;s time to conclude our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data
Types&lt;/a&gt; articles with a recap. The series cover lots of
core PostgreSQL data types and shows how to benefit from the PostgreSQL
concept of a data type: more than input validation, a PostgreSQL data type
also implements expected behaviors and processing functions.&lt;/p&gt;
&lt;p&gt;This allows an application developer to rely on PostgreSQL for more complex
queries, having the processing happen where the data is, for instance when
implementing advanced JOIN operations, then retrieving only the data set
that is interesting for the application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Point</title>
      <link>https://tapoueh.org/blog/2018/05/postgresql-data-types-point/</link>
      <pubDate>Mon, 07 May 2018 10:46:17 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/05/postgresql-data-types-point/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL Point type.&lt;/p&gt;
&lt;p&gt;In order to put the Point datatype in a context where it makes sense, we&amp;rsquo;re
going to download a complete geolocation data set and normalize it, thus
making good use of both the normalization good practice and those other
PostgreSQL data types we&amp;rsquo;ve been learning about in the previous articles of
this series.&lt;/p&gt;
&lt;p&gt;Buckle-up, this is a long article with a lot of SQL inside.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: ENUM</title>
      <link>https://tapoueh.org/blog/2018/05/postgresql-data-types-enum/</link>
      <pubDate>Wed, 02 May 2018 11:00:26 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/05/postgresql-data-types-enum/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL ENUM type.&lt;/p&gt;
&lt;p&gt;This data type has been added to PostgreSQL in order to make it easier to
support migrations from MySQL. Proper relational design would use a
reference table and a foreign key instead.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: JSON</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-json/</link>
      <pubDate>Mon, 30 Apr 2018 09:49:33 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-json/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL JSON type.&lt;/p&gt;
&lt;p&gt;PostgreSQL has built-in support for JSON with a great range of processing
functions and operators, and complete indexing support. The documentation
covers all the details in the chapters entitled &lt;a href=&#34;https://www.postgresql.org/docs/current/static/datatype-json.html&#34;&gt;JSON
Types&lt;/a&gt;
and &lt;a href=&#34;https://www.postgresql.org/docs/current/static/functions-json.html&#34;&gt;JSON Functions and
Operators&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: XML</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-xml/</link>
      <pubDate>Mon, 23 Apr 2018 18:18:48 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-xml/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL XML type.&lt;/p&gt;
&lt;p&gt;The SQL standard includes a &lt;a href=&#34;https://en.wikipedia.org/wiki/SQL/XML&#34;&gt;SQL/XML&lt;/a&gt;
which &lt;em&gt;introduces the predefined data type XML together with constructors,
several routines, functions, and XML-to-SQL data type mappings to support
manipulation and storage of XML in a SQL database&lt;/em&gt;, as per the Wikipedia
page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Arrays</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-arrays/</link>
      <pubDate>Fri, 20 Apr 2018 14:47:25 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-arrays/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL array data types.&lt;/p&gt;
&lt;p&gt;Arrays can be used to denormalize data and avoid lookup tables. A good rule
of thumb for using them that way is that you mostly use the array as a
whole, even if you might at times search for elements in the array. Heavier
processing is going to be more complex than a lookup table.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Ranges</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-ranges/</link>
      <pubDate>Wed, 18 Apr 2018 13:41:12 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-ranges/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL ranges data type.&lt;/p&gt;
&lt;p&gt;Range types are a unique feature of PostgreSQL, managing two dimensions of
data in a single column, and allowing advanced processing. The main example
is the &lt;em&gt;daterange&lt;/em&gt; data type, which stores as a single value a lower and an
upper bound of the range as a single value. This allows PostgreSQL to
implement a concurrent safe check against &lt;em&gt;overlapping&lt;/em&gt; ranges, as we&amp;rsquo;re
going to see in this article.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Network Addresses</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-network-addresses/</link>
      <pubDate>Mon, 16 Apr 2018 12:32:53 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-network-addresses/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce network address types.&lt;/p&gt;
&lt;p&gt;PostgreSQL includes support for both &lt;em&gt;cidr&lt;/em&gt;, &lt;em&gt;inet&lt;/em&gt;, and &lt;em&gt;macaddr&lt;/em&gt; data
types. Again, those types are bundled with indexing support and advanced
functions and operator support.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Date and Time Processing</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-date-and-time-processing/</link>
      <pubDate>Fri, 13 Apr 2018 13:35:47 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-date-and-time-processing/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce date and time based processing functions.&lt;/p&gt;
&lt;p&gt;Once the application&amp;rsquo;s data, or rather the user data is properly stored as
timestamp with time zone, PostgreSQL allows implementing all the processing
you need to. In this article we dive into a set of examples to help you get
started with time based processing in your database. Can we boost your
reporting skills?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Text Processing</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-processing/</link>
      <pubDate>Wed, 11 Apr 2018 23:15:42 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-processing/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce some of the PostgreSQL text processing functions.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a very rich set of PostgreSQL functions to process text — you can
find them all in the &lt;a href=&#34;https://www.postgresql.org/docs/current/static/functions-string.html&#34;&gt;string functions and
operators&lt;/a&gt;
documentation chapter — with functions such as &lt;em&gt;overlay()&lt;/em&gt;, &lt;em&gt;substring()&lt;/em&gt;,
&lt;em&gt;position()&lt;/em&gt; or &lt;em&gt;trim()&lt;/em&gt;. Or aggregates such as &lt;em&gt;string_agg()&lt;/em&gt;. There are
also &lt;em&gt;regular expression&lt;/em&gt; functions, including the very powerful
&lt;em&gt;regexp_split_to_table()&lt;/em&gt;. In this article we see practical example putting
them in practice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Text Encoding</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-encoding/</link>
      <pubDate>Mon, 09 Apr 2018 13:33:01 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-text-encoding/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL text data type. The first notion to
understand when processing text in any program is of course the notion of
encoding.&lt;/p&gt;
&lt;p&gt;So when addressing the text datatype we must mention encoding settings, and
possibly also issues. An encoding is a particular representation of
characters in bits and bytes. In the ASCII encoding the letter &lt;code&gt;A&lt;/code&gt; is
encoded as the 7-bits byte &lt;code&gt;1000001&lt;/code&gt;, or 65 in decimal, or 41 in
hexadecimal. All those numbers are going to be written the same way on-disk,
and the letter &lt;code&gt;A&lt;/code&gt; too.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: an intro</title>
      <link>https://tapoueh.org/blog/2018/04/postgresql-data-types-an-intro/</link>
      <pubDate>Fri, 06 Apr 2018 11:32:43 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/04/postgresql-data-types-an-intro/</guid>
      <description>&lt;p&gt;Today, we&amp;rsquo;re going to begin a dive into the PostgreSQL Data Types. As my
colleague &lt;a href=&#34;https://bitfission.com&#34;&gt;Will Leinweber&lt;/a&gt; said recently in his talk
&lt;a href=&#34;https://www.postgresql.eu/events/pgdayparis2018/schedule/session/1835-constraints-a-developers-secret-weapon/&#34;&gt;Constraints: a Developer&amp;rsquo;s Secret
Weapon&lt;/a&gt;
that he gave at &lt;a href=&#34;https://2018.pgday.paris&#34;&gt;pgDay Paris&lt;/a&gt;: &lt;a href=&#34;https://www.citusdata.com/blog/2018/03/19/postgres-database-constraints/&#34;&gt;database
constraints in Postgres are the last line of
defense&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most important of those constraints is the data type, or the &lt;em&gt;attribute
domain&lt;/em&gt; in normalization slang. By declaring an attribute to be of a certain
data type, then PostgreSQL ensures that this property is always true, and
then implements advanced processing features for each data type, so that you
may push the computation to the data, when needed.&lt;/p&gt;
&lt;p&gt;This article is the first of a series that will go through many of the
PostgreSQL data types, and we open the journey with &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

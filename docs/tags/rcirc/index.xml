<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rcirc on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/rcirc/</link>
    <description>Recent content in rcirc on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Oct 2010 13:30:00 +0200</lastBuildDate><atom:link href="https://tapoueh.org/tags/rcirc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>el-get reaches 1.0</title>
      <link>https://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</link>
      <pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</guid>
      <description>It&amp;rsquo;s been a week since the last commits in the el-get repository, and those were all about fixing and adding recipes, and about notifications. Nothing like core plumbing you see. Also, 0.9 was released on 2010-08-24 and felt pretty complete already, then received lots of improvements. It&amp;rsquo;s high time to cross the line and call it 1.0!
Now existing users will certainly just be moderatly happy to see the tool reach that version number, depending whether they think more about the bugs they want to see fixed (ftp is supported, only called http) and the new features they want to see in ( info documentation) or more about what el-get does for them already today&amp;hellip;</description>
    </item>
    
    <item>
      <title>Want to share your recipes?</title>
      <link>https://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</link>
      <pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</guid>
      <description>Yes, that&amp;rsquo;s another el-get related entry. It seems to take a lot of my attention these days. After having setup the git repository so that you can update el-get from within itself (so that it&amp;rsquo;s self-contained), the next logical step is providing recipes.
By that I mean that el-get-sources entries will certainly look a lot alike between a user and another. Let&amp;rsquo;s take the el-get entry itself:
(:name el-get :type git :url &amp;#34;git://github.</description>
    </item>
    
    <item>
      <title>el-get and dim-switch-window status update</title>
      <link>https://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</link>
      <pubDate>Mon, 09 Aug 2010 15:35:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</guid>
      <description>Thanks to you readers of Planet Emacsen taking the time to try those pieces of emacs lisp found in my blog, and also the time to comment on them, some bugs have been fixed, and new releases appeared.
el-get had some typo kind of bug in its support for apt-get and fink packages, and I managed to break the elpa and http support when going all asynchronous by forgetting to update the call convention I&amp;rsquo;m using.</description>
    </item>
    
    <item>
      <title>Some emacs nifties</title>
      <link>https://tapoueh.org/blog/2009/08/some-emacs-nifties/</link>
      <pubDate>Mon, 03 Aug 2009 15:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/08/some-emacs-nifties/</guid>
      <description>First, here&amp;rsquo;s a way to insert at current position the last message printed into the minibuffer&amp;hellip; well not exactly, in *Messages* buffer in fact. I was tired of doing it myself after invoking, e.g., M-x emacs-version.
;; print last message ;; current-message is already lost by the time this gets called (defun dim:previous-message (&amp;amp;optional nth) &amp;#34;get last line of *Message* buffer&amp;#34; (with-current-buffer (get-buffer &amp;#34;*Messages*&amp;#34;) (save-excursion (goto-char (point-max)) (setq nth (if nth nth 1)) (while (&amp;gt; nth 0) (previous-line) (setq nth (- nth 1))) (buffer-substring (line-beginning-position) (line-end-position))))) (defun dim:insert-previous-message (&amp;amp;optional nth) &amp;#34;insert last message of *Message* to current position&amp;#34; (interactive &amp;#34;p&amp;#34;) (insert (format &amp;#34;%s&amp;#34; (dim:previous-message nth)))) (global-set-key (kbd &amp;#34;C-c m&amp;#34;) &amp;#39;dim:insert-previous-message) Now I stumbled accross Planet Emacsen and saw this Emacs Utility Functions post, containing a version of duplicate-current-line that I didn&amp;rsquo;t like&amp;hellip; here&amp;rsquo;s mine:</description>
    </item>
    
  </channel>
</rss>

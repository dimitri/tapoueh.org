<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Catalog on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/catalog/</link>
    <description>Recent content in Catalog on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Nov 2019 19:30:00 +0200</lastBuildDate><atom:link href="https://tapoueh.org/tags/catalog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>List PostgreSQL tables using extensions</title>
      <link>https://tapoueh.org/blog/2019/11/list-postgresql-tables-using-extensions/</link>
      <pubDate>Tue, 12 Nov 2019 19:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2019/11/list-postgresql-tables-using-extensions/</guid>
      <description>&lt;p&gt;Postgres has extensions, and that&amp;rsquo;s awesome! Of course as the author of
&lt;code&gt;CREATE EXTENSION&lt;/code&gt; I&amp;rsquo;m a little biasedâ€¦ just remember that the ability to
extend Postgres is way more than just this command. The whole database
system has been design from the ground up to allow for extensibility. Parts
of the design is to be found in the way you can register new objects at
runtime: functions of course, and also data types, operators, index support
structures such as operator classes and families, even index access methods!&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article shows a query that you can use to list those tables in your
schemas that are using a data type which is provided by an extension.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

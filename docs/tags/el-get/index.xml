<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>El Get on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/el-get/</link>
    <description>Recent content in El Get on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jan 2014 21:34:00 +0100</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/el-get/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>El-Get is now Rolling Releases</title>
      <link>https://tapoueh.org/blog/2014/01/el-get-is-now-rolling-releases/</link>
      <pubDate>Sat, 11 Jan 2014 21:34:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2014/01/el-get-is-now-rolling-releases/</guid>
      <description>The code of El-Get has been pretty stable for a long time now. About the whole set of patches against the 4.x series has been about bug fixing corner cases (sometimes cases that had nothing cornery about them too) and providing more and more recipes. That&amp;rsquo;s what you expect from a stable software, and that what allows us to move to a rolling releases model.
In practice, it means that you won&amp;rsquo;t have to suffer from using a badly maintained stable branch anymore.</description>
    </item>
    
    <item>
      <title>El-Get 4.1 is out</title>
      <link>https://tapoueh.org/blog/2012/08/el-get-4.1-is-out/</link>
      <pubDate>Tue, 28 Aug 2012 11:43:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2012/08/el-get-4.1-is-out/</guid>
      <description>Please welcome the new stable version of El-Get, the much awaited version 4.1 has now been branched for your pleasure. It&amp;rsquo;s packed with lots of features to make your life easy, comes with a Info documentation book and even has a logo. That&amp;rsquo;s no joke, I found one, at least:
Why El-Get is relevant Emacs 24.1 is the first release that includes package.el, and it even allows the user to setup several sources where to fetch packages.</description>
    </item>
    
    <item>
      <title>el-get-3.1</title>
      <link>https://tapoueh.org/blog/2011/09/el-get-3.1/</link>
      <pubDate>Fri, 16 Sep 2011 14:13:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/09/el-get-3.1/</guid>
      <description>The el-get project releases its new stable version, 3.1. This new release fixes bugs, add a host of new recipes (we have 420 of them and counting) and some nice new features too. You really want to upgrade.
New features Among the features you will find dependencies management and M-x el-get-list-packages, that you should try as soon as possible. Of course, don&amp;rsquo;t miss M-x el-get-self-update that eases the process somehow.</description>
    </item>
    
    <item>
      <title>Emacs Startup</title>
      <link>https://tapoueh.org/blog/2011/08/emacs-startup/</link>
      <pubDate>Sat, 06 Aug 2011 14:58:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/08/emacs-startup/</guid>
      <description>Using Emacs we get to manage a larger and larger setup file (either ~/.emacs or ~/.emacs.d/init.el), sometime with lots of dependencies, and some sub-files thanks to the load function or the provide and require mechanism.
Some users are even starting Emacs often enough for the startup time to be a concern. With an emacs-uptime (yes it&amp;rsquo;s a command, you can M-x emacs-uptime) of days to weeks ( 10 days, 17 hours, 45 minutes, 34 seconds as of this writing), it&amp;rsquo;s not something I really care about much.</description>
    </item>
    
    <item>
      <title>el-get 2.2</title>
      <link>https://tapoueh.org/blog/2011/05/el-get-2.2/</link>
      <pubDate>Thu, 26 May 2011 12:00:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/05/el-get-2.2/</guid>
      <description>We&amp;rsquo;ve spotted a little too late for our own taste a discrepancy in the source tree: a work in progress patch landed in git just before to release el-get stable. So we cleaned the tree (thanks again Julien), branched a stable maintenance tree, and released 2.2 from there.
You&amp;rsquo;re back to enjoying el-get :)</description>
    </item>
    
    <item>
      <title>el-get 2.1</title>
      <link>https://tapoueh.org/blog/2011/05/el-get-2.1/</link>
      <pubDate>Thu, 26 May 2011 10:00:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/05/el-get-2.1/</guid>
      <description>Current el-get status is stable, ready for daily use and packed with extra features that make life easier. There are some more things we could do, as always, but they will be about smoothing things further.
Latest released version el-get version 2.1 is available, with a boatload of features, including autoloads support, byte-compiling in an external clean room Emacs instance, custom support, lazy initialisation support (defering all init functions to eval-after-load), and multi repositories ELPA support.</description>
    </item>
    
    <item>
      <title>Mailq modeline display</title>
      <link>https://tapoueh.org/blog/2011/05/mailq-modeline-display/</link>
      <pubDate>Thu, 05 May 2011 14:10:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/05/mailq-modeline-display/</guid>
      <description>If you&amp;rsquo;ve not been following along, you might have missed it: it appears to me that even today, in 2011, mail systems work much better when setup the old way. Meaning with a local MTA for outgoing mail. With some niceties, such as sender dependent relayhost maps.
That&amp;rsquo;s why I needed M-x mailq to display the mail queue and have some easy shortcuts in order to operate it (mainly f runs the command mailq-mode-flush, but per site and per id delivery are useful too).</description>
    </item>
    
    <item>
      <title>Emacs and PostgreSQL, PL line numbering</title>
      <link>https://tapoueh.org/blog/2011/04/emacs-and-postgresql-pl-line-numbering/</link>
      <pubDate>Sat, 23 Apr 2011 10:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/04/emacs-and-postgresql-pl-line-numbering/</guid>
      <description>A while ago I&amp;rsquo;ve been fixing and publishing pgsql-linum-format separately. That allows to number PL/whatever code lines when editing from Emacs, and it&amp;rsquo;s something very useful to turn on when debugging.
The carrets on the fringe in the emacs window are the result of (setq-default indicate-buffer-boundaries &#39;left) and here it&amp;rsquo;s just overloading the image somehow. But the idea is to just M-x linum-mode when you need it, at least that&amp;rsquo;s my usage of it.</description>
    </item>
    
    <item>
      <title>Emacs Kicker</title>
      <link>https://tapoueh.org/blog/2011/04/emacs-kicker/</link>
      <pubDate>Fri, 15 Apr 2011 21:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/04/emacs-kicker/</guid>
      <description>Following up on the very popular emacs-starter-kit, I&amp;rsquo;m now proposing the emacs-kicker. It&amp;rsquo;s about the .emacs file you&amp;rsquo;ve seen in older posts here, which I maintain for some colleagues. After all, if they find it useful, some more people might to, so I&amp;rsquo;ve decided to publish it.
What you&amp;rsquo;ll find is a very simple 128 lines Emacs user init file, based on el-get for external packages. A not so random selection of those is used, here&amp;rsquo;s the list when you hide some details:</description>
    </item>
    
    <item>
      <title>Starting afresh with el-get</title>
      <link>https://tapoueh.org/blog/2011/01/starting-afresh-with-el-get/</link>
      <pubDate>Tue, 11 Jan 2011 16:20:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/01/starting-afresh-with-el-get/</guid>
      <description>It so happens that a colleague of mine wanted to start using Emacs but couldn&amp;rsquo;t get to it. He insists on having proper color themes in all applications and some sensible defaults full of nifty add-ons everywhere, and didn&amp;rsquo;t want to have to learn that much about Emacs and Emacs Lisp to get started. I&amp;rsquo;m not even sure that he will Take the Emacs tour.
You would tell me that there&amp;rsquo;s nothing we can do for so unfriendly users.</description>
    </item>
    
    <item>
      <title>el-get 1.1, with 174 recipes</title>
      <link>https://tapoueh.org/blog/2010/12/el-get-1.1-with-174-recipes/</link>
      <pubDate>Mon, 20 Dec 2010 16:45:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/12/el-get-1.1-with-174-recipes/</guid>
      <description>Yes, you read it well, el-get currently features 174 recipes, and is now reaching the 1.1 release. The reason for this release is mainly that I have two big chunks of code to review and the current code has been very stable for awhile. It seems better to do a release with the stable code that exists now before to shake it this much. If you&amp;rsquo;re wondering when to jump in the water and switch to using el-get, now is a pretty good time.</description>
    </item>
    
    <item>
      <title>el-get reaches 1.0</title>
      <link>https://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</link>
      <pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</guid>
      <description>It&amp;rsquo;s been a week since the last commits in the el-get repository, and those were all about fixing and adding recipes, and about notifications. Nothing like core plumbing you see. Also, 0.9 was released on 2010-08-24 and felt pretty complete already, then received lots of improvements. It&amp;rsquo;s high time to cross the line and call it 1.0!
Now existing users will certainly just be moderatly happy to see the tool reach that version number, depending whether they think more about the bugs they want to see fixed (ftp is supported, only called http) and the new features they want to see in ( info documentation) or more about what el-get does for them already today&amp;hellip;</description>
    </item>
    
    <item>
      <title>Scratch that itch: M-x mailq</title>
      <link>https://tapoueh.org/blog/2010/09/scratch-that-itch-m-x-mailq/</link>
      <pubDate>Thu, 23 Sep 2010 09:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/09/scratch-that-itch-m-x-mailq/</guid>
      <description>Nowadays, most people would think that email is something simple, you just setup your preferred client (that&amp;rsquo;s called a MUA) with some information such as the smtp host you want it to talk to (that&amp;rsquo;s call a MTA and this one is your relayhost). Then there&amp;rsquo;s all the receiving mails part, and that&amp;rsquo;s smtp again on the server side. Then there&amp;rsquo;s how to get those mail, read them, flag them, manage them, and that&amp;rsquo;s better served by IMAP.</description>
    </item>
    
    <item>
      <title>switch-window reaches 0.8</title>
      <link>https://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</guid>
      <description>I wanted to play with the idea of using the whole keyboard for my switch-window utility, but wondered how to get those keys in the right order and all. Finally found quail-keyboard-layout which seems to exists for such uses, as you can see:
(loop with layout = (split-string quail-keyboard-layout &amp;quot;&amp;quot;) for row from 1 to 4 collect (loop for col from 1 to 12 (&amp;quot;q&amp;quot; &amp;quot;w&amp;quot; &amp;quot;e&amp;quot; &amp;quot;r&amp;quot; &amp;quot;t&amp;quot; &amp;quot;y&amp;quot; &amp;quot;u&amp;quot; &amp;quot;i&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;) (&amp;quot;a&amp;quot; &amp;quot;s&amp;quot; &amp;quot;d&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;;&amp;quot; &amp;quot;&#39;&amp;quot; &amp;quot;\\&amp;quot;) (&amp;quot;z&amp;quot; &amp;quot;x&amp;quot; &amp;quot;c&amp;quot; &amp;quot;v&amp;quot; &amp;quot;b&amp;quot; &amp;quot;n&amp;quot; &amp;quot;m&amp;quot; &amp;quot;,&amp;quot; &amp;quot;.</description>
    </item>
    
    <item>
      <title>Want to share your recipes?</title>
      <link>https://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</link>
      <pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</guid>
      <description>Yes, that&amp;rsquo;s another el-get related entry. It seems to take a lot of my attention these days. After having setup the git repository so that you can update el-get from within itself (so that it&amp;rsquo;s self-contained), the next logical step is providing recipes.
By that I mean that el-get-sources entries will certainly look a lot alike between a user and another. Let&amp;rsquo;s take the el-get entry itself:
(:name el-get :type git :url &amp;quot;git://github.</description>
    </item>
    
    <item>
      <title>welcome el-get scratch installer</title>
      <link>https://tapoueh.org/blog/2010/08/welcome-el-get-scratch-installer/</link>
      <pubDate>Fri, 27 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/welcome-el-get-scratch-installer/</guid>
      <description>A very good remark from some users: installing and managing el-get should be simpler. They wanted both an easy install of the thing, and a way to be able to manage it afterwards (like, update the local copy against the authoritative source). So I decided it was high time for getting the code out of my ~/.emacs.d git repository and up to a public place: http://github.com/dimitri/el-get.
Then, I added some documentation (a README), and then, a *scratch* installer, following great ideas from ELPA.</description>
    </item>
    
    <item>
      <title>el-get news</title>
      <link>https://tapoueh.org/blog/2010/08/el-get-news/</link>
      <pubDate>Thu, 26 Aug 2010 16:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/el-get-news/</guid>
      <description>I&amp;rsquo;ve been receiving some requests for el-get, some of them even included a patch. So now there&amp;rsquo;s support for bzr, CSV and http-tar, augmenting the existing support for git, git-svn, apt-get, fink and ELPA formats.
Also, as the install and even the build are completely asynchronous — there&amp;rsquo;s a pending bugfix for the building, which is now using start-process-shell-command. The advantage of doing so is that you&amp;rsquo;re free to use Emacs as usual while el-get is having your piece of elisp code compiled, which can take time.</description>
    </item>
    
    <item>
      <title>el-get and dim-switch-window status update</title>
      <link>https://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</link>
      <pubDate>Mon, 09 Aug 2010 15:35:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</guid>
      <description>Thanks to you readers of Planet Emacsen taking the time to try those pieces of emacs lisp found in my blog, and also the time to comment on them, some bugs have been fixed, and new releases appeared.
el-get had some typo kind of bug in its support for apt-get and fink packages, and I managed to break the elpa and http support when going all asynchronous by forgetting to update the call convention I&amp;rsquo;m using.</description>
    </item>
    
    <item>
      <title>el-get</title>
      <link>https://tapoueh.org/blog/2010/08/el-get/</link>
      <pubDate>Wed, 04 Aug 2010 22:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/el-get/</guid>
      <description>I&amp;rsquo;ve been using emacs for a long time, and a long time it took me to consider learning Emacs Lisp. Before that, I didn&amp;rsquo;t trust my level of understanding enough to be comfortable in managing my setup efficiently.
One of the main problems of setting up Emacs is that not only you tend to accumulate so many tricks from EmacsWiki and blog posts that your .emacs has to grow to a full ~/.</description>
    </item>
    
    <item>
      <title>dim-switch-window.el</title>
      <link>https://tapoueh.org/blog/2010/07/dim-switch-window.el/</link>
      <pubDate>Sun, 25 Jul 2010 13:25:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/07/dim-switch-window.el/</guid>
      <description>So it&amp;rsquo;s Sunday and I&amp;rsquo;m thinking I&amp;rsquo;ll get into el-get sometime later. Now is the time to present dim-switch-window.el which implements a visual C-x o. I know of only one way to present a visual effect, and that&amp;rsquo;s with a screenshot:
So as you can see, it&amp;rsquo;s all about showing a big number in each window, tweaking each window&amp;rsquo;s name, and waiting till the user press one of the expected key — or timeout and stay on the same window as before C-x o.</description>
    </item>
    
    <item>
      <title>ClusterSSH gets dsh support</title>
      <link>https://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</link>
      <pubDate>Fri, 23 Jul 2010 22:20:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</guid>
      <description>If you don&amp;rsquo;t know about ClusterSSH, it&amp;rsquo;s a project that builds on M-x term and ssh to offer a nice and simple way to open remote terminals. It&amp;rsquo;s available in ELPA and developed at github cssh repository.
The default binding is C-= and asks for the name of the server to connect to, in the minibuffer, with completion. The host list used for the completion comes from tramp and is pretty complete, all the more if you&amp;rsquo;ve setup ~/.</description>
    </item>
    
  </channel>
</rss>
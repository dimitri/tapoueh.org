<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pg_auto_failover on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/pg_auto_failover/</link>
    <description>Recent content in pg_auto_failover on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Dec 2021 22:36:36 +0100</lastBuildDate><atom:link href="https://tapoueh.org/tags/pg_auto_failover/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Postgres HA: roles are dynamic</title>
      <link>https://tapoueh.org/blog/2021/12/postgres-ha-roles-are-dynamic/</link>
      <pubDate>Tue, 14 Dec 2021 22:36:36 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2021/12/postgres-ha-roles-are-dynamic/</guid>
      <description>&lt;p&gt;High-Availability comes with some impact on your architecture choices, in
particular when applied to RDBMS such as Postgres. One such impact is the
idea of a failover. When implementing database HA, it is usually expected
that both the service and the data are maintained available in the face of
operational faults. The most common way to implement resilience includes
automated (or manual) failover, where a new primary is elected among a list
of standby nodes.&lt;/p&gt;
&lt;p&gt;In other words, as soon as Postgres High-Availability is implemented, the
roles of your Postgres nodes are dynamic. The fact that a given node is a
primary or a standby at any given point in time ceases to be relevant to
understanding your architecture. In fact, the only thing that&amp;rsquo;s now given
about the role of a node is that it will change. Otherwise you don&amp;rsquo;t have
failover capability, and then, you probably don&amp;rsquo;t have HA in the first
place, right?&lt;/p&gt;
&lt;p&gt;In this article we are going to try and understand what having dynamic roles
for Postgres nodes in a HA system means.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An introduction to the pg_auto_failover project</title>
      <link>https://tapoueh.org/blog/2021/11/an-introduction-to-the-pg_auto_failover-project/</link>
      <pubDate>Wed, 10 Nov 2021 17:11:29 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2021/11/an-introduction-to-the-pg_auto_failover-project/</guid>
      <description>&lt;p&gt;We just released &lt;a href=&#34;https://github.com/citusdata/pg_auto_failover/releases/tag/v1.6.3&#34;&gt;pg_auto_failover version
1.6.3&lt;/a&gt; on
GitHub, and the binary packages should be already available at the usual
PGDG and CitusData places, both for debian based distributions and RPM based
distributions too.&lt;/p&gt;
&lt;p&gt;This article is an introduction to the pg_auto_failover project: we answer
the &lt;em&gt;Five W&lt;/em&gt; questions, starting with why does the project exist in the
first place?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; pg_auto_failover is an awesome project. It fills the gap between
&lt;em&gt;“Postgres is awesome, makes developping my application so much easier, it
solves so many problems for me!”&lt;/em&gt; and the next step &lt;em&gt;“so, how do I run
Postgres in Production?”&lt;/em&gt;. If you&amp;rsquo;re not sure how to bridge that gap
yourself, how to deploy your first production system with automated
failover, then pg_auto_failover is for you. It is simple to use, user
friendly, and well documented. &lt;strong&gt;Star it&lt;/strong&gt; on the &lt;a href=&#34;https://github.com/citusdata/pg_auto_failover&#34;&gt;pg_auto_failover GitHub
repository&lt;/a&gt; and get started
today. Consider contributing to the project, it is fully Open Source, and
you are welcome to join us.&lt;/p&gt;
&lt;p&gt;Buckle up, our guide tour is starting now!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020: Online Conferences</title>
      <link>https://tapoueh.org/blog/2020/11/2020-online-conferences/</link>
      <pubDate>Fri, 27 Nov 2020 13:10:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2020/11/2020-online-conferences/</guid>
      <description>Among a lot of other changes, the year 2020 brings Online Conferences to us. In the Postgres community too we now record our talks at home and send a video file to be playedto a virtual audience, and sometimes shared later in a platform online.
So this year I did participate in Postgres Vision 2020 where I did deliver a talk about The Art of PostgreSQL. This a talk all about the book that I have written and self-publish at The Art of PostgreSQL: learn how to turn thousands of lines of code into simple SQL queries.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/tags/sql/</link>
    <description>Recent content in Sql on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Nov 2017 16:23:44 +0100</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple Data Modeling with a Test Data Set</title>
      <link>https://tapoueh.org/blog/2017/11/simple-data-modeling-with-a-test-data-set/</link>
      <pubDate>Mon, 27 Nov 2017 16:23:44 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/11/simple-data-modeling-with-a-test-data-set/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://tapoueh.org/blog/2017/06/how-to-write-sql/&#34;&gt;How to Write SQL&lt;/a&gt; we saw how to write
SQL queries as separate &lt;code&gt;.sql&lt;/code&gt; files, and we learnt about using query
parameters with the &lt;em&gt;psql&lt;/em&gt; syntax for that (&lt;code&gt;:variable&lt;/code&gt;, &lt;code&gt;:&#39;variable&#39;&lt;/code&gt;, and
&lt;code&gt;:&amp;quot;identifier&amp;quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For writing our database model, the same tooling is all we need. An
important aspect of using &lt;em&gt;psql&lt;/em&gt; is its capacity to provide immediate
feedback, and we can also have that with modeling too.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Mode Ordered-Set Aggregate Function</title>
      <link>https://tapoueh.org/blog/2017/11/the-mode-ordered-set-aggregate-function/</link>
      <pubDate>Mon, 13 Nov 2017 18:15:51 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/11/the-mode-ordered-set-aggregate-function/</guid>
      <description>&lt;p&gt;In our article &lt;a href=&#34;https://tapoueh.org/blog/2017/06/exploring-a-data-set-in-sql/&#34;&gt;Exploring a Data Set in
SQL&lt;/a&gt; we discovered a data set
related to music: the &lt;a href=&#34;https://github.com/lerocha/chinook-database&#34;&gt;Chinook&lt;/a&gt;
sample database.&lt;/p&gt;

&lt;p&gt;Our discovery led us to find albums containing tracks of multiple genres,
and for the analytics we were then pursuing, we wanted to &lt;em&gt;clean&lt;/em&gt; the data
set and assign a single genre per album. We did that in SQL of course, and
didn&amp;rsquo;t actually edit the data.&lt;/p&gt;

&lt;p&gt;Finding the most frequent input value in a group is a job for the &lt;code&gt;mode()
WITHIN GROUP (ORDER BY sort_expression)&lt;/code&gt; Ordered-Set Aggregate Function, as
documented in the PostgreSQL page about &lt;a href=&#34;https://www.postgresql.org/docs/current/static/functions-aggregate.html#FUNCTIONS-ORDEREDSET-TABLE&#34;&gt;Aggregate
Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What&#39;s in a name: ‚ÄúMastering‚Äù</title>
      <link>https://tapoueh.org/blog/2017/11/whats-in-a-name-mastering/</link>
      <pubDate>Thu, 09 Nov 2017 09:34:36 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/11/whats-in-a-name-mastering/</guid>
      <description>&lt;p&gt;Now that my book &lt;a href=&#34;https://masteringpostgresql.com&#34;&gt;Mastering PostgreSQL in Application
Development&lt;/a&gt; is released (and selling well,
thanks guys!), I&amp;rsquo;ve had some questions about the title.&lt;/p&gt;

&lt;p&gt;The idea is that to become good at anything, we need to practice. We
practice a lot, and it&amp;rsquo;s even better when we are actively trying to learn,
following what&amp;rsquo;s named &lt;a href=&#34;https://en.wikipedia.org/wiki/Practice_(learning_method)#Deliberate_practice&#34;&gt;deliberate
practice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mastering PostgreSQL in Application Development launches!</title>
      <link>https://tapoueh.org/blog/2017/11/mastering-postgresql-in-application-development-launches/</link>
      <pubDate>Mon, 06 Nov 2017 10:48:43 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/11/mastering-postgresql-in-application-development-launches/</guid>
      <description>Today is the day my book Mastering PostgreSQL in Application Development launches! I&amp;rsquo;m all excited that everybody interested is now able to actually read my book!
Mastering PostgreSQL in Application Development targets application developers who want to learn SQL properly, and actually master this programming language. Most developers don&amp;rsquo;t think of SQL as a programming language, mainly because they don&amp;rsquo;t have full control of the execution plan of their queries.</description>
    </item>
    
    <item>
      <title>Mastering PostgreSQL in Application Development</title>
      <link>https://tapoueh.org/blog/2017/09/mastering-postgresql-in-application-development/</link>
      <pubDate>Mon, 11 Sep 2017 15:22:23 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/09/mastering-postgresql-in-application-development/</guid>
      <description>Mastering PostgreSQL in Application Development is the full title of the book I am currently writing. Running the PostgreSQL is YeSQL series of blog posts has shown me developers need a PostgreSQL book for developers. A book with the same properties as the YeSQL series articles in this blog:
 we use real world data sets to put every query and SQL technique we learn in the context of a user story or business case,</description>
    </item>
    
    <item>
      <title>Regular Expressions and Grouping Sets</title>
      <link>https://tapoueh.org/blog/2017/08/regular-expressions-and-grouping-sets/</link>
      <pubDate>Mon, 14 Aug 2017 16:37:53 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/08/regular-expressions-and-grouping-sets/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a very rich set of PostgreSQL functions to process text, you can
find them all at
the
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/functions-string.html&#34;&gt;String Functions and Operators&lt;/a&gt; documentation
chapter, with functions such as &lt;em&gt;overlay&lt;/em&gt;, &lt;em&gt;substring&lt;/em&gt;, &lt;em&gt;position&lt;/em&gt; or
&lt;em&gt;trim&lt;/em&gt;. Or aggregates such as &lt;em&gt;string_agg&lt;/em&gt;. And then &lt;em&gt;regular expression&lt;/em&gt;
functions, including the very powerful &lt;em&gt;regexp_split_to_table&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Regression Tests</title>
      <link>https://tapoueh.org/blog/2017/08/sql-regression-tests/</link>
      <pubDate>Tue, 08 Aug 2017 17:55:51 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/08/sql-regression-tests/</guid>
      <description>&lt;p&gt;In a previous article here we
saw &lt;a href=&#34;https://tapoueh.org/blog/2017/06/how-to-write-sql/&#34;&gt;How to Write SQL&lt;/a&gt; in your application
code. The main idea in that article is to maintain your queries in separate
SQL files, where it&amp;rsquo;s easier to maintain them. In particular if you want to
be able to test them again in production, and when you have to work and
rewrite queries.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playing with Unicode</title>
      <link>https://tapoueh.org/blog/2017/07/playing-with-unicode/</link>
      <pubDate>Mon, 03 Jul 2017 14:32:29 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/07/playing-with-unicode/</guid>
      <description>&lt;p&gt;The reason why I like Unicode a lot is because it allows me to code in text
based environments and still have nice output. Today, we&amp;rsquo;re going to play
with
&lt;a href=&#34;https://en.wikipedia.org/wiki/Regional_Indicator_Symbol&#34;&gt;Regional Indicator Symbol&lt;/a&gt;,
which is implemented as a Unicode combinaison of letters from üá¶ to üáø. For
instance, if you display üá´ then üá∑ concatenated together, you get üá´üá∑. Let&amp;rsquo;s
try that from our &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; prompt!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL and the calendar</title>
      <link>https://tapoueh.org/blog/2017/06/postgresql-and-the-calendar/</link>
      <pubDate>Fri, 30 Jun 2017 14:35:59 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/06/postgresql-and-the-calendar/</guid>
      <description>&lt;p&gt;The modern calendar is a trap for the young engineer&amp;rsquo;s mind. We deal with
the calendar on a daily basis and until exposed to its insanity it&amp;rsquo;s rather
common to think that calendar based computations are easy. That&amp;rsquo;s until
you&amp;rsquo;ve tried to do it once. A very good read about how the current calendar
came to be the way it is now is Erik&amp;rsquo;s
Naggum &lt;a href=&#34;http://naggum.no/lugm-time.html&#34;&gt;The Long, Painful History of Time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL and Business Logic</title>
      <link>https://tapoueh.org/blog/2017/06/sql-and-business-logic/</link>
      <pubDate>Mon, 19 Jun 2017 13:30:19 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/06/sql-and-business-logic/</guid>
      <description>&lt;p&gt;Business logic is &lt;em&gt;supposed to be&lt;/em&gt; the part of the application where you
deal with customer or user facing decisions and computations. It is often
argued that this part should be well separated from the rest of the
technical infrastructure of your code. Of course, SQL and relational
database design is meant to support your business cases (or user stories),
so then we can ask ourselves if SQL should be part of your business logic
implementation. Or actually, how much of your business logic should be SQL?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring a Data Set in SQL</title>
      <link>https://tapoueh.org/blog/2017/06/exploring-a-data-set-in-sql/</link>
      <pubDate>Tue, 13 Jun 2017 13:47:08 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/06/exploring-a-data-set-in-sql/</guid>
      <description>&lt;p&gt;Sometimes you need to dive in an existing data set that you know very little
about. Let&amp;rsquo;s say we&amp;rsquo;ve been lucky to have had a high level description of
the business case covered by a database, and then access to it. Our next
step is figuring out data organisation, content and quality. Our tool box:
&lt;em&gt;the world&amp;rsquo;s most advanced open source
database&lt;/em&gt;, &lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt;, and its &lt;em&gt;Structured
Query Language&lt;/em&gt;, SQL.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Write SQL</title>
      <link>https://tapoueh.org/blog/2017/06/how-to-write-sql/</link>
      <pubDate>Thu, 08 Jun 2017 13:23:26 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2017/06/how-to-write-sql/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/krisajenkins&#34;&gt;Kris Jenkins&lt;/a&gt; cooked up a very nice way
to embed SQL in your
code: &lt;a href=&#34;https://github.com/krisajenkins/yesql&#34;&gt;YeSQL for Clojure&lt;/a&gt;. The main
idea is that you should be writing your SQL queries in &lt;code&gt;.sql&lt;/code&gt; files in your
code repository and maintain them there.&lt;/p&gt;

&lt;p&gt;The idea is very good and it is now possible to find alternative
implementations of the &lt;a href=&#34;https://clojure.org&#34;&gt;Clojure&lt;/a&gt; &lt;em&gt;yesql&lt;/em&gt; library in
other languages. Today, we are going to have a look at one of them for
the &lt;a href=&#34;https://www.python.org&#34;&gt;python&lt;/a&gt; programming
language: &lt;a href=&#34;https://github.com/honza/anosql&#34;&gt;anosql&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
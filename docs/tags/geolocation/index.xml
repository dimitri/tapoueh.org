<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geolocation on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/geolocation/</link>
    <description>Recent content in Geolocation on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 12:11:33 +0200</lastBuildDate><atom:link href="https://tapoueh.org/tags/geolocation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Geolocation with PostgreSQL</title>
      <link>https://tapoueh.org/blog/2018/08/geolocation-with-postgresql/</link>
      <pubDate>Fri, 24 Aug 2018 12:11:33 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/08/geolocation-with-postgresql/</guid>
      <description>&lt;p&gt;We have loaded Open Street Map points of interests in the article &lt;a href=&#34;https://tapoueh.org/blog/2013/08/the-most-popular-pub-names/&#34;&gt;The Most
Popular Pub Names&lt;/a&gt; â€” which
compares PostgreSQL with MongoDB for simple geographical queries, and is
part of our &lt;a href=&#34;https://tapoueh.org/tags/extensions/&#34;&gt;PostgreSQL Extensions&lt;/a&gt; article series. In
today&amp;rsquo;s article, look at how to geolocalize an IP address and locate the
nearest pub, all within a single SQL query!&lt;/p&gt;

&lt;p&gt;For that, we are going to use the awesome
&lt;a href=&#34;https://github.com/RhodiumToad/ip4r&#34;&gt;ip4r&lt;/a&gt; extension from
&lt;a href=&#34;http://blog.rhodiumtoad.org.uk/&#34;&gt;RhodiumToad&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Data Types: Point</title>
      <link>https://tapoueh.org/blog/2018/05/postgresql-data-types-point/</link>
      <pubDate>Mon, 07 May 2018 10:46:17 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/05/postgresql-data-types-point/</guid>
      <description>&lt;p&gt;Continuing our series of &lt;a href=&#34;https://tapoueh.org/tags/data-types/&#34;&gt;PostgreSQL Data Types&lt;/a&gt; today
we&amp;rsquo;re going to introduce the PostgreSQL Point type.&lt;/p&gt;

&lt;p&gt;In order to put the Point datatype in a context where it makes sense, we&amp;rsquo;re
going to download a complete geolocation data set and normalize it, thus
making good use of both the normalization good practice and those other
PostgreSQL data types we&amp;rsquo;ve been learning about in the previous articles of
this series.&lt;/p&gt;

&lt;p&gt;Buckle-up, this is a long article with a lot of SQL inside.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loading Geolocation Data</title>
      <link>https://tapoueh.org/blog/2013/10/loading-geolocation-data/</link>
      <pubDate>Tue, 01 Oct 2013 16:52:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/10/loading-geolocation-data/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve been mentionning in the past already, I&amp;rsquo;m currently rewriting
pgloader from scratch in
&lt;a href=&#34;https://tapoueh.org/tags/common-lisp&#34;&gt;Common Lisp&lt;/a&gt;. In terms of
&lt;a href=&#34;http://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt; that&amp;rsquo;s akin
to declaring
&lt;em&gt;bankrupcy&lt;/em&gt;, which is both sad news and good news as there&amp;rsquo;s
suddenly new hope of doing it right this time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How far is the nearest pub?</title>
      <link>https://tapoueh.org/blog/2013/08/how-far-is-the-nearest-pub/</link>
      <pubDate>Mon, 05 Aug 2013 08:11:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/08/how-far-is-the-nearest-pub/</guid>
      <description>&lt;p&gt;In our recent article
about &lt;a href=&#34;https://tapoueh.org/blog/2013/08/02-pub-names-knn&#34;&gt;The Most Popular Pub Names&lt;/a&gt; we did
have a look at how to find the pubs nearby, but didn&amp;rsquo;t compute the
&lt;strong&gt;distance&lt;/strong&gt; in between that pub and us. That&amp;rsquo;s because how to compute a
distance given a position on the earth expressed as &lt;em&gt;longitude&lt;/em&gt; and
&lt;em&gt;latitude&lt;/em&gt; is not that easy. Today, we are going to solve that problem
nonetheless, thanks
to
&lt;a href=&#34;http://www.postgresql.org/docs/9.2/interactive/extend-extensions.html&#34;&gt;PostgreSQL Extensions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Most Popular Pub Names</title>
      <link>https://tapoueh.org/blog/2013/08/the-most-popular-pub-names/</link>
      <pubDate>Fri, 02 Aug 2013 10:19:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/08/the-most-popular-pub-names/</guid>
      <description>&lt;p&gt;In his article
titled
&lt;a href=&#34;http://blog.mongodb.org/post/56876800071/the-most-popular-pub-names?utm_content=buffer4922c&amp;amp;utm_source=buffer&amp;amp;utm_medium=facebook&amp;amp;utm_campaign=Buffer&#34;&gt;The Most Popular Pub Names&lt;/a&gt; &lt;em&gt;Ross
Lawley&lt;/em&gt; did show us how to perform some quite interesting &lt;em&gt;geographic
queries&lt;/em&gt; against &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;, using some nice &lt;em&gt;Open
Data&lt;/em&gt; found at the &lt;a href=&#34;http://www.openstreetmap.org/&#34;&gt;Open Street Map&lt;/a&gt; project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nearest Big City</title>
      <link>https://tapoueh.org/blog/2013/05/nearest-big-city/</link>
      <pubDate>Thu, 02 May 2013 11:34:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/05/nearest-big-city/</guid>
      <description>In this article, we want to find the town with the greatest number of inhabitants near a given location.
 A very localized example We first need to find and import some data, and I found at the following place a CSV listing of french cities with coordinates and population and some numbers of interest for the exercise here.
To import the data set, we first need a table, then a COPY command:</description>
    </item>
    
  </channel>
</rss>

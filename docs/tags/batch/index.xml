<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Batch on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/batch/</link>
    <description>Recent content in Batch on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Aug 2018 11:24:25 +0200</lastBuildDate><atom:link href="https://tapoueh.org/tags/batch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scheduled Data Processing: How to use cron?</title>
      <link>https://tapoueh.org/blog/2018/08/scheduled-data-processing-how-to-use-cron/</link>
      <pubDate>Wed, 01 Aug 2018 11:24:25 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/08/scheduled-data-processing-how-to-use-cron/</guid>
      <description>&lt;p&gt;A previous article in the &lt;a href=&#34;https://tapoueh.org/tags/concurrency&#34;&gt;PostgreSQL Concurrency&lt;/a&gt; series
covered how to manage concurrent retweets in an efficient way: in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing
and Caching&lt;/a&gt;, we learnt how to
maintain a cache right in your PostgreSQL database, using MATERIALIZED
VIEWS. We also had a look at how to take care of &lt;a href=&#34;https://tapoueh.org/blog/2018/07/batch-updates-and-concurrency/&#34;&gt;Batch Updates and
Concurrency&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While in the first case we are providing a solution to a technical problem
where we want to solve performance issues while keeping the same semantics,
in the second case we are actually implementing a part of the application&amp;rsquo;s
&lt;a href=&#34;https://tapoueh.org/blog/2017/06/sql-and-business-logic/&#34;&gt;Business Logic&lt;/a&gt; as a scheduled job.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s article shows a modern technique to handle the scheduling of those
business oriented activities that are not tied to any user activity. When
thinking about it this way, you certainly don&amp;rsquo;t want to implement the
backbone of your business logic in a &lt;em&gt;shell script&lt;/em&gt; that&amp;rsquo;s directly
maintained in the production environment, do you?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Batch Updates and Concurrency</title>
      <link>https://tapoueh.org/blog/2018/07/batch-updates-and-concurrency/</link>
      <pubDate>Mon, 23 Jul 2018 22:45:43 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/batch-updates-and-concurrency/</guid>
      <description>&lt;p&gt;This article fits in the &lt;a href=&#34;https://tapoueh.org/tags/concurrency&#34;&gt;PostgreSQL Concurrency&lt;/a&gt; series,
where we installed a tweeter like application schema and had all the
characters from Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own
lines in our database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A previous article in the series covered how to manage concurrent retweets
in an efficient way: &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing and
Caching&lt;/a&gt;, where we learn how to
maintain a cache right in your PostgreSQL database, thanks for materialized
views. We even went as far as maintaining an &lt;em&gt;external&lt;/em&gt; cache in another
application layer using PostgreSQL
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-listen.html&#34;&gt;LISTEN&lt;/a&gt; and
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-notify.html&#34;&gt;NOTIFY&lt;/a&gt;
features and a Golang application.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s article is going to address concurrency in the context of updating
data in a batch. This activity is quite common, as soon as your system is
connected to other systems either internally or with external providers.
While it&amp;rsquo;s pretty easy to ingest new data, and easy enough to update data
from an external source when nothing happens in your database, doing the
operation safely with concurrent activity is more complex. Once more though,
PostgreSQL comes with all the tooling you need to handle that situation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Batch Update</title>
      <link>https://tapoueh.org/blog/2013/03/batch-update/</link>
      <pubDate>Fri, 15 Mar 2013 10:47:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/03/batch-update/</guid>
      <description>&lt;p&gt;Performance consulting involves some tricks that you have to teach over and
over again. One of them is that SQL tends to be so much better at dealing
with plenty of rows in a single statement when compared to running as many
statements, each one against a single row.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Catalogs on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>http://tapoueh.org/tags/catalogs/</link>
    <description>Recent content in Catalogs on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Oct 2013 17:42:00 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/tags/catalogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Geolocation with PostgreSQL</title>
      <link>http://tapoueh.org/blog/2013/10/geolocation-with-postgresql/</link>
      <pubDate>Wed, 09 Oct 2013 17:42:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/geolocation-with-postgresql/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s get back to our
&lt;a href=&#34;http://tapoueh.org/tags/extensions&#34;&gt;Tour of Extensions&lt;/a&gt; that had to be kept aside for
awhile with other concerns such as last chance
&lt;a href=&#34;http://tapoueh.org/blog/2013/09/16-PostgreSQL-data-recovery&#34;&gt;PostgreSQL data recovery&lt;/a&gt;. Now
that we have a
&lt;em&gt;data loading&lt;/em&gt; tool up to the task (read about it in the
&lt;a href=&#34;http://tapoueh.org/blog/2013/10/01-loading-geolocation-data&#34;&gt;Loading Geolocation Data&lt;/a&gt; article) we&amp;rsquo;re going to be able to play with the
awesome
&lt;a href=&#34;https://github.com/RhodiumToad/ip4r&#34;&gt;ip4r&lt;/a&gt; extension from
&lt;a href=&#34;http://blog.rhodiumtoad.org.uk/&#34;&gt;RhodiumToad&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Archiving data as fast as possible</title>
      <link>http://tapoueh.org/blog/2013/07/archiving-data-as-fast-as-possible/</link>
      <pubDate>Fri, 05 Jul 2013 15:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/07/archiving-data-as-fast-as-possible/</guid>
      <description>&lt;p&gt;In a recent article here we&amp;rsquo;ve been talking about how do do
&lt;a href=&#34;http://tapoueh.org/blog/2013/03/15-batch-update&#34;&gt;Batch Updates&lt;/a&gt; in
a very efficient way, using the
&lt;em&gt;Writable CTE&lt;/em&gt; features available in
PostgreSQL 9.1. I sometime read how
&lt;a href=&#34;http://www.postgresql.org/docs/current/interactive/queries-with.html&#34;&gt;Common Table Expressions&lt;/a&gt; changed the
life of fellow DBAs and developers, and would say that
&lt;em&gt;Writable CTE&lt;/em&gt; are at
least the same boost again.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automated Setup for pgloader</title>
      <link>http://tapoueh.org/blog/2013/01/automated-setup-for-pgloader/</link>
      <pubDate>Thu, 17 Jan 2013 14:32:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/01/automated-setup-for-pgloader/</guid>
      <description>Another day, another migration from MySQL to PostgreSQL&amp;hellip; or at least that&amp;rsquo;s how it feels sometimes. This time again I&amp;rsquo;ve been using some quite old scripts to help me do the migration.
That&amp;rsquo;s how I feel for MySQL users
Migrating the schema For the schema parts, I&amp;rsquo;ve been using mysql2pgsql with success for many years. This tool is not complete and will do only about 80% of the work. As I think that the schema should always be validated manually when doing a migration anyway, I happen to think that it&amp;rsquo;s good news.</description>
    </item>
    
    <item>
      <title>Next month partitions</title>
      <link>http://tapoueh.org/blog/2011/07/next-month-partitions/</link>
      <pubDate>Wed, 27 Jul 2011 22:35:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/next-month-partitions/</guid>
      <description>When you do partition your tables monthly, then comes the question of when to create next partitions. I tend to create them just the week before next month and I have some nice nagios scripts to alert me in case I&amp;rsquo;ve forgotten to do so. How to check that by hand in the end of a month?
Here&amp;rsquo;s a catalog query to help you there:
=&amp;gt; select * -&amp;gt; from -&amp;gt; ( (&amp;gt; select &#39;previous parts&#39; as schemaname, count(*)::text as tablename (&amp;gt; from pg_tables (&amp;gt; where schemaname not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) (&amp;gt; and tablename like to_char(now(), &#39;%YYYYMM&#39;) (&amp;gt; (&amp;gt; union (&amp;gt; (&amp;gt; select schemaname, substring(tablename,1,length(tablename)-6) || &#39;201108&#39; (&amp;gt; from pg_tables (&amp;gt; where schemaname not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) (&amp;gt; and tablename like to_char(now(), &#39;%YYYYMM&#39;) (&amp;gt; (&amp;gt; except (&amp;gt; (&amp;gt; select schemaname, tablename (&amp;gt; from pg_tables (&amp;gt; where schemaname not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) (&amp;gt; and tablename like to_char(now() + interval &#39;1 month&#39;, &#39;%YYYYMM&#39;) (&amp;gt; ) as t -&amp;gt; order by schemaname &amp;lt;&amp;gt; &#39;previous parts&#39;, schemaname; schemaname | tablename ----------------+------------------------ previous parts | 1 central | stats_entrantes_201108 (2 rows)  As you see, our partitions are named _YYYYMM so that&amp;rsquo;s it&amp;rsquo;s easy to match them in our queries, but I guess about everyone does about the same here.</description>
    </item>
    
    <item>
      <title>Tables and Views dependencies</title>
      <link>http://tapoueh.org/blog/2011/05/tables-and-views-dependencies/</link>
      <pubDate>Wed, 04 May 2011 11:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/05/tables-and-views-dependencies/</guid>
      <description>Let&amp;rsquo;s say you need to ALTER TABLE foo ALTER COLUMN bar TYPE bigint;, and PostgreSQL is helpfully telling you that no you can&amp;rsquo;t because such and such views depend on the column. The basic way to deal with that is to copy paste from the error message the names of the views involved, then prepare a script wherein you first DROP VIEW ...; then ALTER TABLE and finally CREATE VIEW again, all in the same transaction.</description>
    </item>
    
    <item>
      <title>Editing constants in constraints</title>
      <link>http://tapoueh.org/blog/2010/08/editing-constants-in-constraints/</link>
      <pubDate>Mon, 09 Aug 2010 14:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/editing-constants-in-constraints/</guid>
      <description>We&amp;rsquo;re using constants in some constraints here, for example in cases where several servers are replicating to the same federating one: each origin server has his own schema, and all is replicated nicely on the central host, thanks to Londiste, as you might have guessed already.
For bare-metal recovery scripts, I&amp;rsquo;m working on how to change those constants in the constraints, so that pg_dump -s plus some schema tweaking would kick-start a server.</description>
    </item>
    
    <item>
      <title>Querying the Catalog to plan an upgrade</title>
      <link>http://tapoueh.org/blog/2010/08/querying-the-catalog-to-plan-an-upgrade/</link>
      <pubDate>Thu, 05 Aug 2010 11:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/querying-the-catalog-to-plan-an-upgrade/</guid>
      <description>Some user on IRC was reading the releases notes in order to plan for a minor upgrade of his 8.3.3 installation, and was puzzled about potential needs for rebuilding GIST indexes. That&amp;rsquo;s from the 8.3.5 release notes, and from the 8.3.8 notes you see that you need to consider hash indexes on interval columns too. Now the question is, how to find out if any such beasts are in use in your database?</description>
    </item>
    
    <item>
      <title>Partitioning: relation size per “group”</title>
      <link>http://tapoueh.org/blog/2010/07/partitioning-relation-size-per-group/</link>
      <pubDate>Mon, 26 Jul 2010 17:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/partitioning-relation-size-per-group/</guid>
      <description>This time, we are trying to figure out where is the bulk of the data on disk. The trick is that we&amp;rsquo;re using DDL partitioning, but we want a “nice” view of size per partition set. Meaning that if you have for example a parent table foo with partitions foo_201006 and foo_201007, you would want to see a single category foo containing the accumulated size of all the partitions underneath foo.</description>
    </item>
    
    <item>
      <title>Finding orphaned sequences</title>
      <link>http://tapoueh.org/blog/2010/03/finding-orphaned-sequences/</link>
      <pubDate>Wed, 17 Mar 2010 13:35:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/03/finding-orphaned-sequences/</guid>
      <description>This time we&amp;rsquo;re having a database where sequences were used, but not systematically as a default value of a given column. It&amp;rsquo;s mainly an historic bad idea, but you know the usual excuse with bad ideas and bad code: the first 6 months it&amp;rsquo;s experimental, after that it&amp;rsquo;s historic.
Not talking about genome orphaned sequences here, though
Still, here&amp;rsquo;s a query for 8.4 that will allow you to list those sequences you have that are not used as a default value in any of your tables:</description>
    </item>
    
    <item>
      <title>Resetting sequences. All of them, please!</title>
      <link>http://tapoueh.org/blog/2010/02/resetting-sequences.-all-of-them-please/</link>
      <pubDate>Tue, 16 Feb 2010 16:23:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/02/resetting-sequences.-all-of-them-please/</guid>
      <description>So, after restoring a production dump with intermediate filtering, none of our sequences were set to the right value. I could have tried to review the process of filtering the dump here, but it&amp;rsquo;s a one-shot action and you know what that sometimes mean. With some pressure you don&amp;rsquo;t script enough of it and you just crawl more and more.
Still, I think how I solved it is worthy of a blog entry.</description>
    </item>
    
    <item>
      <title>Controling HOT usage in 8.3</title>
      <link>http://tapoueh.org/blog/2009/01/controling-hot-usage-in-8.3/</link>
      <pubDate>Wed, 28 Jan 2009 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/01/controling-hot-usage-in-8.3/</guid>
      <description>As it happens, I&amp;rsquo;ve got some environments where I want to make sure HOT ( aka Heap Only Tuples) is in use. Because we&amp;rsquo;re doing so much updates a second that I want to get sure it&amp;rsquo;s not killing my database server. I not only wrote some checking view to see about it, but also made a quick article about it in the French PostgreSQL website. Handling around in #postgresql means that I&amp;rsquo;m now bound to write about it in English too!</description>
    </item>
    
  </channel>
</rss>
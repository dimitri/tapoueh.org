<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modeling on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/tags/modeling/</link>
    <description>Recent content in Modeling on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jul 2018 10:26:47 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/modeling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modeling for Concurrency</title>
      <link>https://tapoueh.org/blog/2018/07/modeling-for-concurrency/</link>
      <pubDate>Tue, 10 Jul 2018 10:26:47 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/modeling-for-concurrency/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue to dive in PostgreSQL Concurrency. Last week&amp;rsquo;s article
&lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt; was a
primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did last week,
in particular the database modeling for a &lt;em&gt;tweet&lt;/em&gt; like application. After
having had all the characters from Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt;
tweet their own lines in our database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data
Modification Language&lt;/a&gt;, it&amp;rsquo;s time for them
to do some actions on the tweets: likes and retweet.&lt;/p&gt;

&lt;p&gt;Of course, we&amp;rsquo;re going to put concurrency to the test, so we&amp;rsquo;re going to
have to handle very very popular tweets from the play!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plpgsql on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/tags/plpgsql/</link>
    <description>Recent content in Plpgsql on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Nov 2010 16:45:00 +0100</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/plpgsql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dynamic Triggers in PLpgSQL</title>
      <link>https://tapoueh.org/blog/2010/11/dynamic-triggers-in-plpgsql/</link>
      <pubDate>Wed, 24 Nov 2010 16:45:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/11/dynamic-triggers-in-plpgsql/</guid>
      <description>You certainly know that implementing dynamic triggers in PLpgSQL is impossible. But I had a very bad night, being up from as soon as 3:30 am today, so that when a developer asked me about reusing the same trigger function code from more than one table and for a dynamic column name, I didn&amp;rsquo;t remember about it being impossible.
Here&amp;rsquo;s what happens in such cases, after a long time on the problem (yes, overall, that&amp;rsquo;s a slow day).</description>
    </item>
    
    <item>
      <title>Introducing Extensions</title>
      <link>https://tapoueh.org/blog/2010/10/introducing-extensions/</link>
      <pubDate>Thu, 21 Oct 2010 13:45:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/10/introducing-extensions/</guid>
      <description>After reading Simon&amp;rsquo;s blog post, I can&amp;rsquo;t help but try to give some details about what it is exactly that I&amp;rsquo;m working on. As he said, there are several aspects to extensions in PostgreSQL, it all begins here: Chapter 35. Extending SQL.
It&amp;rsquo;s possible, and mostly simple enough, to add your own code or behavior to PostgreSQL, so that it will use your code and your semantics while solving user queries.</description>
    </item>
    
    <item>
      <title>Editing constants in constraints</title>
      <link>https://tapoueh.org/blog/2010/08/editing-constants-in-constraints/</link>
      <pubDate>Mon, 09 Aug 2010 14:45:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/08/editing-constants-in-constraints/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re using constants in some constraints here, for example in cases where
several servers are replicating to the same
&lt;em&gt;federating&lt;/em&gt; one: each origin
server has his own schema, and all is replicated nicely on the central host,
thanks to
&lt;a href=&#34;http://wiki.postgresql.org/wiki/Londiste_Tutorial#Federated_database&#34;&gt;Londiste&lt;/a&gt;, as you might have guessed already.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs and PostgreSQL</title>
      <link>https://tapoueh.org/blog/2010/07/emacs-and-postgresql/</link>
      <pubDate>Thu, 22 Jul 2010 09:30:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/07/emacs-and-postgresql/</guid>
      <description>Those are my two all times favorite Open Source Software. Or Free Software in the GNU sense of the world, as both the BSD and the GPL are labeled free there. Even if I prefer the The Debian Free Software Guidelines as a global definition and the WTFPL license. But that&amp;rsquo;s a digression.
I think that Emacs and PostgreSQL do share a lot in common. I&amp;rsquo;d begin with the documentation, which quality is amazing for both projects.</description>
    </item>
    
    <item>
      <title>Getting out of SQL_ASCII, part 2</title>
      <link>https://tapoueh.org/blog/2010/02/getting-out-of-sql_ascii-part-2/</link>
      <pubDate>Tue, 23 Feb 2010 17:30:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/02/getting-out-of-sql_ascii-part-2/</guid>
      <description>So, if you followed the previous blog entry, now you have a new database containing all the static tables encoded in UTF-8 rather than SQL_ASCII. Because if it was not yet the case, you now severely distrust this non-encoding.
Now is the time to have a look at properly encoding the live data, those stored in tables that continue to receive write traffic. The idea is to use the UPDATE facilities of PostgreSQL to tweak the data, and too fix the applications so as not to continue inserting badly encoded strings in there.</description>
    </item>
    
    <item>
      <title>Importing XML content from file</title>
      <link>https://tapoueh.org/blog/2009/02/importing-xml-content-from-file/</link>
      <pubDate>Thu, 05 Feb 2009 00:00:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2009/02/importing-xml-content-from-file/</guid>
      <description>The problem was raised this week on IRC and this time again I felt it would be a good occasion for a blog entry: how to load an XML file content into a single field?
The usual tool used to import files is COPY, but it&amp;rsquo;ll want each line of the file to host a text representation of a database tuple, so it doesn&amp;rsquo;t apply to the case at hand. RhodiumToad was online and offered the following code to solve the problem:</description>
    </item>
    
  </channel>
</rss>
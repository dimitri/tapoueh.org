<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backups on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>http://tapoueh.org/tags/backups/</link>
    <description>Recent content in Backups on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Sep 2013 10:39:00 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/tags/backups/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL data recovery</title>
      <link>http://tapoueh.org/blog/2013/09/postgresql-data-recovery/</link>
      <pubDate>Tue, 17 Sep 2013 10:39:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/09/postgresql-data-recovery/</guid>
      <description>The following story is only interesting to read if you like it when bad things happen, or if you don&amp;rsquo;t have a trustworthy backup policy in place. By trustworthy I mean that each backup you take must be tested with a test recovery job. Only tested backups will prove useful when you need them. So go read our Backup and Restore documentation chapter then learn how to setup Barman for handling physical backups and Point In Time Recovery.</description>
    </item>
    
    <item>
      <title>Implementing backups</title>
      <link>http://tapoueh.org/blog/2011/10/implementing-backups/</link>
      <pubDate>Wed, 12 Oct 2011 22:22:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/10/implementing-backups/</guid>
      <description>I&amp;rsquo;ve been asked about my opinion on backup strategy and best practices, and it so happens that I have some kind of an opinion on the matter.
I tend to think best practice here begins with defining properly the backup plan you want to implement. It&amp;rsquo;s quite a complex matter, so be sure to ask yourself about your needs: what do you want to be protected from?
The two main things to want to protect from are hardware loss (crash disaster, plane in the data center, fire, water flood, etc) and human error ( UPDATE without a where clause).</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ip4r on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/ip4r/</link>
    <description>Recent content in Ip4r on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 12:11:33 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/ip4r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Geolocation with PostgreSQL</title>
      <link>https://tapoueh.org/blog/2018/08/geolocation-with-postgresql/</link>
      <pubDate>Fri, 24 Aug 2018 12:11:33 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/08/geolocation-with-postgresql/</guid>
      <description>&lt;p&gt;We have loaded Open Street Map points of interests in the article &lt;a href=&#34;https://tapoueh.org/blog/2013/08/the-most-popular-pub-names/&#34;&gt;The Most
Popular Pub Names&lt;/a&gt; â€” which
compares PostgreSQL with MongoDB for simple geographical queries, and is
part of our &lt;a href=&#34;https://tapoueh.org/tags/extensions/&#34;&gt;PostgreSQL Extensions&lt;/a&gt; article series. In
today&amp;rsquo;s article, look at how to geolocalize an IP address and locate the
nearest pub, all within a single SQL query!&lt;/p&gt;

&lt;p&gt;For that, we are going to use the awesome
&lt;a href=&#34;https://github.com/RhodiumToad/ip4r&#34;&gt;ip4r&lt;/a&gt; extension from
&lt;a href=&#34;http://blog.rhodiumtoad.org.uk/&#34;&gt;RhodiumToad&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Worthwile Micro Optimisation</title>
      <link>https://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</link>
      <pubDate>Thu, 03 Oct 2013 22:10:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</guid>
      <description>&lt;p&gt;In our previous article about
&lt;a href=&#34;https://tapoueh.org/blog/2013/10/01-loading-geolocation-data&#34;&gt;Loading Geolocation Data&lt;/a&gt;, we did load some
data into PostgreSQL and saw the quite noticable impact of a user
transformation. As it happens, the function that did the integer to IP
representation was so naive as to scratch the micro optimisation itch of
some Common Lisp hackers: thanks a lot guys, in particular
&lt;a href=&#34;https://github.com/stassats&#34;&gt;stassats&lt;/a&gt; who came
up with the solution we&amp;rsquo;re seeing now.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loading Geolocation Data</title>
      <link>https://tapoueh.org/blog/2013/10/loading-geolocation-data/</link>
      <pubDate>Tue, 01 Oct 2013 16:52:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2013/10/loading-geolocation-data/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve been mentionning in the past already, I&amp;rsquo;m currently rewriting
pgloader from scratch in
&lt;a href=&#34;https://tapoueh.org/tags/common-lisp&#34;&gt;Common Lisp&lt;/a&gt;. In terms of
&lt;a href=&#34;http://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt; that&amp;rsquo;s akin
to declaring
&lt;em&gt;bankrupcy&lt;/em&gt;, which is both sad news and good news as there&amp;rsquo;s
suddenly new hope of doing it right this time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multi-Version support for Extensions</title>
      <link>https://tapoueh.org/blog/2011/06/multi-version-support-for-extensions/</link>
      <pubDate>Wed, 29 Jun 2011 09:50:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/06/multi-version-support-for-extensions/</guid>
      <description>We still have this problem to solve with extensions and their packaging. How to best organize things so that your extension is compatible with before 9.1 and 9.1 and following releases of PostgreSQL?
Well, I had to do it for the ip4r contribution, and I wanted the following to happen:
dpkg-deb: building package `postgresql-8.3-ip4r&#39; ... dpkg-deb: building package `postgresql-8.4-ip4r&#39; ... dpkg-deb: building package `postgresql-9.0-ip4r&#39; ... dpkg-deb: building package `postgresql-9.1-ip4r&#39; ...  And here&amp;rsquo;s a simple enough way to achieve that.</description>
    </item>
    
    <item>
      <title>Extensions in 9.1</title>
      <link>https://tapoueh.org/blog/2011/03/extensions-in-9.1/</link>
      <pubDate>Tue, 01 Mar 2011 16:30:00 +0100</pubDate>
      
      <guid>https://tapoueh.org/blog/2011/03/extensions-in-9.1/</guid>
      <description>If you&amp;rsquo;ve not been following closely you might have missed out on extensions integration. Well, Tom spent some time on the patches I&amp;rsquo;ve been preparing for the last 4 months. And not only did he commit most of the work but he also enhanced some parts of the code (better factoring) and basically finished it.
At the previous developer meeting his advice was to avoid putting too much into the very first version of the patch for it to stand its chances of being integrated, and while in the review process more than one major PostgreSQL contributor expressed worries about the size of the patch and the number of features proposed.</description>
    </item>
    
    <item>
      <title>Introducing Extensions</title>
      <link>https://tapoueh.org/blog/2010/10/introducing-extensions/</link>
      <pubDate>Thu, 21 Oct 2010 13:45:00 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2010/10/introducing-extensions/</guid>
      <description>After reading Simon&amp;rsquo;s blog post, I can&amp;rsquo;t help but try to give some details about what it is exactly that I&amp;rsquo;m working on. As he said, there are several aspects to extensions in PostgreSQL, it all begins here: Chapter 35. Extending SQL.
It&amp;rsquo;s possible, and mostly simple enough, to add your own code or behavior to PostgreSQL, so that it will use your code and your semantics while solving user queries.</description>
    </item>
    
  </channel>
</rss>
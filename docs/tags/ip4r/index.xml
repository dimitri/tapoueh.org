<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ip4r on Dimitri Fontaine, Expert PostgreSQL</title>
    <link>http://tapoueh.org/tags/ip4r/</link>
    <description>Recent content in Ip4r on Dimitri Fontaine, Expert PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Oct 2013 17:42:00 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/tags/ip4r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Geolocation with PostgreSQL</title>
      <link>http://tapoueh.org/blog/2013/10/geolocation-with-postgresql/</link>
      <pubDate>Wed, 09 Oct 2013 17:42:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/geolocation-with-postgresql/</guid>
      <description>Let&amp;rsquo;s get back to our Tour of Extensions that had to be kept aside for awhile with other concerns such as last chance PostgreSQL data recovery. Now that we have a data loading tool up to the task (read about it in the Loading Geolocation Data article) we&amp;rsquo;re going to be able to play with the awesome ip4r extension from RhodiumToad.
The name of the game is to put IP adresses on a map</description>
    </item>
    
    <item>
      <title>A Worthwile Micro Optimisation</title>
      <link>http://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</link>
      <pubDate>Thu, 03 Oct 2013 22:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/a-worthwile-micro-optimisation/</guid>
      <description>In our previous article about Loading Geolocation Data, we did load some data into PostgreSQL and saw the quite noticable impact of a user transformation. As it happens, the function that did the integer to IP representation was so naive as to scratch the micro optimisation itch of some Common Lisp hackers: thanks a lot guys, in particular stassats who came up with the solution we&amp;rsquo;re seeing now.
The previous code was a straight rewrite of the provided documentation in Common Lisp.</description>
    </item>
    
    <item>
      <title>Loading Geolocation Data</title>
      <link>http://tapoueh.org/blog/2013/10/loading-geolocation-data/</link>
      <pubDate>Tue, 01 Oct 2013 16:52:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/10/loading-geolocation-data/</guid>
      <description>As I&amp;rsquo;ve been mentionning in the past already, I&amp;rsquo;m currently rewriting pgloader from scratch in Common Lisp. In terms of technical debt that&amp;rsquo;s akin to declaring bankrupcy, which is both sad news and good news as there&amp;rsquo;s suddenly new hope of doing it right this time.
Let&amp;rsquo;s dive into the python to common lisp rewrite
Why rewriting pgloader? Several problems hinted me into doing something other than maintaining the code I had for pgloader.</description>
    </item>
    
    <item>
      <title>Multi-Version support for Extensions</title>
      <link>http://tapoueh.org/blog/2011/06/multi-version-support-for-extensions/</link>
      <pubDate>Wed, 29 Jun 2011 09:50:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/06/multi-version-support-for-extensions/</guid>
      <description>We still have this problem to solve with extensions and their packaging. How to best organize things so that your extension is compatible with before 9.1 and 9.1 and following releases of PostgreSQL?
Well, I had to do it for the ip4r contribution, and I wanted the following to happen:
dpkg-deb: building package `postgresql-8.3-ip4r&#39; ... dpkg-deb: building package `postgresql-8.4-ip4r&#39; ... dpkg-deb: building package `postgresql-9.0-ip4r&#39; ... dpkg-deb: building package `postgresql-9.1-ip4r&#39; ...  And here&amp;rsquo;s a simple enough way to achieve that.</description>
    </item>
    
    <item>
      <title>Extensions in 9.1</title>
      <link>http://tapoueh.org/blog/2011/03/extensions-in-9.1/</link>
      <pubDate>Tue, 01 Mar 2011 16:30:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/03/extensions-in-9.1/</guid>
      <description>If you&amp;rsquo;ve not been following closely you might have missed out on extensions integration. Well, Tom spent some time on the patches I&amp;rsquo;ve been preparing for the last 4 months. And not only did he commit most of the work but he also enhanced some parts of the code (better factoring) and basically finished it.
At the previous developer meeting his advice was to avoid putting too much into the very first version of the patch for it to stand its chances of being integrated, and while in the review process more than one major PostgreSQL contributor expressed worries about the size of the patch and the number of features proposed.</description>
    </item>
    
    <item>
      <title>Introducing Extensions</title>
      <link>http://tapoueh.org/blog/2010/10/introducing-extensions/</link>
      <pubDate>Thu, 21 Oct 2010 13:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/10/introducing-extensions/</guid>
      <description>After reading Simon&amp;rsquo;s blog post, I can&amp;rsquo;t help but try to give some details about what it is exactly that I&amp;rsquo;m working on. As he said, there are several aspects to extensions in PostgreSQL, it all begins here: Chapter 35. Extending SQL.
It&amp;rsquo;s possible, and mostly simple enough, to add your own code or behavior to PostgreSQL, so that it will use your code and your semantics while solving user queries.</description>
    </item>
    
  </channel>
</rss>
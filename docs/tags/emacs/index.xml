<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Dimitri Fontaine, Expert PostgreSQL</title>
    <link>http://tapoueh.org/tags/emacs/</link>
    <description>Recent content in Emacs on Dimitri Fontaine, Expert PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jan 2014 21:34:00 +0100</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>El-Get is now Rolling Releases</title>
      <link>http://tapoueh.org/blog/2014/01/el-get-is-now-rolling-releases/</link>
      <pubDate>Sat, 11 Jan 2014 21:34:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2014/01/el-get-is-now-rolling-releases/</guid>
      <description>The code of El-Get has been pretty stable for a long time now. About the whole set of patches against the 4.x series has been about bug fixing corner cases (sometimes cases that had nothing cornery about them too) and providing more and more recipes. That&amp;rsquo;s what you expect from a stable software, and that what allows us to move to a rolling releases model.
In practice, it means that you won&amp;rsquo;t have to suffer from using a badly maintained stable branch anymore.</description>
    </item>
    
    <item>
      <title>Emacs Muse meets Common Lisp</title>
      <link>http://tapoueh.org/blog/2013/07/emacs-muse-meets-common-lisp/</link>
      <pubDate>Mon, 08 Jul 2013 13:34:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/07/emacs-muse-meets-common-lisp/</guid>
      <description>This blog of mine is written in the very good Emacs Muse format, that I find much more friendly to writing articles than both org-mode and markdown-mode that I both use in a regular basis too. The main think that I like in Muse that those two others lack is the support for displaying images inline.
Here&amp;rsquo;s what it looks like to edit with Emacs Muse
The Muse publishing system The idea is that you edit .</description>
    </item>
    
    <item>
      <title>Emacs Conference</title>
      <link>http://tapoueh.org/blog/2013/04/emacs-conference/</link>
      <pubDate>Tue, 02 Apr 2013 09:56:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/04/emacs-conference/</guid>
      <description>Yes it did happen, for real, in London: the Emacs Conference. It was easter week-end. Yet the conference managed to have more than 60 people meet together and spend a full day talking about Emacs. If you weren&amp;rsquo;t there, a live stream was available and soon enough (wait for about two weeks) the video material will be published, as sacha is working on it.
The conference has been packed with awesome really.</description>
    </item>
    
    <item>
      <title>Emacs Conference</title>
      <link>http://tapoueh.org/blog/2013/03/emacs-conference/</link>
      <pubDate>Mon, 04 Mar 2013 13:58:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/03/emacs-conference/</guid>
      <description>The Emacs Conference is happening, it&amp;rsquo;s real, and it will take place at the end of this month in London. Check it out, and register at Emacs Conference Event Brite. It&amp;rsquo;s free and there&amp;rsquo;s still some availability.
It&amp;rsquo;s all about Emacs, and it rocks!
We have a great line-up for this conference, which makes me proud to be able to be there. If you&amp;rsquo;ve ever been paying attention when using Emacs then you&amp;rsquo;ve already heard those names: Sacha Chua is frequently blogging about how she manages to improve her workflow thanks to Emacs Lisp, John Wiegley is a proficient Emacs contributor maybe best known for his ledger Emacs Mode, then we have Luke Gorrie who hacked up SLIME among other things, we also have Nic Ferrier who is starting a revolution in how to use Emacs Lisp with elnode.</description>
    </item>
    
    <item>
      <title>Marking whole word</title>
      <link>http://tapoueh.org/blog/2013/02/marking-whole-word/</link>
      <pubDate>Fri, 08 Feb 2013 17:15:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2013/02/marking-whole-word/</guid>
      <description>I&amp;rsquo;ve discovered recently another Emacs facility that I since then use several times a day, and I wonder how I did without it before: C-M-SPC runs the command mark-sexp.
Well, mark-sexp apparently is related to the Sex Pistols
It&amp;rsquo;s pretty simple actually, when you have the point at the beginning of a word or an identifier (containing numbers, dashes, underscores and other punctuation signs), you can select the whole of it in a single key chord!</description>
    </item>
    
    <item>
      <title>M-x ack</title>
      <link>http://tapoueh.org/blog/2012/11/m-x-ack/</link>
      <pubDate>Thu, 22 Nov 2012 17:36:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/11/m-x-ack/</guid>
      <description>I&amp;rsquo;ve been asked about how to integrate the ack tool (you know, the one that is better than grep) into Emacs today. Again. And I just realized that I didn&amp;rsquo;t blog about my solution. That might explain why I keep getting asked about it after all&amp;hellip;
So here it is, M-x ack:
;;; dim-ack.el --- Dimitri Fontaine ;; ;; http://stackoverflow.com/questions/2322389/ack-does-not-work-when-run-from-grep-find-in-emacs-on-windows (defcustom ack-command (or (executable-find &amp;quot;ack&amp;quot;) (executable-find &amp;quot;ack-grep&amp;quot;)) &amp;quot;Command to use to call ack, e.</description>
    </item>
    
    <item>
      <title>About Vimgolf</title>
      <link>http://tapoueh.org/blog/2012/11/about-vimgolf/</link>
      <pubDate>Sun, 11 Nov 2012 20:52:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/11/about-vimgolf/</guid>
      <description>Following some tweet I found myself desultory watching an episode of the awesome VimGolf in Emacs video series by Tim Visher. Those series are about picking some challenge from vimgolf and implementing it with our favorite editor instead. Because Emacs Rocks guys.
   
Let me tell you upfront that I really dislike the whole idea of the vim golf challenge. I&amp;rsquo;ve been a user of both Emacs and Vim for many years, and finally decided to switch to living in Emacs; or if you prefer, climbing my way up from level 2 as in The Levels Of Emacs Proficiency.</description>
    </item>
    
    <item>
      <title>Editing SQL</title>
      <link>http://tapoueh.org/blog/2012/11/editing-sql/</link>
      <pubDate>Tue, 06 Nov 2012 09:55:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/11/editing-sql/</guid>
      <description>It&amp;rsquo;s hard to read my blog yet not know I&amp;rsquo;m using Emacs. It really is a great tool and has a lot to compare to PostgreSQL in terms of extensibility, documentation quality and community. And there&amp;rsquo;s even a native implementation of the PostgreSQL Protocol written in Emacs Lisp.
   
One of the things where Emacs really shines is that interactive development environment you get when working on some Emacs Lisp code.</description>
    </item>
    
    <item>
      <title>El-Get 4.1 is out</title>
      <link>http://tapoueh.org/blog/2012/08/el-get-4.1-is-out/</link>
      <pubDate>Tue, 28 Aug 2012 11:43:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/08/el-get-4.1-is-out/</guid>
      <description>Please welcome the new stable version of El-Get, the much awaited version 4.1 has now been branched for your pleasure. It&amp;rsquo;s packed with lots of features to make your life easy, comes with a Info documentation book and even has a logo. That&amp;rsquo;s no joke, I found one, at least:
Why El-Get is relevant Emacs 24.1 is the first release that includes package.el, and it even allows the user to setup several sources where to fetch packages.</description>
    </item>
    
    <item>
      <title>M-x recompile</title>
      <link>http://tapoueh.org/blog/2012/06/m-x-recompile/</link>
      <pubDate>Fri, 01 Jun 2012 18:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/06/m-x-recompile/</guid>
      <description>A friend of mine just asked me for advice to tweak some Emacs features, and I think that&amp;rsquo;s really typical of using Emacs: rather than getting used to the way things are shipped to you, when using Emacs, you start wanting to adapt the tools to the way you want things to be working instead. And you can call that the awesome!
In this case we&amp;rsquo;re talking about the M-x compile and M-x recompile functions.</description>
    </item>
    
    <item>
      <title>Battle Language à la Marmite</title>
      <link>http://tapoueh.org/blog/2012/03/battle-language-%C3%A0-la-marmite/</link>
      <pubDate>Thu, 01 Mar 2012 14:49:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2012/03/battle-language-%C3%A0-la-marmite/</guid>
      <description>J&amp;rsquo;ai eu la chance hier soir de participer à la Battle Language à la Marmite, où j&amp;rsquo;avais proposé de parler de Emacs Lisp, proposition qui s&amp;rsquo;est transformée en porte-étendard de la grande famille Lisp. J&amp;rsquo;ai utilisé avec plaisir certains contenu de Lisperati dans ma présentation et je vous recommande le détour sur ce site !
   
J&amp;rsquo;ai dans cette présentation très rapide (5 minutes seulement) mentionné l&amp;rsquo;approche axiomatique de John McCarthy lorsqu&amp;rsquo;il a découvert le language, on peut en lire un peu plus sur le site de Paul Graham et son article The Roots of Lisp et le code associé, une implémentation du LISP de McCarthy en common lisp.</description>
    </item>
    
    <item>
      <title>el-get-3.1</title>
      <link>http://tapoueh.org/blog/2011/09/el-get-3.1/</link>
      <pubDate>Fri, 16 Sep 2011 14:13:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/09/el-get-3.1/</guid>
      <description>The el-get project releases its new stable version, 3.1. This new release fixes bugs, add a host of new recipes (we have 420 of them and counting) and some nice new features too. You really want to upgrade.
New features Among the features you will find dependencies management and M-x el-get-list-packages, that you should try as soon as possible. Of course, don&amp;rsquo;t miss M-x el-get-self-update that eases the process somehow.</description>
    </item>
    
    <item>
      <title>el-get-list-packages</title>
      <link>http://tapoueh.org/blog/2011/08/el-get-list-packages/</link>
      <pubDate>Thu, 18 Aug 2011 18:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/el-get-list-packages/</guid>
      <description>From the first days of el-get is was quite clear for me that we would reach a point where users would want a nice listing including descriptions of the packages, and a major mode allowing you to select packages to install, remove and update. It was also quite clear that I was not much interested into doing it myself, even if I would appreciate having it done.
Well, the joy of Open Source &amp;amp; Free Software (pick your own poison).</description>
    </item>
    
    <item>
      <title>Emacs Startup</title>
      <link>http://tapoueh.org/blog/2011/08/emacs-startup/</link>
      <pubDate>Sat, 06 Aug 2011 14:58:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/08/emacs-startup/</guid>
      <description>Using Emacs we get to manage a larger and larger setup file (either ~/.emacs or ~/.emacs.d/init.el), sometime with lots of dependencies, and some sub-files thanks to the load function or the provide and require mechanism.
Some users are even starting Emacs often enough for the startup time to be a concern. With an emacs-uptime (yes it&amp;rsquo;s a command, you can M-x emacs-uptime) of days to weeks ( 10 days, 17 hours, 45 minutes, 34 seconds as of this writing), it&amp;rsquo;s not something I really care about much.</description>
    </item>
    
    <item>
      <title>Emacs ANSI colors</title>
      <link>http://tapoueh.org/blog/2011/07/emacs-ansi-colors/</link>
      <pubDate>Fri, 29 Jul 2011 10:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/emacs-ansi-colors/</guid>
      <description>Emacs comes with a pretty good implementation of a terminal emulator, M-x term. Well not that good actually, but given what I use it for, it&amp;rsquo;s just what I need. Particulary if you add to that my cssh tool, so that connecting with ssh to a remote host is just a =C-= runs the command cssh-term-remote-open away, and completes on the host name thanks to ~/.ssh/known_hosts.
Now, a problem that I still had to solve was the colors used in the terminal.</description>
    </item>
    
    <item>
      <title>Emacs Cheat Sheet</title>
      <link>http://tapoueh.org/blog/2011/07/emacs-cheat-sheet/</link>
      <pubDate>Wed, 20 Jul 2011 10:44:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/emacs-cheat-sheet/</guid>
      <description>I stumbled upon the following cheat sheet for Emacs yesterday, and it&amp;rsquo;s worth sharing. I already learnt or discovered again some nice default chords, like for example C-x C-o runs the command delete-blank-lines and C-M-o runs the command split-line. I guess I will use the later one a lot.
  Hope you&amp;rsquo;ll like it!</description>
    </item>
    
    <item>
      <title>Elisp Breadcrumbs</title>
      <link>http://tapoueh.org/blog/2011/07/elisp-breadcrumbs/</link>
      <pubDate>Thu, 14 Jul 2011 18:44:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/elisp-breadcrumbs/</guid>
      <description>A breadcrumb is a navigation aid. I just added one to this website, so that it gets easier to browse from any article to its local and parents indexes and back to /dev/dim, the root webpage of this site.
As it was not that much work to implement, here&amp;rsquo;s the whole of it:
;;; ;;; Breadcrumb support ;;; (defun tapoueh-breadcrumb-to-current-page () &amp;quot;Return a list of (name . link) from the index root page to current one&amp;quot; (let* ((current (muse-current-file)) (cwd (file-name-directory current)) (project (muse-project-of-file current)) (root (muse-style-element :path (caddr project))) (path (tapoueh-path-to-root)) (dirs (split-string (file-relative-name current root) &amp;quot;/&amp;quot;))) ;; (&amp;quot;blog&amp;quot; &amp;quot;2011&amp;quot; &amp;quot;07&amp;quot; &amp;quot;13-back-from-char11.</description>
    </item>
    
    <item>
      <title>Muse setup revised</title>
      <link>http://tapoueh.org/blog/2011/07/muse-setup-revised/</link>
      <pubDate>Tue, 05 Jul 2011 19:55:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/07/muse-setup-revised/</guid>
      <description>Most of you are probably reading my posts directly in their RSS reader tools (mine is gnus thanks to the Gwene service), so you probably missed it, but I just pushed a whole new version of my website, still using Emacs Muse as the engine.
My setup is tentatively called tapoueh.el and browsable online. It consists of some tweaks on top of Muse, so that I can enjoy tags and proper rss support.</description>
    </item>
    
    <item>
      <title>Don&#39;t be afraid of &#39;cl</title>
      <link>http://tapoueh.org/blog/2011/06/dont-be-afraid-of-cl/</link>
      <pubDate>Mon, 20 Jun 2011 00:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/06/dont-be-afraid-of-cl/</guid>
      <description>In this blog article, you&amp;rsquo;re shown a quite long function that loop through your buffers to find out if any of them is associated with a file whose full name includes &amp;quot;projects&amp;quot;. Well, you should not be afraid of using cl:
(require &#39;cl) (loop for b being the buffers when (string-match &amp;quot;projects&amp;quot; (or (buffer-file-name b) &amp;quot;&amp;quot;)) return t)  If you want to collect the list of buffers whose name matches your test, then replace return t by collect b and you&amp;rsquo;re done.</description>
    </item>
    
    <item>
      <title>el-get 2.2</title>
      <link>http://tapoueh.org/blog/2011/05/el-get-2.2/</link>
      <pubDate>Thu, 26 May 2011 12:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/05/el-get-2.2/</guid>
      <description>We&amp;rsquo;ve spotted a little too late for our own taste a discrepancy in the source tree: a work in progress patch landed in git just before to release el-get stable. So we cleaned the tree (thanks again Julien), branched a stable maintenance tree, and released 2.2 from there.
You&amp;rsquo;re back to enjoying el-get :)</description>
    </item>
    
    <item>
      <title>el-get 2.1</title>
      <link>http://tapoueh.org/blog/2011/05/el-get-2.1/</link>
      <pubDate>Thu, 26 May 2011 10:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/05/el-get-2.1/</guid>
      <description>Current el-get status is stable, ready for daily use and packed with extra features that make life easier. There are some more things we could do, as always, but they will be about smoothing things further.
Latest released version el-get version 2.1 is available, with a boatload of features, including autoloads support, byte-compiling in an external clean room Emacs instance, custom support, lazy initialisation support (defering all init functions to eval-after-load), and multi repositories ELPA support.</description>
    </item>
    
    <item>
      <title>Mailq modeline display</title>
      <link>http://tapoueh.org/blog/2011/05/mailq-modeline-display/</link>
      <pubDate>Thu, 05 May 2011 14:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/05/mailq-modeline-display/</guid>
      <description>If you&amp;rsquo;ve not been following along, you might have missed it: it appears to me that even today, in 2011, mail systems work much better when setup the old way. Meaning with a local MTA for outgoing mail. With some niceties, such as sender dependent relayhost maps.
That&amp;rsquo;s why I needed M-x mailq to display the mail queue and have some easy shortcuts in order to operate it (mainly f runs the command mailq-mode-flush, but per site and per id delivery are useful too).</description>
    </item>
    
    <item>
      <title>Emacs and PostgreSQL, PL line numbering</title>
      <link>http://tapoueh.org/blog/2011/04/emacs-and-postgresql-pl-line-numbering/</link>
      <pubDate>Sat, 23 Apr 2011 10:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/04/emacs-and-postgresql-pl-line-numbering/</guid>
      <description>A while ago I&amp;rsquo;ve been fixing and publishing pgsql-linum-format separately. That allows to number PL/whatever code lines when editing from Emacs, and it&amp;rsquo;s something very useful to turn on when debugging.
The carrets on the fringe in the emacs window are the result of (setq-default indicate-buffer-boundaries &#39;left) and here it&amp;rsquo;s just overloading the image somehow. But the idea is to just M-x linum-mode when you need it, at least that&amp;rsquo;s my usage of it.</description>
    </item>
    
    <item>
      <title>Emacs Kicker</title>
      <link>http://tapoueh.org/blog/2011/04/emacs-kicker/</link>
      <pubDate>Fri, 15 Apr 2011 21:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/04/emacs-kicker/</guid>
      <description>Following up on the very popular emacs-starter-kit, I&amp;rsquo;m now proposing the emacs-kicker. It&amp;rsquo;s about the .emacs file you&amp;rsquo;ve seen in older posts here, which I maintain for some colleagues. After all, if they find it useful, some more people might to, so I&amp;rsquo;ve decided to publish it.
What you&amp;rsquo;ll find is a very simple 128 lines Emacs user init file, based on el-get for external packages. A not so random selection of those is used, here&amp;rsquo;s the list when you hide some details:</description>
    </item>
    
    <item>
      <title>desktop-mode and readahead</title>
      <link>http://tapoueh.org/blog/2011/02/desktop-mode-and-readahead/</link>
      <pubDate>Wed, 23 Feb 2011 16:45:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/02/desktop-mode-and-readahead/</guid>
      <description>I&amp;rsquo;m using Desktop Save Mode so that Emacs knows to open again all the buffers I&amp;rsquo;ve been using. That goes quite well with how often I start Emacs, that is once a week or once a month. Now, M-x ibuffer last line is as following:
718 buffers 19838205 668 files, 15 processes  That means that at startup, Emacs will load that many files. In order not to have to wait until it&amp;rsquo;s done doing so, I&amp;rsquo;ve setup things this way:</description>
    </item>
    
    <item>
      <title>Starting afresh with el-get</title>
      <link>http://tapoueh.org/blog/2011/01/starting-afresh-with-el-get/</link>
      <pubDate>Tue, 11 Jan 2011 16:20:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/01/starting-afresh-with-el-get/</guid>
      <description>It so happens that a colleague of mine wanted to start using Emacs but couldn&amp;rsquo;t get to it. He insists on having proper color themes in all applications and some sensible defaults full of nifty add-ons everywhere, and didn&amp;rsquo;t want to have to learn that much about Emacs and Emacs Lisp to get started. I&amp;rsquo;m not even sure that he will Take the Emacs tour.
You would tell me that there&amp;rsquo;s nothing we can do for so unfriendly users.</description>
    </item>
    
    <item>
      <title>el-get 1.1, with 174 recipes</title>
      <link>http://tapoueh.org/blog/2010/12/el-get-1.1-with-174-recipes/</link>
      <pubDate>Mon, 20 Dec 2010 16:45:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/12/el-get-1.1-with-174-recipes/</guid>
      <description>Yes, you read it well, el-get currently features 174 recipes, and is now reaching the 1.1 release. The reason for this release is mainly that I have two big chunks of code to review and the current code has been very stable for awhile. It seems better to do a release with the stable code that exists now before to shake it this much. If you&amp;rsquo;re wondering when to jump in the water and switch to using el-get, now is a pretty good time.</description>
    </item>
    
    <item>
      <title>el-get reaches 1.0</title>
      <link>http://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</link>
      <pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</guid>
      <description>It&amp;rsquo;s been a week since the last commits in the el-get repository, and those were all about fixing and adding recipes, and about notifications. Nothing like core plumbing you see. Also, 0.9 was released on 2010-08-24 and felt pretty complete already, then received lots of improvements. It&amp;rsquo;s high time to cross the line and call it 1.0!
Now existing users will certainly just be moderatly happy to see the tool reach that version number, depending whether they think more about the bugs they want to see fixed (ftp is supported, only called http) and the new features they want to see in ( info documentation) or more about what el-get does for them already today&amp;hellip;</description>
    </item>
    
    <item>
      <title>Regexp performances and Finite Automata</title>
      <link>http://tapoueh.org/blog/2010/09/regexp-performances-and-finite-automata/</link>
      <pubDate>Sun, 26 Sep 2010 21:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/09/regexp-performances-and-finite-automata/</guid>
      <description>The major reason why I dislike perl so much, and ruby too, and the thing I&amp;rsquo;d want different in the Emacs Lisp API so far is how they set developers mind into using regexp. You know the quote, don&amp;rsquo;t you?
 Some people, when confronted with a problem, think “I know, I&amp;rsquo;ll use regular expressions.” Now they have two problems.
 That said, some situations require the use of regexp — or are so much simpler to solve using them than the maintenance hell you&amp;rsquo;re building here ain&amp;rsquo;t that big a drag.</description>
    </item>
    
    <item>
      <title>switch-window reaches 0.8</title>
      <link>http://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</guid>
      <description>I wanted to play with the idea of using the whole keyboard for my switch-window utility, but wondered how to get those keys in the right order and all. Finally found quail-keyboard-layout which seems to exists for such uses, as you can see:
(loop with layout = (split-string quail-keyboard-layout &amp;quot;&amp;quot;) for row from 1 to 4 collect (loop for col from 1 to 12 (&amp;quot;q&amp;quot; &amp;quot;w&amp;quot; &amp;quot;e&amp;quot; &amp;quot;r&amp;quot; &amp;quot;t&amp;quot; &amp;quot;y&amp;quot; &amp;quot;u&amp;quot; &amp;quot;i&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;) (&amp;quot;a&amp;quot; &amp;quot;s&amp;quot; &amp;quot;d&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;;&amp;quot; &amp;quot;&#39;&amp;quot; &amp;quot;\\&amp;quot;) (&amp;quot;z&amp;quot; &amp;quot;x&amp;quot; &amp;quot;c&amp;quot; &amp;quot;v&amp;quot; &amp;quot;b&amp;quot; &amp;quot;n&amp;quot; &amp;quot;m&amp;quot; &amp;quot;,&amp;quot; &amp;quot;.</description>
    </item>
    
    <item>
      <title>Want to share your recipes?</title>
      <link>http://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</link>
      <pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</guid>
      <description>Yes, that&amp;rsquo;s another el-get related entry. It seems to take a lot of my attention these days. After having setup the git repository so that you can update el-get from within itself (so that it&amp;rsquo;s self-contained), the next logical step is providing recipes.
By that I mean that el-get-sources entries will certainly look a lot alike between a user and another. Let&amp;rsquo;s take the el-get entry itself:
(:name el-get :type git :url &amp;quot;git://github.</description>
    </item>
    
    <item>
      <title>Happy Numbers</title>
      <link>http://tapoueh.org/blog/2010/08/happy-numbers/</link>
      <pubDate>Mon, 30 Aug 2010 11:00:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/happy-numbers/</guid>
      <description>After discovering the excellent Gwene service, which allows you to subscribe to newsgroups to read RSS content ( blogs, planets, commits, etc), I came to read this nice article about Happy Numbers. That&amp;rsquo;s a little problem that fits well an interview style question, so I first solved it yesterday evening in Emacs Lisp as that&amp;rsquo;s the language I use the most those days.
 A happy number is defined by the following process.</description>
    </item>
    
    <item>
      <title>welcome el-get scratch installer</title>
      <link>http://tapoueh.org/blog/2010/08/welcome-el-get-scratch-installer/</link>
      <pubDate>Fri, 27 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/welcome-el-get-scratch-installer/</guid>
      <description>A very good remark from some users: installing and managing el-get should be simpler. They wanted both an easy install of the thing, and a way to be able to manage it afterwards (like, update the local copy against the authoritative source). So I decided it was high time for getting the code out of my ~/.emacs.d git repository and up to a public place: http://github.com/dimitri/el-get.
Then, I added some documentation (a README), and then, a *scratch* installer, following great ideas from ELPA.</description>
    </item>
    
    <item>
      <title>el-get news</title>
      <link>http://tapoueh.org/blog/2010/08/el-get-news/</link>
      <pubDate>Thu, 26 Aug 2010 16:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/el-get-news/</guid>
      <description>I&amp;rsquo;ve been receiving some requests for el-get, some of them even included a patch. So now there&amp;rsquo;s support for bzr, CSV and http-tar, augmenting the existing support for git, git-svn, apt-get, fink and ELPA formats.
Also, as the install and even the build are completely asynchronous — there&amp;rsquo;s a pending bugfix for the building, which is now using start-process-shell-command. The advantage of doing so is that you&amp;rsquo;re free to use Emacs as usual while el-get is having your piece of elisp code compiled, which can take time.</description>
    </item>
    
    <item>
      <title>el-get and dim-switch-window status update</title>
      <link>http://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</link>
      <pubDate>Mon, 09 Aug 2010 15:35:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/el-get-and-dim-switch-window-status-update/</guid>
      <description>Thanks to you readers of Planet Emacsen taking the time to try those pieces of emacs lisp found in my blog, and also the time to comment on them, some bugs have been fixed, and new releases appeared.
el-get had some typo kind of bug in its support for apt-get and fink packages, and I managed to break the elpa and http support when going all asynchronous by forgetting to update the call convention I&amp;rsquo;m using.</description>
    </item>
    
    <item>
      <title>el-get</title>
      <link>http://tapoueh.org/blog/2010/08/el-get/</link>
      <pubDate>Wed, 04 Aug 2010 22:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/el-get/</guid>
      <description>I&amp;rsquo;ve been using emacs for a long time, and a long time it took me to consider learning Emacs Lisp. Before that, I didn&amp;rsquo;t trust my level of understanding enough to be comfortable in managing my setup efficiently.
One of the main problems of setting up Emacs is that not only you tend to accumulate so many tricks from EmacsWiki and blog posts that your .emacs has to grow to a full ~/.</description>
    </item>
    
    <item>
      <title>dim-switch-window.el: fixes</title>
      <link>http://tapoueh.org/blog/2010/07/dim-switch-window.el-fixes/</link>
      <pubDate>Mon, 26 Jul 2010 11:55:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/dim-switch-window.el-fixes/</guid>
      <description>Thanks to amazing readers of planet emacsen, two annoyances of switch-window.el have already been fixed! The first is that handling of C-g isn&amp;rsquo;t exactly an option after all, and the other is that you want to avoid the buffer creation in the simple cases (1 or 2 windows only), because it&amp;rsquo;s the usual case.
I&amp;rsquo;ve received code to handle the second case, that I mostly merged. Thanks a lot guys, the new version is on emacswiki already!</description>
    </item>
    
    <item>
      <title>dim-switch-window.el</title>
      <link>http://tapoueh.org/blog/2010/07/dim-switch-window.el/</link>
      <pubDate>Sun, 25 Jul 2010 13:25:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/dim-switch-window.el/</guid>
      <description>So it&amp;rsquo;s Sunday and I&amp;rsquo;m thinking I&amp;rsquo;ll get into el-get sometime later. Now is the time to present dim-switch-window.el which implements a visual C-x o. I know of only one way to present a visual effect, and that&amp;rsquo;s with a screenshot:
So as you can see, it&amp;rsquo;s all about showing a big number in each window, tweaking each window&amp;rsquo;s name, and waiting till the user press one of the expected key — or timeout and stay on the same window as before C-x o.</description>
    </item>
    
    <item>
      <title>ClusterSSH gets dsh support</title>
      <link>http://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</link>
      <pubDate>Fri, 23 Jul 2010 22:20:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</guid>
      <description>If you don&amp;rsquo;t know about ClusterSSH, it&amp;rsquo;s a project that builds on M-x term and ssh to offer a nice and simple way to open remote terminals. It&amp;rsquo;s available in ELPA and developed at github cssh repository.
The default binding is C-= and asks for the name of the server to connect to, in the minibuffer, with completion. The host list used for the completion comes from tramp and is pretty complete, all the more if you&amp;rsquo;ve setup ~/.</description>
    </item>
    
    <item>
      <title>Emacs and PostgreSQL</title>
      <link>http://tapoueh.org/blog/2010/07/emacs-and-postgresql/</link>
      <pubDate>Thu, 22 Jul 2010 09:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/emacs-and-postgresql/</guid>
      <description>Those are my two all times favorite Open Source Software. Or Free Software in the GNU sense of the world, as both the BSD and the GPL are labeled free there. Even if I prefer the The Debian Free Software Guidelines as a global definition and the WTFPL license. But that&amp;rsquo;s a digression.
I think that Emacs and PostgreSQL do share a lot in common. I&amp;rsquo;d begin with the documentation, which quality is amazing for both projects.</description>
    </item>
    
    <item>
      <title>Emacs Muse hacking</title>
      <link>http://tapoueh.org/blog/2010/03/emacs-muse-hacking/</link>
      <pubDate>Thu, 04 Mar 2010 13:33:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/03/emacs-muse-hacking/</guid>
      <description>Now you know what piece of software is used to publish this blog. I really like it, the major mode makes it a great experience to be using this tool, and the fact that you produce the HTML and rsync it all from within Emacs ( C-c C-p then C-c C-r with some easy elisp code) is a big advantage as far as I&amp;rsquo;m concerned. No need to resort to shell and Makefile.</description>
    </item>
    
    <item>
      <title>pg_staging&#39;s bird view</title>
      <link>http://tapoueh.org/blog/2009/12/pg_stagings-bird-view/</link>
      <pubDate>Tue, 08 Dec 2009 12:04:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/12/pg_stagings-bird-view/</guid>
      <description>One of the most important feedback I got about the presentation of pgstaging were the lack of pictures, something like a bird-view of how you operate it. Well, thanks to ditaa and Emacs picture-mode here it is:
Hope you enjoy, it should not be necessary to comment much if I got to the point!
Of course I commited the text source file to the Git repository. The only problem I ran into is that ditaa defaults to ouputing a quite big right margin containing only white pixels, and that didn&amp;rsquo;t fit well, visually, in this blog.</description>
    </item>
    
    <item>
      <title>PGday.eu feedback</title>
      <link>http://tapoueh.org/blog/2009/12/pgday.eu-feedback/</link>
      <pubDate>Tue, 01 Dec 2009 16:45:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/12/pgday.eu-feedback/</guid>
      <description>At pgday there was this form you could fill to give speakers some feedback about their talks. And that&amp;rsquo;s a really nice way as a speaker to know what to improve. And as Magnus was searching a nice looking chart facility in python and I spoke about matplotlib, it felt like having to publish something.
Here is my try at some nice graphics. Well I&amp;rsquo;ll let you decide how nice the result is:</description>
    </item>
    
    <item>
      <title>Emacs Muse based publishing</title>
      <link>http://tapoueh.org/blog/2009/10/emacs-muse-based-publishing/</link>
      <pubDate>Tue, 06 Oct 2009 17:23:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/10/emacs-muse-based-publishing/</guid>
      <description>As you might have noticed, this little blog of mine is not compromising much and entirely maintained from Emacs. Until today, I had to resort to term to upload my publications, though, as I&amp;rsquo;ve been too lazy to hack up the tools integration for simply doing a single rsync command line. That was one time to many:
(defvar dim:muse-rsync-options &amp;quot;-avz&amp;quot; &amp;quot;rsync options&amp;quot;) (defvar dim:muse-rsync-source &amp;quot;~/dev/muse/out&amp;quot; &amp;quot;local path from where to rsync, with no ending /&amp;quot;) (defvar dim:muse-rsync-target &amp;quot;dim@tapoueh.</description>
    </item>
    
    <item>
      <title>Emacs is Twinkling here</title>
      <link>http://tapoueh.org/blog/2009/09/emacs-is-twinkling-here/</link>
      <pubDate>Thu, 24 Sep 2009 18:08:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/09/emacs-is-twinkling-here/</guid>
      <description>So you have a rolodex like database in your Emacs, or you have this phone number in a mail and you want to call it. It happens you have VoIP setup and you&amp;rsquo;re using Twinkle to make your calls. Maybe you&amp;rsquo;ll then find this function useful:
(defun twinkle-call-symbol-or-region () &amp;quot;Call the phone number at point (symbol seems good enough), or in region&amp;quot; (interactive) (shell-command-to-string (format &amp;quot;twinkle --cmd &#39;call %s&#39;&amp;quot; (replace-regexp-in-string &amp;quot;[^0-9+]&amp;quot; &amp;quot;&amp;quot; (if (use-region-p) (buffer-substring (region-beginning) (region-end)) (thing-at-point &#39;symbol))))))  It happens that symbol is better than word here because some phone numbers begin with +.</description>
    </item>
    
    <item>
      <title>Escreen integration</title>
      <link>http://tapoueh.org/blog/2009/09/escreen-integration/</link>
      <pubDate>Tue, 22 Sep 2009 23:04:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/09/escreen-integration/</guid>
      <description>After having used elscreen for a long time, I&amp;rsquo;m now a very happy user of escreen, which feels much better integrated and allows to have one ring of recently visited buffers per screen. Which is what you need when using a screen like feature, really.
At first, it seemed so good as not to require any tweaking, but soon enough I had to adapt it to my workflow. After all that&amp;rsquo;s exactly for being able to do this that I&amp;rsquo;m using emacs :)</description>
    </item>
    
    <item>
      <title>Follow-up on dim:mailrc-add-entry</title>
      <link>http://tapoueh.org/blog/2009/09/follow-up-on-dimmailrc-add-entry/</link>
      <pubDate>Mon, 07 Sep 2009 12:50:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/09/follow-up-on-dimmailrc-add-entry/</guid>
      <description>The function didn&amp;rsquo;t allow for using more than one mailrc file, which isn&amp;rsquo;t a good idea, so I&amp;rsquo;ve just added that. Oh and for gnus integration what I need is (add-hook &#39;message-mode-hook &#39;mail-abbrevs-setup) it seems&amp;hellip; so that if I type the alias it&amp;rsquo;ll get automatically expanded. And to be real lazy and avoid having to type in the entire alias, mail-abbrev-complete-alias to the rescue, assigned to some easy to reach keys.</description>
    </item>
    
    <item>
      <title>Improving ~/.mailrc usage</title>
      <link>http://tapoueh.org/blog/2009/09/improving-~/.mailrc-usage/</link>
      <pubDate>Mon, 07 Sep 2009 01:29:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/09/improving-~/.mailrc-usage/</guid>
      <description>So I&amp;rsquo;ve been adviced to use ~/.mailrc for keeping a basic address book in Emacs, for use within gnus for example. I had to resort to the manual to find out how to use the file aliases when I need them, that is when composing a mail. For the record, here&amp;rsquo;s what I had to do:
;; mails and aliases (add-hook &#39;mail-mode-hook &#39;mail-abbrevs-setup) (global-set-key (kbd &amp;quot;C-c @&amp;quot;) &#39;mail-abbrev-insert-alias)  That means I prefer hitting C-c @, then typing the alias in the minibuffer (with completion) and there after see the full mail address in my message-mode buffer.</description>
    </item>
    
    <item>
      <title>Some emacs nifties</title>
      <link>http://tapoueh.org/blog/2009/08/some-emacs-nifties/</link>
      <pubDate>Mon, 03 Aug 2009 15:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/08/some-emacs-nifties/</guid>
      <description>First, here&amp;rsquo;s a way to insert at current position the last message printed into the minibuffer&amp;hellip; well not exactly, in *Messages* buffer in fact. I was tired of doing it myself after invoking, e.g., M-x emacs-version.
;; print last message ;; current-message is already lost by the time this gets called (defun dim:previous-message (&amp;amp;optional nth) &amp;quot;get last line of *Message* buffer&amp;quot; (with-current-buffer (get-buffer &amp;quot;*Messages*&amp;quot;) (save-excursion (goto-char (point-max)) (setq nth (if nth nth 1)) (while (&amp;gt; nth 0) (previous-line) (setq nth (- nth 1))) (buffer-substring (line-beginning-position) (line-end-position))))) (defun dim:insert-previous-message (&amp;amp;optional nth) &amp;quot;insert last message of *Message* to current position&amp;quot; (interactive &amp;quot;p&amp;quot;) (insert (format &amp;quot;%s&amp;quot; (dim:previous-message nth)))) (global-set-key (kbd &amp;quot;C-c m&amp;quot;) &#39;dim:insert-previous-message)  Now I stumbled accross Planet Emacsen and saw this Emacs Utility Functions post, containing a version of duplicate-current-line that I didn&amp;rsquo;t like&amp;hellip; here&amp;rsquo;s mine:</description>
    </item>
    
    <item>
      <title>Useful emacs trick</title>
      <link>http://tapoueh.org/blog/2008/12/useful-emacs-trick/</link>
      <pubDate>Tue, 09 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2008/12/useful-emacs-trick/</guid>
      <description>Watch Kevin Kelly&amp;rsquo;s Talk here, it&amp;rsquo;s about trying to predict what the Internet will look like 5 thousands days from now.</description>
    </item>
    
    <item>
      <title>emacs-snapshot</title>
      <link>http://tapoueh.org/blog/2008/12/emacs-snapshot/</link>
      <pubDate>Mon, 08 Dec 2008 16:10:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2008/12/emacs-snapshot/</guid>
      <description>If you want to live on the bleeding edge, it&amp;rsquo;s easy enough to get a non existing release of GNU Emacs under debian sid, thanks to http://emacs.orebokech.com/.
The problem is that Emacs Muse is broken on emacs-snapshot, partly because of Htmlize which is unable to find the face fonts (I got (error &amp;quot;Invalid face&amp;quot;)), partly because of my configuration itself:
hunk ./dim-muse.el 22 - &#39;((&amp;quot;pgsql.tapoueh.org&amp;quot; $ - (,@(muse-project-alist-dirs &amp;quot;~/dev/muse/site&amp;quot;) $ + &#39;((&amp;quot;pgsql.</description>
    </item>
    
    <item>
      <title>new site, using new software</title>
      <link>http://tapoueh.org/blog/2008/12/new-site-using-new-software/</link>
      <pubDate>Sat, 06 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2008/12/new-site-using-new-software/</guid>
      <description>Oh and check out the skytools page too. Emacs Muse is so great a project that instead of just working on how to publish a website with this tool, I found myself editing a rather large document about londite.py.</description>
    </item>
    
    <item>
      <title>Emacs Muse powered blog</title>
      <link>http://tapoueh.org/blog/2008/12/emacs-muse-powered-blog/</link>
      <pubDate>Fri, 05 Dec 2008 00:00:00 +0100</pubDate>
      
      <guid>http://tapoueh.org/blog/2008/12/emacs-muse-powered-blog/</guid>
      <description>So finaly a blogging software for geeks exists?
 The problem with communication is that you think it happened.
 </description>
    </item>
    
  </channel>
</rss>
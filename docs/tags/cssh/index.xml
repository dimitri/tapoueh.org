<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cssh on Dimitri Fontaine, Expert PostgreSQL</title>
    <link>http://tapoueh.org/tags/cssh/</link>
    <description>Recent content in Cssh on Dimitri Fontaine, Expert PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2011 14:10:00 +0200</lastBuildDate>
    
	<atom:link href="http://tapoueh.org/tags/cssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mailq modeline display</title>
      <link>http://tapoueh.org/blog/2011/05/mailq-modeline-display/</link>
      <pubDate>Thu, 05 May 2011 14:10:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2011/05/mailq-modeline-display/</guid>
      <description>If you&amp;rsquo;ve not been following along, you might have missed it: it appears to me that even today, in 2011, mail systems work much better when setup the old way. Meaning with a local MTA for outgoing mail. With some niceties, such as sender dependent relayhost maps.
That&amp;rsquo;s why I needed M-x mailq to display the mail queue and have some easy shortcuts in order to operate it (mainly f runs the command mailq-mode-flush, but per site and per id delivery are useful too).</description>
    </item>
    
    <item>
      <title>el-get reaches 1.0</title>
      <link>http://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</link>
      <pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/10/el-get-reaches-1.0/</guid>
      <description>It&amp;rsquo;s been a week since the last commits in the el-get repository, and those were all about fixing and adding recipes, and about notifications. Nothing like core plumbing you see. Also, 0.9 was released on 2010-08-24 and felt pretty complete already, then received lots of improvements. It&amp;rsquo;s high time to cross the line and call it 1.0!
Now existing users will certainly just be moderatly happy to see the tool reach that version number, depending whether they think more about the bugs they want to see fixed (ftp is supported, only called http) and the new features they want to see in ( info documentation) or more about what el-get does for them already today&amp;hellip;</description>
    </item>
    
    <item>
      <title>Scratch that itch: M-x mailq</title>
      <link>http://tapoueh.org/blog/2010/09/scratch-that-itch-m-x-mailq/</link>
      <pubDate>Thu, 23 Sep 2010 09:30:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/09/scratch-that-itch-m-x-mailq/</guid>
      <description>Nowadays, most people would think that email is something simple, you just setup your preferred client (that&amp;rsquo;s called a MUA) with some information such as the smtp host you want it to talk to (that&amp;rsquo;s call a MTA and this one is your relayhost). Then there&amp;rsquo;s all the receiving mails part, and that&amp;rsquo;s smtp again on the server side. Then there&amp;rsquo;s how to get those mail, read them, flag them, manage them, and that&amp;rsquo;s better served by IMAP.</description>
    </item>
    
    <item>
      <title>switch-window reaches 0.8</title>
      <link>http://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/09/switch-window-reaches-0.8/</guid>
      <description>I wanted to play with the idea of using the whole keyboard for my switch-window utility, but wondered how to get those keys in the right order and all. Finally found quail-keyboard-layout which seems to exists for such uses, as you can see:
(loop with layout = (split-string quail-keyboard-layout &amp;quot;&amp;quot;) for row from 1 to 4 collect (loop for col from 1 to 12 (&amp;quot;q&amp;quot; &amp;quot;w&amp;quot; &amp;quot;e&amp;quot; &amp;quot;r&amp;quot; &amp;quot;t&amp;quot; &amp;quot;y&amp;quot; &amp;quot;u&amp;quot; &amp;quot;i&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;) (&amp;quot;a&amp;quot; &amp;quot;s&amp;quot; &amp;quot;d&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;;&amp;quot; &amp;quot;&#39;&amp;quot; &amp;quot;\\&amp;quot;) (&amp;quot;z&amp;quot; &amp;quot;x&amp;quot; &amp;quot;c&amp;quot; &amp;quot;v&amp;quot; &amp;quot;b&amp;quot; &amp;quot;n&amp;quot; &amp;quot;m&amp;quot; &amp;quot;,&amp;quot; &amp;quot;.</description>
    </item>
    
    <item>
      <title>Want to share your recipes?</title>
      <link>http://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</link>
      <pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/08/want-to-share-your-recipes/</guid>
      <description>Yes, that&amp;rsquo;s another el-get related entry. It seems to take a lot of my attention these days. After having setup the git repository so that you can update el-get from within itself (so that it&amp;rsquo;s self-contained), the next logical step is providing recipes.
By that I mean that el-get-sources entries will certainly look a lot alike between a user and another. Let&amp;rsquo;s take the el-get entry itself:
(:name el-get :type git :url &amp;quot;git://github.</description>
    </item>
    
    <item>
      <title>ClusterSSH gets dsh support</title>
      <link>http://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</link>
      <pubDate>Fri, 23 Jul 2010 22:20:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2010/07/clusterssh-gets-dsh-support/</guid>
      <description>If you don&amp;rsquo;t know about ClusterSSH, it&amp;rsquo;s a project that builds on M-x term and ssh to offer a nice and simple way to open remote terminals. It&amp;rsquo;s available in ELPA and developed at github cssh repository.
The default binding is C-= and asks for the name of the server to connect to, in the minibuffer, with completion. The host list used for the completion comes from tramp and is pretty complete, all the more if you&amp;rsquo;ve setup ~/.</description>
    </item>
    
    <item>
      <title>Some emacs nifties</title>
      <link>http://tapoueh.org/blog/2009/08/some-emacs-nifties/</link>
      <pubDate>Mon, 03 Aug 2009 15:15:00 +0200</pubDate>
      
      <guid>http://tapoueh.org/blog/2009/08/some-emacs-nifties/</guid>
      <description>First, here&amp;rsquo;s a way to insert at current position the last message printed into the minibuffer&amp;hellip; well not exactly, in *Messages* buffer in fact. I was tired of doing it myself after invoking, e.g., M-x emacs-version.
;; print last message ;; current-message is already lost by the time this gets called (defun dim:previous-message (&amp;amp;optional nth) &amp;quot;get last line of *Message* buffer&amp;quot; (with-current-buffer (get-buffer &amp;quot;*Messages*&amp;quot;) (save-excursion (goto-char (point-max)) (setq nth (if nth nth 1)) (while (&amp;gt; nth 0) (previous-line) (setq nth (- nth 1))) (buffer-substring (line-beginning-position) (line-end-position))))) (defun dim:insert-previous-message (&amp;amp;optional nth) &amp;quot;insert last message of *Message* to current position&amp;quot; (interactive &amp;quot;p&amp;quot;) (insert (format &amp;quot;%s&amp;quot; (dim:previous-message nth)))) (global-set-key (kbd &amp;quot;C-c m&amp;quot;) &#39;dim:insert-previous-message)  Now I stumbled accross Planet Emacsen and saw this Emacs Utility Functions post, containing a version of duplicate-current-line that I didn&amp;rsquo;t like&amp;hellip; here&amp;rsquo;s mine:</description>
    </item>
    
  </channel>
</rss>
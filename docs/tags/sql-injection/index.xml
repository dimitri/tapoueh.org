<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql Injection on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/sql-injection/</link>
    <description>Recent content in Sql Injection on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Aug 2018 16:17:00 -0700</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/sql-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preventing SQL Injections</title>
      <link>https://tapoueh.org/blog/2018/08/preventing-sql-injections/</link>
      <pubDate>Wed, 29 Aug 2018 16:17:00 -0700</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/08/preventing-sql-injections/</guid>
      <description>&lt;p&gt;An &lt;em&gt;SQL Injection&lt;/em&gt; is a security breach, one made famous by the &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;Exploits of
a Mom&lt;/a&gt; &lt;code&gt;xkcd&lt;/code&gt; comic episode in which we read about
&lt;em&gt;little Bobby Tables&lt;/em&gt;:&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;
        &lt;img src=&#34;https://tapoueh.org/img/exploits_of_a_mom.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;p&gt;PostgreSQL implements a protocol level facility to send the static SQL query
text separately from its dynamic arguments. An SQL injection happens when
the database server is mistakenly led to consider a dynamic argument of a
query as part of the query text. Sending those parts as separate entities
over the protocol means that SQL injection is no longer possible.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
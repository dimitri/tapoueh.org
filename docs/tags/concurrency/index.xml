<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on The Art of PostgreSQL</title>
    <link>https://tapoueh.org/tags/concurrency/</link>
    <description>Recent content in Concurrency on The Art of PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Aug 2018 11:49:02 +0300</lastBuildDate><atom:link href="https://tapoueh.org/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL Concurrency: an Article Series</title>
      <link>https://tapoueh.org/blog/2018/08/postgresql-concurrency-an-article-series/</link>
      <pubDate>Tue, 14 Aug 2018 11:49:02 +0300</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/08/postgresql-concurrency-an-article-series/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt; is a relational database management
system. It&amp;rsquo;s even the world&amp;rsquo;s most advanced open source one of them. As
such, as its core, Postgres solves concurrent access to a set of data and
maintains consistency while allowing concurrent operations.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://tapoueh.org/tags/concurrency/&#34;&gt;PostgreSQL Concurrency&lt;/a&gt; series of articles here
we did see several aspects of how to handle concurrent use cases of your
application design with PostgreSQL. The main thing to remember is that a
Database Management System first task is to handle concurrency access to the
data for you.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scheduled Data Processing: How to use cron?</title>
      <link>https://tapoueh.org/blog/2018/08/scheduled-data-processing-how-to-use-cron/</link>
      <pubDate>Wed, 01 Aug 2018 11:24:25 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/08/scheduled-data-processing-how-to-use-cron/</guid>
      <description>&lt;p&gt;A previous article in the &lt;a href=&#34;https://tapoueh.org/tags/concurrency&#34;&gt;PostgreSQL Concurrency&lt;/a&gt; series
covered how to manage concurrent retweets in an efficient way: in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing
and Caching&lt;/a&gt;, we learnt how to
maintain a cache right in your PostgreSQL database, using MATERIALIZED
VIEWS. We also had a look at how to take care of &lt;a href=&#34;https://tapoueh.org/blog/2018/07/batch-updates-and-concurrency/&#34;&gt;Batch Updates and
Concurrency&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While in the first case we are providing a solution to a technical problem
where we want to solve performance issues while keeping the same semantics,
in the second case we are actually implementing a part of the application&amp;rsquo;s
&lt;a href=&#34;https://tapoueh.org/blog/2017/06/sql-and-business-logic/&#34;&gt;Business Logic&lt;/a&gt; as a scheduled job.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article shows a modern technique to handle the scheduling of those
business oriented activities that are not tied to any user activity. When
thinking about it this way, you certainly don&amp;rsquo;t want to implement the
backbone of your business logic in a &lt;em&gt;shell script&lt;/em&gt; that&amp;rsquo;s directly
maintained in the production environment, do you?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Batch Updates and Concurrency</title>
      <link>https://tapoueh.org/blog/2018/07/batch-updates-and-concurrency/</link>
      <pubDate>Mon, 23 Jul 2018 22:45:43 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/batch-updates-and-concurrency/</guid>
      <description>&lt;p&gt;This article fits in the &lt;a href=&#34;https://tapoueh.org/tags/concurrency&#34;&gt;PostgreSQL Concurrency&lt;/a&gt; series,
where we installed a tweeter like application schema and had all the
characters from Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own
lines in our database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A previous article in the series covered how to manage concurrent retweets
in an efficient way: &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing and
Caching&lt;/a&gt;, where we learn how to
maintain a cache right in your PostgreSQL database, thanks for materialized
views. We even went as far as maintaining an &lt;em&gt;external&lt;/em&gt; cache in another
application layer using PostgreSQL
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-listen.html&#34;&gt;LISTEN&lt;/a&gt; and
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-notify.html&#34;&gt;NOTIFY&lt;/a&gt;
features and a Golang application.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article is going to address concurrency in the context of updating
data in a batch. This activity is quite common, as soon as your system is
connected to other systems either internally or with external providers.
While it&amp;rsquo;s pretty easy to ingest new data, and easy enough to update data
from an external source when nothing happens in your database, doing the
operation safely with concurrent activity is more complex. Once more though,
PostgreSQL comes with all the tooling you need to handle that situation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL LISTEN/NOTIFY</title>
      <link>https://tapoueh.org/blog/2018/07/postgresql-listen/notify/</link>
      <pubDate>Thu, 19 Jul 2018 12:58:21 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/postgresql-listen/notify/</guid>
      <description>&lt;p&gt;This article fits in the &lt;a href=&#34;https://tapoueh.org/tags/concurrency&#34;&gt;PostgreSQL Concurrency&lt;/a&gt; series,
where we installed a tweeter like application schema and had all the
characters from Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own
lines in our database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A previous article in the series covered how to manage concurrent retweets
in an efficient way: &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing and
Caching&lt;/a&gt;, where we learn how to
maintain a cache right in your PostgreSQL database, thanks for materialized
views.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article shows how to maintain an &lt;em&gt;external&lt;/em&gt; cache in another
application layer. In this article we are going to maintain an in-memory
cache in a Golang service, using PostgreSQL
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-listen.html&#34;&gt;LISTEN&lt;/a&gt; and
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-notify.html&#34;&gt;NOTIFY&lt;/a&gt;
features.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Event Based Processing</title>
      <link>https://tapoueh.org/blog/2018/07/postgresql-event-based-processing/</link>
      <pubDate>Mon, 16 Jul 2018 09:27:54 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/postgresql-event-based-processing/</guid>
      <description>&lt;p&gt;In the previous article of the series &lt;a href=&#34;https://tapoueh.org/blog/2018/07/modeling-for-concurrency/&#34;&gt;Modeling for
Concurrency&lt;/a&gt;, we saw how to model
your application for highly concurrent activity. It was a follow-up to the
article entitled &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, which
was a primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did in the
previous articles in our series. After having had all the characters from
Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own lines in our
database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;, and having had them like and
retweet a lot in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, we
saw how to manage concurrent retweets in an efficient way in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing and
Caching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we did implement in the previous article is a &lt;em&gt;cache&lt;/em&gt; system, all with
its necessary &lt;strong&gt;cache invalidation policy&lt;/strong&gt;. Sometimes though, the
processing of an &lt;em&gt;event&lt;/em&gt; needs to happen within the same transaction where
the event is registered in your system. PostgreSQL makes it possible to
maintain a summary table transactionally thanks to its
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-createtrigger.html&#34;&gt;trigger&lt;/a&gt;
support. Today, we&amp;rsquo;re going to dive in how to maintain a summary table with
triggers, and its impact on concurrency.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Computing and Caching</title>
      <link>https://tapoueh.org/blog/2018/07/computing-and-caching/</link>
      <pubDate>Fri, 13 Jul 2018 13:10:21 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/computing-and-caching/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue to dive in PostgreSQL Concurrency. In the previous article of
the series, &lt;a href=&#34;https://tapoueh.org/blog/2018/07/modeling-for-concurrency/&#34;&gt;Modeling for
Concurrency&lt;/a&gt;, we saw how to model
your application for highly concurrent activity. It was a follow-up to the
article entitled &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, which
was a primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did in the
previous articles in our series. After having had all the characters from
Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own lines in our
database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;, and having had them like a
retweet a lot in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, it&amp;rsquo;s
time to think about how to display our counters in an efficient way.&lt;/p&gt;

&lt;p&gt;In this article, we&amp;rsquo;re going to think about when we should compute results
and when we should cache them for instant retrieval, all within the SQL
tooling. The SQL tooling for handling cache is a &lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-creatematerializedview.html&#34;&gt;MATERIALIZED
VIEW&lt;/a&gt;,
and it comes with &lt;strong&gt;cache invalidation&lt;/strong&gt; routines, of course.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modeling for Concurrency</title>
      <link>https://tapoueh.org/blog/2018/07/modeling-for-concurrency/</link>
      <pubDate>Tue, 10 Jul 2018 10:26:47 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/modeling-for-concurrency/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue to dive in PostgreSQL Concurrency. Last week&amp;rsquo;s article
&lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt; was a
primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did last week,
in particular the database modeling for a &lt;em&gt;tweet&lt;/em&gt; like application. After
having had all the characters from Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt;
tweet their own lines in our database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data
Modification Language&lt;/a&gt;, it&amp;rsquo;s time for them
to do some actions on the tweets: likes and retweet.&lt;/p&gt;

&lt;p&gt;Of course, we&amp;rsquo;re going to put concurrency to the test, so we&amp;rsquo;re going to
have to handle very very popular tweets from the play!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Concurrency: Isolation and Locking</title>
      <link>https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/</link>
      <pubDate>Tue, 03 Jul 2018 13:30:13 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt; is a relational database management
system. It&amp;rsquo;s even the world&amp;rsquo;s most advanced open source one of them. As
such, as its core, Postgres solves concurrent access to a set of data and
maintains consistency while allowing concurrent operations.&lt;/p&gt;

&lt;p&gt;This article is a primer on PostgreSQL Isolation and Locking properties and
behaviors. You might be interested into the previous article in the series:
&lt;a href=&#34;https://tapoueh.org/blog/2018/06/postgresql-concurrency-data-modification-language/&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Concurrency: Data Modification Language</title>
      <link>https://tapoueh.org/blog/2018/06/postgresql-concurrency-data-modification-language/</link>
      <pubDate>Mon, 25 Jun 2018 09:58:53 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/06/postgresql-concurrency-data-modification-language/</guid>
      <description>PostgreSQL is a relational database management system. It&amp;rsquo;s even the world&amp;rsquo;s most advanced open source one of them. As such, as its core, Postgres solves concurrent access to a set of data and maintains consistency while allowing concurrent operations.
Postgres exposes its concurrency APIs in the SQL language, in particular in the DML parts of it: you can read the Data Manipulation Language chapter of the PostgreSQL docs for all the details.</description>
    </item>
    
  </channel>
</rss>

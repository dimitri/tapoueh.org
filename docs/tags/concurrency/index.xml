<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on Dimitri Fontaine, PostgreSQL Expert</title>
    <link>https://tapoueh.org/tags/concurrency/</link>
    <description>Recent content in Concurrency on Dimitri Fontaine, PostgreSQL Expert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jul 2018 09:27:54 +0200</lastBuildDate>
    
	<atom:link href="https://tapoueh.org/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL Event Based Processing</title>
      <link>https://tapoueh.org/blog/2018/07/postgresql-event-based-processing/</link>
      <pubDate>Mon, 16 Jul 2018 09:27:54 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/postgresql-event-based-processing/</guid>
      <description>&lt;p&gt;In the previous article of the series &lt;a href=&#34;https://tapoueh.org/blog/2018/07/modeling-for-concurrency/&#34;&gt;Modeling for
Concurrency&lt;/a&gt;, we saw how to model
your application for highly concurrent activity. It was a follow-up to the
article entitled &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, which
was a primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did in the
previous articles in our series. After having had all the characters from
Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own lines in our
database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;, and having had them like and
retweet a lot in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, we
saw how to manage concurrent retweets in an efficient way in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/computing-and-caching/&#34;&gt;Computing and
Caching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we did implement in the previous article is a &lt;em&gt;cache&lt;/em&gt; system, all with
its necessary &lt;strong&gt;cache invalidation policy&lt;/strong&gt;. Sometimes though, the
processing of an &lt;em&gt;event&lt;/em&gt; needs to happen within the same transaction where
the event is registered in your system. PostgreSQL makes it possible to
maintain a summary table transactionally thanks to its
&lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-createtrigger.html&#34;&gt;trigger&lt;/a&gt;
support. Today, we&amp;rsquo;re going to dive in how to maintain a summary table with
triggers, and its impact on concurrency.&lt;/p&gt;

&lt;hr /&gt;


&lt;figure class=&#34;right&#34;&gt;
    &lt;a href=&#34;https://masteringpostgresql.com&#34;&gt;
        &lt;img src=&#34;https://tapoueh.org/img/MasteringPostgreSQLinAppDev-Cover-th.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;p&gt;This article is extracted from my book &lt;a href=&#34;https://masteringpostgresql.com&#34;&gt;Mastering PostgreSQL in Application
Development&lt;/a&gt;, which teaches SQL to
developers so that they may replace thousands of lines of code with very
simple queries. The book has a full chapter about &lt;em&gt;Data Manipulation and
Concurrency Control&lt;/em&gt; in PostgreSQL, including caching with materialized
views, check it out!&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>Computing and Caching</title>
      <link>https://tapoueh.org/blog/2018/07/computing-and-caching/</link>
      <pubDate>Fri, 13 Jul 2018 13:10:21 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/computing-and-caching/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue to dive in PostgreSQL Concurrency. In the previous article of
the series, &lt;a href=&#34;https://tapoueh.org/blog/2018/07/modeling-for-concurrency/&#34;&gt;Modeling for
Concurrency&lt;/a&gt;, we saw how to model
your application for highly concurrent activity. It was a follow-up to the
article entitled &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, which
was a primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did in the
previous articles in our series. After having had all the characters from
Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt; tweet their own lines in our
database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;, and having had them like a
retweet a lot in &lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt;, it&amp;rsquo;s
time to think about how to display our counters in an efficient way.&lt;/p&gt;

&lt;p&gt;In this article, we&amp;rsquo;re going to think about when we should compute results
and when we should cache them for instant retrieval, all within the SQL
tooling. The SQL tooling for handling cache is a &lt;a href=&#34;https://www.postgresql.org/docs/current/static/sql-creatematerializedview.html&#34;&gt;MATERIALIZED
VIEW&lt;/a&gt;,
and it comes with &lt;strong&gt;cache invalidation&lt;/strong&gt; routines, of course.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modeling for Concurrency</title>
      <link>https://tapoueh.org/blog/2018/07/modeling-for-concurrency/</link>
      <pubDate>Tue, 10 Jul 2018 10:26:47 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/modeling-for-concurrency/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue to dive in PostgreSQL Concurrency. Last week&amp;rsquo;s article
&lt;a href=&#34;https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/&#34;&gt;PostgreSQL Concurrency: Isolation and
Locking&lt;/a&gt; was a
primer on PostgreSQL isolation and locking properties and behaviors.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s article takes us a step further and builds on what we did last week,
in particular the database modeling for a &lt;em&gt;tweet&lt;/em&gt; like application. After
having had all the characters from Shakespeare&amp;rsquo;s &lt;em&gt;A Midsummer Night&amp;rsquo;s Dream&lt;/em&gt;
tweet their own lines in our database in &lt;a href=&#34;https://tapoueh.org/blog/2018/06/PostgreSQL-DML.md&#34;&gt;PostgreSQL Concurrency: Data
Modification Language&lt;/a&gt;, it&amp;rsquo;s time for them
to do some actions on the tweets: likes and retweet.&lt;/p&gt;

&lt;p&gt;Of course, we&amp;rsquo;re going to put concurrency to the test, so we&amp;rsquo;re going to
have to handle very very popular tweets from the play!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Concurrency: Isolation and Locking</title>
      <link>https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/</link>
      <pubDate>Tue, 03 Jul 2018 13:30:13 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/07/postgresql-concurrency-isolation-and-locking/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt; is a relational database management
system. It&amp;rsquo;s even the world&amp;rsquo;s most advanced open source one of them. As
such, as its core, Postgres solves concurrent access to a set of data and
maintains consistency while allowing concurrent operations.&lt;/p&gt;

&lt;p&gt;This article is a primer on PostgreSQL Isolation and Locking properties and
behaviors. You might be interested into the previous article in the series:
&lt;a href=&#34;https://tapoueh.org/blog/2018/06/postgresql-concurrency-data-modification-language/&#34;&gt;PostgreSQL Concurrency: Data Modification
Language&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Concurrency: Data Modification Language</title>
      <link>https://tapoueh.org/blog/2018/06/postgresql-concurrency-data-modification-language/</link>
      <pubDate>Mon, 25 Jun 2018 09:58:53 +0200</pubDate>
      
      <guid>https://tapoueh.org/blog/2018/06/postgresql-concurrency-data-modification-language/</guid>
      <description>PostgreSQL is a relational database management system. It&amp;rsquo;s even the world&amp;rsquo;s most advanced open source one of them. As such, as its core, Postgres solves concurrent access to a set of data and maintains consistency while allowing concurrent operations.
Postgres exposes its concurrency APIs in the SQL language, in particular in the DML parts of it: you can read the Data Manipulation Language chapter of the PostgreSQL docs for all the details.</description>
    </item>
    
  </channel>
</rss>
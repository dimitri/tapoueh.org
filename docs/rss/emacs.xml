<?xml version="1.0" encoding="utf-8"?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
 <channel>
   <title>tail -f /dev/dim</title>
   <link>http://tapoueh.org/blog</link>
   <description>Dimitri Fontaine's blog</description>
   <language>en-us</language>
   <generator>Emacs Muse and Tapoueh's Common Lisp</generator>
   <atom:link href='http://tapoueh.org/rss/emacs.xml'
               rel='self'
              type='application/rss+xml' />

<item>
  <title>El-Get is now Rolling Releases
  </title>
  <link>http://tapoueh.org/blog/2014/01/11-el-get-rolling-release.html
  </link>
  <description><![CDATA[<p>The code of 
<a href='https://github.com/dimitri/el-get'>El-Get</a> has been pretty stable for a long time now. About the
whole set of patches against the 
<code>4.x</code> series has been about bug fixing corner
cases (sometimes cases that had nothing 
<em>cornery</em> about them too) and
providing more and more recipes. That's what you expect from a 
<em><strong>stable</strong></em>
software, and that what allows us to move to a 
<em>rolling releases</em> model.
</p><center><img src='http://tapoueh.org/images/el-get.big.png' /></center><p>In practice, it means that you won't have to suffer from using a badly
maintained 
<em>stable</em> branch anymore. The El-Get 
<em>scratch installer</em> is now
targetting the 
<em>master</em> branch of the git repository, and this branch is now
going to only accept either bug fixes or 
<em>proven</em> patches.
</p><p>In case something big and destabilizing is proposed, we will of course
consider doing a new release, after 5 comes 6. Meanwhile, enjoy your new
El-Get stable branch, it's officially the 
<em>master</em> one!
</p><blockquote><p>If you're currently using El-Get, make sure you're using the 
<em>master</em> branch
of the software, and upgrade to the 
<em>master</em> branch if needed. To check, run
<code>M-x el-get-cd RET el-get</code> then 
<code>M-! git branch</code>, you should see the name of the
current branch preceeded by a star. It should say 
<code>* master</code>. If not, consider
upgrading.
</p></blockquote><p>To upgrade El-Get to the master's branch, the simplest way might as well be
working with git here:
</p><pre><code>M-x el-get-cd RET el-get
M-! git checkout master
M-x el-get-self-update
</code></pre><p><em>(Restart Emacs and</em>) Enjoy El-Get Rolling Release!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sat, 11 Jan 2014 21:34:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2014/01/11-el-get-rolling-release.html</guid>
</item>

<item>
  <title>Emacs Muse meets Common Lisp
  </title>
  <link>http://tapoueh.org/blog/2013/07/08-Muse-blog-compiler.html
  </link>
  <description><![CDATA[<p>This blog of mine is written in the very good 
<a href='http://mwolson.org/projects/EmacsMuse.html'>Emacs Muse</a> format, that I find
much more friendly to writing articles than both 
<a href='http://orgmode.org/'>org-mode</a> and 
<a href='http://jblevins.org/projects/markdown-mode/'>markdown-mode</a>
that I both use in a regular basis too. The main think that I like in Muse
that those two others lack is the support for displaying images inline.
</p><center><img src='http://tapoueh.org/images/Emacs-Muse.png' /></center><center><em>Here's what it looks like to edit with Emacs Muse</em></center><h2>The Muse publishing system</h2><p>The idea is that you edit 
<code>.muse</code> files in Emacs then use a command to 
<em>publish</em>
your file to some format like HTML. You can also publish a whole project,
and then enjoy a fully static website that you can deploy on some URL.
</p><p>The drawback of using the Muse format here is to do with the associated
tooling. I didn't take time to study Muse Emacs Lisp sources and probably I
should have, as I found myself the need to add support for 
<em>tags</em> and per-tag
<em>rss</em> support. What I did then was using Muse provided 
<em>hooks</em> so that my code
gets run here and there.
</p><p>With my additions, though, publishing a single article took a painful time,
something around 30 seconds for the main page of it and then about as much
(sometimes more) to publish the project: previous and next articles
sections, tag files, rss files.
</p><h2>from Emacs Lisp to Common LIsp</h2><center><img src='http://tapoueh.org/images/lisp-is-different.jpg' /></center><center><em>and Common Lisp is different from Emacs Lisp</em></center><p>When I realized that my motivation to writing new blog articles was going so
low that I wasn't doing that anymore, I raised the priority of fixing my
blog setup enough so that I would actually do something about it. And then
decided it would actually be a good excuse for another 
<em>Common Lisp</em> project.
</p><p>It's available at 
<a href='http://git.tapoueh.org/?p=tapoueh.org.git;a=summary'>git.tapoueh.org</a> with my usual choice of licencing, the
<a href='http://www.wtfpl.net/'>WTFPL</a>.
</p><p>I've been using 
<a href='http://nikodemus.github.io/esrap/'>esrap</a> to write a Muse parser along with 
<a href='http://common-lisp.net/project/fiveam/'>5am</a> to test it
extensively. It turned out not an easy project to just parse the articles,
but thanks to 
<a href='http://weitz.de/cl-who/'>cl-who</a> (that stands for 
<code>with-html-output</code>) the output of the
parser is a very simple 
<em>nested list</em> data structure.
</p><p>In the 
<strong>Emacs Lisp</strong> Muse system there was a cool idea that you could embed
(compile time) dynamic sections of 
<code>&lt;lisp&gt;(code)&lt;/lisp&gt;</code> in the templates, so
I've kept that idea and implemented a 
<em>Server Side Include</em> facility.
</p><p>The idea has then been to build a dynamic website without any level of
caching at all so that anytime you reload a page its muse source file is
parsed and intermediate representation is produced. Then the 
<strong>SSI</strong> kicks with
adding the 
<em>header</em> and 
<em>footer</em> around the main article's body, and replacing
any embedded code calls with their results. Finally,
<code>with-html-output-to-string</code> is used to return an HTML string to the browser.
</p><p>With all that work happening at run-time, one would think that the
performances of the resulting solution would be awful. Well in fact not at
all, as you can see:
</p><pre><code>$ time curl -s http://localhost:8042/blog/2013/07/08-Muse-blog-compiler &gt; /dev/null
real	0m0.081s
</code></pre><p>And then some quick measurements of time spent to parse all the articles
I've ever published here:
</p><pre><code>TAPOUEH&gt; (time (length (find-blog-articles *blog-directory*
					   :parse-fn #&#039;muse-parse-article)))
Evaluation took:
  0.484 seconds of real time
  0.486381 seconds of total run time (0.415208 user, 0.071173 system)
  [ Run times consist of 0.089 seconds GC time, and 0.398 seconds non-GC time. ]
  100.41% CPU
  1,113,697,675 processor cycles
  206,356,848 bytes consed
  
181
</code></pre><p>So it takes about 
<code>80 ms</code> to render a full dynamic page. That's way better
than what I wanted to achieve!
</p><h2>the static compiler</h2><p>That said, we're talking about the ability to render about 
<code>12</code> pages per
second, which is not something acceptable as-is for production use. And
given the expected ratio of reads and writes, there's no good reason to
publish a dynamic website, so the next step here is to build a 
<em>static
website compiler</em>.
</p><p>And here's how it looks like now:
</p><pre><code>TAPOUEH&gt; (compile-articles)
parsed 199 docs in 0.627s
parsed chapeau of 172 blog articles in 0.114s
compiled the home page in 0.015s
compiled the tags cloud in 0.005s
compiled the blog archives page in 0.085s
compiled 199 documents in 12.333 secs
compiled 56 blog indexes in 1.721s
compiled 64 tag listings in 1.073s
compiled 6 rss feeds in 3.806s
compiled the sitemap in 0.021s
</code></pre><p>So it takes about 20 seconds to publish again the whole website. The reason
why it's ok for me not to optimize this yet is because I've also been
changing the CSS and HTML parts of the website, and each time the header or
the parser is changed, or even some SSI function's output, then I need to
compile the whole set of files anyway.
</p><h2>The <code>displaying-time</code> macro</h2><center><img src='http://tapoueh.org/images/lisplogo_fancy_256.png' /></center><p>While building this little Common Lisp project, I've added to my still very
little toolbelt a macro that I like. Here's how to use it:
</p><pre><code>(let* ((all-documents
	  (displaying-time (&quot;parsed ~d docs in ~ds~%&quot; (length result) timing)
	    (find-muse-documents)))
	 (blog-articles
	  (displaying-time (&quot;parsed chapeau of ~d blog articles in ~ds~%&quot;
			    (length result) timing)
	    (find-blog-articles *blog-directory*))))

    (displaying-time (&quot;compiled the home page in ~ds~%&quot; timing)
      (compile-home-page :documents blog-articles :verbose verbose))
    ...)
</code></pre><p>And here's the code I wrote to have this macro:
</p><pre><code>(defun elapsed-time-since (start)
  &quot;Return how many seconds ticked between START and now&quot;
  (/ (- (get-internal-real-time) start)
     internal-time-units-per-second))

(defmacro timing (&amp;body forms)
  &quot;return both how much real time was spend in body and its result&quot;
  (let ((start (gensym))
	(end (gensym))
	(result (gensym)))
    `(let* ((,start (get-internal-real-time))
	    (,result (progn ,@forms))
	    (,end (get-internal-real-time)))
       (values
	,result
	(float (/ (- ,end ,start) internal-time-units-per-second))))))

(defun replace-symbols-recursively (code symbols)
  &quot;Walk CODE to replace symbols as given in the SYMBOLS alist.&quot;
  (loop
     for s-exp in code
     when (listp s-exp) collect (replace-symbols-recursively s-exp symbols)
     else collect (if (symbolp s-exp)
		      (destructuring-bind (before . after)
			  (or (assoc s-exp symbols) (cons nil nil))
			(if before after s-exp))
		      s-exp)))

(defmacro displaying-time ((fmt &amp;rest bindings) &amp;body forms)
  &quot;display on *standard-output* how much time it took to execute body&quot;
  (let* ((result   (gensym))
	 (timing   (gensym))
	 (bindings
	  (replace-symbols-recursively bindings `((result . ,result)
						  (timing . ,timing)))))
    `(multiple-value-bind (,result ,timing)
	 (timing ,@forms)
       (format t ,fmt ,@bindings)
       ,result)))
</code></pre><p>Note that I already had the 
<code>timing</code> macro and just used it as is.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 08 Jul 2013 13:34:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2013/07/08-Muse-blog-compiler.html</guid>
</item>

<item>
  <title>Emacs Conference
  </title>
  <link>http://tapoueh.org/blog/2013/04/02-Emacs-Conference.html
  </link>
  <description><![CDATA[<p>Yes it did happen, for real, in London: the 
<a href='http://emacsconf.herokuapp.com/'>Emacs Conference</a>. It was easter
week-end. Yet the conference managed to have more than 60 people meet
together and spend a full day talking about 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a>. If you weren't there, a
live stream was available and soon enough (wait for about two weeks) the
video material will be published, as 
<a href='http://sachachua.com/blog/'>sacha</a> is working on it.
</p><center><img src='http://tapoueh.org/images/toplap-small.png' /></center><p>The conference has been packed with awesome really. Among the things that
I'm going home with are new thoughts, tricks and tips, and new modes to use
in Emacs.
</p><p>The main new though is all about learning to program. That's a problem space
in which I have a growing interest in, and the conference talk about 
<em>arxana</em>
showed that it should be possible to build an environment where you can
learn programming with the excuse of having fun with maths. And after
talking about music and its notation and 
<a href='http://www.lilypond.org/'>lilypond</a>, it should even be
possible to offer some interactive programming environment where not only
you can play music live as 
<a href='http://meta-ex.com/'>Meta-Ex</a> is doing, but where the other output of
your program would be the updated music scores.
</p><p>The main practical bits I'm going home with is 
<a href='http://www.foldr.org/~michaelw/projects/redshank'>redshank</a>, 
<em>A collection of
code-wrangling Emacs macros mostly geared towards Common Lisp, but some are
useful for other Lisp dialects, too</em>. That complements 
<a href='http://mumble.net/~campbell/emacs/paredit.el'>paredit</a> and allows you
to do some reformating very easily.
</p><p>Lastly, I'm back to giving the dark background environment a try now. I
think I prefer the contrast and richer color sets of the default Emacs color
theme, but the black window has some classy visual effect too. And with
<a href='https://github.com/jasonm23/emacs-mainline'>main-line</a> the effect is quite awesome!
</p><center><img src='http://tapoueh.org/images/Emacs-Tango-2-Main-Line.png' /></center><center><em>Look at that!</em></center>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 02 Apr 2013 09:56:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2013/04/02-Emacs-Conference.html</guid>
</item>

<item>
  <title>Emacs Conference
  </title>
  <link>http://tapoueh.org/blog/2013/03/04-Emacs-Conference.html
  </link>
  <description><![CDATA[<p>The 
<a href='http://emacsconf.herokuapp.com/'>Emacs Conference</a> is happening, it's real, and it will take place at the
end of this month in London. Check it out, and register at
<a href='http://emacsconf.eventbrite.co.uk/'>Emacs Conference Event Brite</a>. It's free and there's still some availability.
</p><center><img src='http://tapoueh.org/images/emacs-rocks-logo.png' /></center><center><em>It's all about Emacs, and it rocks!</em></center><p>We have a great line-up for this conference, which makes me proud to be able
to be there. If you've ever been paying attention when using 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> then
you've already heard those names: 
<a href='http://sachachua.com/blog/'>Sacha Chua</a> is frequently blogging about
how she manages to improve her workflow thanks to 
<a href='http://www.gnu.org/software/emacs/emacs-lisp-intro/'>Emacs Lisp</a>, 
<a href='https://github.com/jwiegley'>John Wiegley</a>
is a proficient Emacs contributor maybe best known for his 
<a href='https://github.com/ledger/ledger'>ledger</a> 
<em>Emacs
Mode</em>, then we have 
<a href='http://www.lukego.com/'>Luke Gorrie</a> who hacked up 
<a href='http://wingolog.org/archives/2006/01/02/slime'>SLIME</a> among other things, we
also have 
<a href='http://nic.ferrier.me.uk/'>Nic Ferrier</a> who is starting a revolution in how to use 
<em>Emacs Lisp</em>
with 
<a href='http://elnode.org/'>elnode</a>. And more! Including 
<a href='http://en.wikipedia.org/wiki/Steve_Yegge'>Steve Yegge</a>!
</p><center>See you there in London.</center>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 04 Mar 2013 13:58:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2013/03/04-Emacs-Conference.html</guid>
</item>

<item>
  <title>Marking whole word
  </title>
  <link>http://tapoueh.org/blog/2013/02/04-Emacs-mark-word.html
  </link>
  <description><![CDATA[<p>I've discovered recently another Emacs facility that I since then use
several times a day, and I wonder how I did without it before: 
<code>C-M-SPC runs
the command mark-sexp</code>.
</p><center><img src='http://tapoueh.org/images/sexp.gif' /></center><center><em>Well, <code>mark-sexp</code> apparently is related to the Sex Pistols</em></center><p>It's pretty simple actually, when you have the 
<em>point</em> at the beginning of a
word or an identifier (containing numbers, dashes, underscores and other
punctuation signs), you can select the 
<em>whole</em> of it in a single key chord!
</p><p>The best thing is that if you press the same key chord again, it will expand
to include the next expression. And that works in plain text and most
programming languages where I've tried it, which is not so much recently. It
does not depend that much on the programming language anyway.
</p><p>The full general solution here is to use something like 
<a href='https://github.com/magnars/expand-region.el'>expand region</a>, don't
miss the 
<a href='http://emacsrocks.com/e09.html'>Emacs Rocks Expand Region Episode</a>, it's less than 3 minutes and you
will want to install 
<em>expand-region</em> after that. For easy installing, of
course you are already using 
<a href='http://tapoueh.org/emacs/el-get.html'>el-get</a> right?
</p><p>Now, a friend just asked this morning how to select the 
<em>current word</em> even
when the the point is currently in the middle of it. Going manually back to
the beginning of it is no fun. I knew about 
<code>thing-at-point</code> and a little
about how it works, but didn't find anything readily made for that use case
(hint: it needs to be an 
<em>interactive</em> command).
</p><p>Here's what I came up with, then:
</p><pre><code>(defun mha:select-current-word ()
  &quot;Select the current word.&quot;
  (interactive)
  (beginning-of-thing &#039;symbol)
  (push-mark (point) nil t)
  (end-of-thing &#039;symbol)
  (exchange-point-and-mark))

(global-set-key (kbd &quot;C-S-M-SPC&quot;) &#039;mha:select-current-word)
</code></pre><p>I picked 
<code>C-M-S-SPC</code> not because it's the easiest way to invoke the new
command, but because to me it's a quite natural extension to the 
<code>C-M-SPC</code>
that I use so often. Again, each time you want to 
<em>select</em> a identifier in
some code of yours, you'd most certainly be better off using 
<code>C-M-SPC</code>.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 08 Feb 2013 17:15:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2013/02/04-Emacs-mark-word.html</guid>
</item>

<item>
  <title>M-x ack
  </title>
  <link>http://tapoueh.org/blog/2012/11/22-Emacs-Ack-Mode.html
  </link>
  <description><![CDATA[<p>I've been asked about how to integrate the 
<a href='http://betterthangrep.com/'>ack</a> tool (you know, the one that
is 
<em>better than grep</em>) into Emacs today. Again. And I just realized that I
didn't blog about my solution. That might explain why I keep getting asked
about it after all...
</p><p>So here it is, 
<code>M-x ack</code>:
</p><pre><code>;;; dim-ack.el --- Dimitri Fontaine
;;
;; http://stackoverflow.com/questions/2322389/ack-does-not-work-when-run-from-grep-find-in-emacs-on-windows

(defcustom ack-command (or (executable-find &quot;ack&quot;)
			   (executable-find &quot;ack-grep&quot;))
  &quot;Command to use to call ack, e.g. ack-grep under debian&quot;
  :type &#039;file)

(defvar ack-command-line (concat ack-command &quot; --nogroup --nocolor &quot;))
(defvar ack-history nil)
(defvar ack-host-defaults-alist nil)

(defun ack ()
  &quot;Like grep, but using ack-command as the default&quot;
  (interactive)
  ; Make sure grep has been initialized
  (if (&gt;= emacs-major-version 22)
      (require &#039;grep)
    (require &#039;compile))
  ; Close STDIN to keep ack from going into filter mode
  (let ((null-device (format &quot;&lt; %s&quot; null-device))
        (grep-command ack-command-line)
        (grep-history ack-history)
        (grep-host-defaults-alist ack-host-defaults-alist))
    (call-interactively &#039;grep)
    (setq ack-history             grep-history
          ack-host-defaults-alist grep-host-defaults-alist)))

(provide &#039;dim-ack)
</code></pre><p>Enjoy!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 22 Nov 2012 17:36:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2012/11/22-Emacs-Ack-Mode.html</guid>
</item>

<item>
  <title>About Vimgolf
  </title>
  <link>http://tapoueh.org/blog/2012/11/06-About-vimgolf.html
  </link>
  <description><![CDATA[<p>Following some 
<em>tweet</em> I found myself desultory watching an episode of the
awesome 
<a href='http://vimeo.com/channels/222837'>VimGolf in Emacs</a> video series by 
<a href='http://vimeo.com/timvisher'>Tim Visher</a>. Those series are about
picking some challenge from 
<a href='http://vimgolf.com/'>vimgolf</a> and implementing it with our favorite
editor instead. Because 
<a href='http://emacsrocks.com/'>Emacs Rocks</a> guys.
</p><center><a href='http://emacsrocks.com/'><img src='http://tapoueh.org/images/emacs-rocks-logo.png' /></a></center><p>Let me tell you upfront that I really dislike the whole idea of the 
<em>vim golf</em>
challenge. I've been a user of both 
<em>Emacs</em> and 
<em>Vim</em> for many years, and
finally decided to switch to 
<em>living in Emacs</em>; or if you prefer, climbing my
way up from level 2 as in 
<a href='http://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency'>The Levels Of Emacs Proficiency</a>. The reason why is
that I found that in my case, using 
<em>Vim</em> would mean spending more time
thinking about 
<em>how</em> to do some editing operation rather than the 
<em>problem</em> I
wanted to solve by editing some text, most often code.
</p><p>Of course, the main effect of 
<em>Vim Golf</em> is to make you focus even more on the
wrong problem. There's still a good side of it though, which is that such
challenges are good excuses to discover new features of your editor. So
let's use that excuse to talk about some nice 
<em>Emacs</em> features.
</p><center><a href='http://vimgolf.com/challenges/4dd3e19aec9eb6000100000d'><img src='http://tapoueh.org/images/vim_golf_logo.png' /></a></center><center><em>Vim Golf Challenge: Complete the hex array data</em></center><h2>The challenge</h2><p>The previous image will lead you to a particular challenge where it's all
about filling in an array with consecutive 
<em>hexadecimal</em> numbers written as
<code>0xab</code>, where you begin with a template containing only the 
<code>0x00</code> entry. The
idea is of course to use the 
<em>Vim</em> feature that will increment the 
<em>number at
point</em>, and is available through the 
<code>C-a</code> keystroke.
</p><pre><code>unsigned int hex[] = {
        0x00,
};
</code></pre><h2>A first solution</h2><p><em>Emacs</em> does not ship with an 
<em>increment-number-at-point</em>, much less so with one
that would support 
<em>decimal</em>, 
<em>octal</em> and 
<em>hexadecimal</em> and even automatically
recognize 
<code>0x</code> as a prefix meaning that the next number is 
<em>hexadecimal</em>. But
<em>Emacs</em> ship with 
<a href='http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html'>Emacs Keyboard Macros</a> and those have a counter, so it's easy
enough to fill in numbers from 1 to 255 that way: 
<code>M-1 F3 F3 , F4</code> will
register a macro where the counter starts at 1, and each time you hit 
<code>F4</code> it
will insert the current counter value, increment it and insert a coma. You
want to do that 254 times, so you do 
<code>C-u 2 5 4 F4</code> and 
<em>Emacs</em> just does that.
</p><p>Now, to transform those decimal numbers into their 
<em>hexadecimal</em>
representation, you can use advanced 
<a href='http://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Replace.html'>Emacs Regexp Replace</a> features. Replace
<code>[0-9]+</code> with the result from the following 
<em>Emacs Lisp</em> code: 
<code>\,(format
&quot;0x%02x&quot; (string-to-number \&amp;))</code>. The 
<code>\&amp;</code> in there will be replaced by the
matching text, so that will do what we need here, turning 
<code>10</code> into 
<code>0x0a</code>.
</p><h2>Let's get some better tools</h2><p>We could do better, though. I happen to already use a 
<em>key chord</em> to duplicate
the current line, and we would need a function to 
<a href='http://www.emacswiki.org/emacs/IncrementNumber'>Increment Number At Point</a>.
Those I found over at 
<a href='http://www.emacswiki.org/'>EmacsWiki</a> were not to my taste as they were not able
to figure out easily which 
<em>base</em> to use. So here's a little 
<em>Emacs Lisp</em>
example showing how to extend your favorite editor to have some 
<em>Vim</em> common
features, which is why 
<em>Emacs</em> ships with 
<em>Emacs Lisp</em> in the first place.
</p><pre><code>(defun duplicate-current-line (&amp;optional n)
  &quot;duplicate current line, make more than 1 copy given a numeric argument&quot;
  (interactive &quot;p&quot;)
  (let ((nb (or n 1))
	(current-line (thing-at-point &#039;line)))
    (save-excursion
      ;; when on last line, insert a newline first
      (when (or (= 1 (forward-line 1)) (eq (point) (point-max)))
	(insert &quot;\n&quot;))

      ;; now insert as many time as requested
      (while (&gt; n 0)
	(insert current-line)
	(decf n)))
    ;; now move down as many lines as we inserted
    (next-line nb)))

(global-set-key (kbd &quot;C-S-d&quot;) &#039;duplicate-current-line)
</code></pre><center><a href='http://lisperati.com/'><img src='http://tapoueh.org/images/emacs-on-toaster.jpg' /></a></center><pre><code>(require &#039;cl)  ; destructuring-bind is found there

(defun dim:increment-number-at-point (&amp;optional prefix)
  (interactive &quot;p&quot;)
  (let* ((beg    (skip-chars-backward &quot;0-9a-fA-F&quot;))
	 (hexa   (save-excursion (forward-char -2) (looking-at-p &quot;0x&quot;)))
	 ;; force the prefix to hexa (4) we see &quot;0x&quot; before the number
	 (prefix (if hexa 4 prefix))
	 (end    (re-search-forward &quot;[0-9a-fA-F]+&quot; nil t))
	 (nstr   (match-string 0))
	 (l      (- (match-end 0) (match-beginning 0)))
	 (fmt    (format &quot;%%0%d&quot; l)))
    (message &quot;PLOP: %d&quot; prefix)
    (destructuring-bind (base format)
	(case prefix
	  ((1)  &#039;(10 &quot;d&quot;))		; no command prefix, decimal
	  ((4)  &#039;(16 &quot;x&quot;))		; C-u, hexadecimal
	  ((16) &#039;(8 &quot;o&quot;)))		; C-u C-u, octal
      (let* ((n   (string-to-number nstr base))
	     (n+1 (+ n 1))
	     (fmt (format &quot;%s%s&quot; fmt format)))
	(replace-match (format fmt n+1))))))

(global-set-key (kbd &quot;C-c +&quot;) &#039;dim:increment-number-at-point)
</code></pre><blockquote><p>So if you're using 
<em>Emacs</em> a lot but always found an excuse not to grasp 
<em>Emacs
Lisp</em>, I hope that article could be an excuse for you to do so…
</p></blockquote><h2>Another solution</h2><p>Anyway, now that we are much better equipped, we can picture a better way to
solve the problem. Instead of using a macro that inserts the next counter
value, we can use one that duplicate current line, increment number at point
(and figures out on its own that the number prefixed with 
<code>0x</code> is
<em>hexadecimal</em>), and does that 254 times more. Then it's all about reformatting
the text so that if fits nicely on screen, and for that the command 
<code>M-q runs
the command fill-paragraph</code> is exactly what we need. The command 
<code>C-x f runs
the command set-fill-column</code> can be used to set the maximum column we allow
<em>Emacs</em> to reach before going to the next line.
</p><p>Our 
<em>Golf</em> then becomes a 
<code>19</code> steps solution if you start with the cursor at
the 
<code>&#039;,&#039;</code> in the previous example:
</p><pre><code>C-x f 5 6 RET
F3 C-S-d C-c + F4
C-u 2 5 4 F4
C-SPC M-&lt; C-n M-q
</code></pre><p>First, set the 
<em>fill column</em>, then register a macro (in between 
<code>F3</code> and 
<code>F4)</code>
that will duplicate current line (using 
<code>C-S-d</code>) then increment number at
point (using 
<code>C-c +</code>). Third line, replay that macro 254 times (
<code>C-u 2 5 4 F4</code>).
Fourth line, select all those 
<em>hexadecimal</em> numbers and fill the paragraph
they form correctly, so as to get:
</p><h2>All those tips for...</h2><pre><code>unsigned int hex[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
        0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
        0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
        0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
        0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
        0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
        0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
        0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
        0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
        0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
        0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
        0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};
</code></pre><h2>Conclusion</h2><p>Thanks to the excuse of that challenge we now have a generic facility to
increment a number at point in different common bases, which is a nice
building block for all kinds of 
<em>Emacs Keyboard Macros</em>. We also now have a
function to duplicate the line at point, which is something I use very often
myself.
</p><p>More importantly, we've been refreshing our memory on how to use some
advanced replacement facilities wherein you can actually use inline 
<em>Emacs
Lisp</em> code as a replacement pattern, and for the most interested readers here
we have a good excuse to learn some more about 
<em>Emacs Lisp</em> programming.
</p><p>The main thing I want to say is that using 
<em>Emacs Keyboard Macros</em> is an
interactive process: you don't have to pause your current activity to write
some code in another language (here, that would be either 
<em>Vim Script</em> or
<em>Emacs Lisp</em>) just to save a few minutes on a boring task.
</p><p>How effective your are at solving that challenge, for me, is not at all
about measure how many keystrokes you ended up using, it's all about being
able to get some precious help from your working tools 
<em><strong>without</strong></em> having to
stop focusing on the main problem you are solving.
</p><p>I wouldn't ever get to write such 
<em>Emacs Lisp</em> code when doing that kind of
editing once. I would only do that when I'm thinking I've just been doing a
boring task by hand one time too many already. Like for example copying and
pasting the 
<code>pg_backend_pid()</code> of the 
<a href='http://www.postgresql.org/'>PostgreSQL</a> backend I'm working with at
the 
<code>psql</code> prompt so that I can attach 
<code>gdb</code> to it. I'll get back to talking
about 
<a href='https://github.com/dimitri/pgdevenv-el'>pgdevenv-el</a> later!
</p><p>Hope you did enjoy that article, whose goal is to help you while you're
journeying in 
<a href='http://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency'>The Levels Of Emacs Proficiency</a>.
</p><h2>Update</h2><p>While looking at the docs for the 
<a href='http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macro-Counter.html#Keyboard-Macro-Counter'>Keyboard Macro Counter</a> to check how to
reset it without having to record the macro again, I just stumbled on this
part of the docs: 
<code>C-x C-k C-f runs the command kmacro-set-format</code>. So another
way to solve our problem with only facilities that come with a bare Emacs is
the following:
</p><pre><code>C-x f 5 6 RET
C-x C-k C-f 0x%02x RET
C-1 F3 SPC F3 , F4
C-u 2 5 4 F4
DEL C-SPC C-a C-q
</code></pre><p>We're now at 30 keystrokes, so much more than previously, but it's stock
Emacs features and that 
<code>kmacro-set-format</code> is a wonderful little tool you
might as well have a need for in the future.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sun, 11 Nov 2012 20:52:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2012/11/06-About-vimgolf.html</guid>
</item>

<item>
  <title>Editing SQL
  </title>
  <link>http://tapoueh.org/blog/2012/11/06-Interactive-SQL.html
  </link>
  <description><![CDATA[<p>It's hard to read my blog yet not know I'm using 
<a href='http://www.gnu.org/software/emacs/#Platforms'>Emacs</a>. It really is a great
tool and has a lot to compare to 
<a href='http://www.postgresql.org/'>PostgreSQL</a> in terms of extensibility,
documentation quality and community. And there's even a native
implementation of the 
<a href='http://www.postgresql.org/docs/current/static/protocol.html'>PostgreSQL Protocol</a> written in 
<a href='http://www.gnu.org/software/emacs/emacs-lisp-intro/'>Emacs Lisp</a>.
</p><center><a href='http://www.online-marketwatch.com/pgel/pg.html'><img src='http://tapoueh.org/images/pg-el.png' /></a></center><p>One of the things where 
<em>Emacs</em> really shines is that interactive development
environment you get when working on some 
<em>Emacs Lisp</em> code. Evaluating an
function as easy as a single 
<em>key chord</em>, and that will both compile in the
function and load it in the running process. I can't tell you how many times
I've been missing that ability when editing C code.
</p><p>With 
<em>PostgreSQL</em> too we get a pretty interactive environment with the 
<a href='http://www.postgresql.org/docs/current/static/app-psql.html'>psql</a>
console application, or with 
<a href='http://www.pgadmin.org/'>pgAdmin</a>. One feature from 
<em>pgAdmin</em> that I've
often wished I had in 
<em>psql</em> is the ability to edit my query online and easily
run it in the console, rather than either using the 
<em>readline</em> limited history
editing features or launching a new editor process each time with 
<code>\e</code>. At the
same time I would much prefer using my usual 
<em>Emacs</em> editor to actually 
<em>edit</em>
the query.
</p><p>If you've been reading that blog before you know what to expect. My solution
to the stated problem is available in 
<a href='https://github.com/dimitri/pgdevenv-el'>pgdevenv-el</a>, an 
<em>Emacs</em> package aimed at
helping 
<em>PostgreSQL</em> developers. Most of the features in there are geared
toward the 
<em>core backend</em> developers, except for this one I want to talk about
today (I'll blog about the other ones too I guess).
</p><center><img src='http://tapoueh.org/images/pgdevenv-el-eval-sql.png' /></center><p>What you can see from that screenshot is that the selected query text has
been sent to the 
<em>psql</em> buffer and exectuted over there. And that the 
<em>psql</em>
buffer is echoing all queries sent to it. What you can not see straight from
that picture is the interaction to get there. Well, I've been implementing
some 
<em>elisp</em> features that I was missing.
</p><p>First, movement: you can do 
<code>C-M-a</code> and 
<code>C-M-e</code> to navigate to the beginning and
the end of the SQL query at point, like you do in 
<code>C</code> or in 
<code>lisp</code> in 
<em>Emacs</em>.
</p><p>Then, selection: you can do 
<code>C-M-h</code> to select the SQL query at point, you
don't have to navigate yourself, 
<a href='https://github.com/dimitri/pgdevenv-el'>pgdev-sql-mode</a> knows how to do that. Side
note, 
<code>pgdev-sql-mode</code> is the name of the 
<em>minor mode</em> you need to activate in
your SQL buffers to have the magic available.
</p><p>Last but not least, evaluation: as when editing lisp code, you can now use
<code>C-M-x</code> to send the current query text to an associated 
<em>psql</em> buffer.
</p><p>The way to associate the 
<em>psql</em> buffer to an 
<em>SQL</em> buffer is currently done
thanks to the other 
<em>pgdevenv-el</em> features that this blog post is not talking
about, and the setup is addressed in the documentation: you have to let know
<em>pgdevenv-el</em> where your PostgreSQL branches are installed locally so that it
can prepare you a 
<em>Shell</em> buffer with 
<code>PGDATA</code> and 
<code>PGPORT</code> already set for you.
And currently, for 
<code>C-M-x</code> to work you need to open the buffer yourself before
hand, using 
<code>C-c - n</code> (to run the command 
<code>pgdev-open-shell</code>), and type 
<code>psql</code> in
the 
<em>Shell</em> prompt.
</p><p>What that means for me is that I can at least edit SQL (in 
<em>PostgreSQL</em>
regression files and other places) in my usual 
<em>Emacs</em> buffer and actually
refine it as I go until it does exactly what I need, without having to use
the 
<em>readline</em> history editing or the 
<code>\e</code> command, which is not great when your
<em>Shell</em> is in already running inside 
<em>Emacs</em>.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 06 Nov 2012 09:55:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2012/11/06-Interactive-SQL.html</guid>
</item>

<item>
  <title>El-Get 4.1 is out
  </title>
  <link>http://tapoueh.org/blog/2012/08/28-el-get-new-stable-release.html
  </link>
  <description><![CDATA[<p>Please welcome the new stable version of 
<a href='https://github.com/dimitri/el-get#readme'>El-Get</a>, the much awaited 
<code>version
4.1</code> has now been branched for your pleasure. It's packed with lots of
features to make your life easy, comes with a 
<em>Info</em> documentation book and
even has a 
<em>logo</em>. That's no joke, I found one, at least:
</p><center><img src='http://tapoueh.org/images/el-get.big.png' /></center><h2>Why El-Get is relevant</h2><p>Emacs 24.1 is the first release that includes 
<code>package.el</code>, and it even allows
the user to setup several sources where to fetch packages. Those sources,
such as 
<a href='http://marmalade-repo.org/'>Marmalade</a>, are hosting lots of third party code for Emacs.
<code>package.el</code> makes it easy to 
<em>install</em> (partly) those software.
</p><p>This is a very fine way of getting extra features in your Emacs
installation, and one that is supported out of the box. For a 
<em>package</em> to be
listed, its sources need to be prepared, and you need to rely on the central
website you now depend on to be up and running and accessible.
</p><p>El-Get is all about allowing you to easily cope with the still vast majority
of Emacs Lisp extensions you can find out there, that is non packaged code
that is only available on some more or less mainstream 
<em>distribution method</em>,
ranging from 
<a href='http://emacswiki.org/'>EmacsWiki</a> to 
<a href='http://github.com/'>github</a> including 
<em>bare HTTP</em> personal hosting.
</p><p>With El-Get, you fetch the package where it's located. There's no need for a
central server to host packaged and released software, and it's easy to
share your findings with friends, or even to 
<em>publish</em> any 
<code>elisp</code> code you
write.
</p><p>El-Get will also take care of final steps that 
<code>package.el</code> did choose not to
support, such as including 
<em>Info</em> material in your info browser (remember 
<code>C-h
i runs the command info</code>?), running 
<code>./configure &amp;&amp; make</code> for you, 
<em>byte
compiling</em> the sources you just retrieved, adding the necessary 
<a href='http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/Autoload.html'>autoload</a>
support, etc.
</p><p>And of course one of the 
<em>methods</em> supported by El-Get is 
<code>ELPA</code>, known as 
<em>Emacs
Lisp Package Archive</em> and implemented by 
<code>package.el</code>.
</p><p>So definitely, you typically want both 
<code>ELPA</code> and 
<a href='http://github.com/dimitri/el-get'>El-Get</a>.
</p><h2>El-Get 4.1 Changelog Summary</h2><p>The new El-Get release is packed with features. It really is. I will only
list some of them now:
</p><ul><li>Plenty new recipes, we now have <code>590</code> of them managed in the El-Get source</li></ul><p>   repository itself, and El-Get will download the current 
<a href='http://emacswiki.org/'>EmacsWiki</a> list of
   
<code>emacs lisp</code> files at install time too.
</p><ul><li>The default installation and usage has been simplified a lot.</li></ul><ul><li>More options are provided to setup El-Get packages, see</li></ul><p>   
<code>el-get-user-package-directory</code> for example.
</p><ul><li>Part of the simplification, <code>el-get-sources</code> has been revisited and now</li></ul><p>   serves only one goal.
</p><ul><li>We dropped <code>(el-get &#039;wait)</code> which was a misconception and had been broken</li></ul><p>   for a long time in the development version of El-Get.
</p><ul><li>We made improvements in the error handling and in dealing with some</li></ul><p>   corner cases that still happen often enough for users to report them.
   Please continue reporting them!
</p><ul><li>More caching is done, with a better dependency tracking and status</li></ul><p>   management.
</p><ul><li>Enhanced notification support, from <code>DBUS</code> to <code>growl</code>.</li></ul><ul><li>Support for <em>checksums</em> with a lot of <em>source types.</em></li></ul><ul><li>Completing our <code>git</code> support, <em>shallow</em> clones and <em>submodules</em> are there.</li></ul><ul><li>Better support for <code>github</code> including the <code>zip</code> and <code>tar</code> releases.</li></ul><ul><li>Ability to reload a package when it's been <em>updated</em>.</li></ul><ul><li><em>Moar</em> features</li></ul><p>And most importantly, El-Get documentation is now almost complete and comes
in the nice 
<em>Info</em> format I know you've been expecting for so long!
</p><h2>Using El-Get</h2><p>Here's a quick summary of what using El-Get is like, for a new user in 4.1.
If you're already using El-Get see the section about upgrading. To install
El-Get you need to paste those lines to your 
<code>*scratch*</code> buffer then hit 
<code>C-j</code>
after the last closing parenthesis:
</p><pre><code>(url-retrieve
 &quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&quot;
 (lambda (s)
   (goto-char (point-max))
   (eval-print-last-sexp)))
</code></pre><p>Then you can try 
<code>M-x el-get-list-packages</code> and browse through more than 
<code>2000</code>
available packages. Mark the ones you want to install with 
<code>i</code> then type 
<code>x</code> to
see El-Get fetch and install all those packages you just selected. Here's a
summary of what's available to you in the 
<code>M-x el-get-list-packages</code> buffer:
</p><pre><code>Major Mode Bindings:
SPC       	el-get-package-menu-mark-unmark
?         	el-get-package-menu-describe
d         	el-get-package-menu-mark-delete
g         	el-get-package-menu-revert
h         	el-get-package-menu-quick-help
i         	el-get-package-menu-mark-install
u         	el-get-package-menu-mark-update
x         	el-get-package-menu-execute
</code></pre><p>Once a package is 
<em>installed</em>, El-Get will 
<em>initialize</em> it for you, and it will
also do that step at every Emacs startup from there on, provided that you
added some lines to your 
<code>~/.emacs</code> initialization file, that look a lot like
the previous 
<code>*scratch*</code> code you did paste:
</p><pre><code>;;
;; Here&#039;s a typical El-Get integration for your .emacs file:
;;
(add-to-list &#039;load-path &quot;~/.emacs.d/el-get/el-get&quot;)
(setq el-get-user-package-directory &quot;~/.emacs.d/packages.d/&quot;)

(unless (require &#039;el-get nil t)
  (with-current-buffer
      (url-retrieve-synchronously
       &quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&quot;)
    (goto-char (point-max))
    (eval-print-last-sexp)))

(el-get &#039;sync)
</code></pre><p>Then you can add files named like 
<code>init-&lt;package&gt;.el</code> in the
<code>el-get-user-package-directory</code> directory, those files will get loaded when
El-Get 
<em>initialize</em> 
<code>&lt;package&gt;</code>.
</p><p>You can also use 
<code>M-x el-get-install</code> if you want to bypass the full screen
package listing, you will get completion on the package name.
</p><h2>Community and development</h2><p>El-Get community grew to be a really cool place to be participating in these
days, with core and 
<em>recipe</em> contributions from more than 130 different people
already, and with 526 stars on 
<code>github</code> and 
<code>184</code> forks. I almost can't believe
it!
</p><pre><code>git --no-pager shortlog -n -s | wc -l
     137
git --no-pager shortlog -n -s | head -10
   734	Dimitri Fontaine
   336	Ryan C. Thompson
   114	Julien Danjou
   110	Dave Abrahams
    73	Ryan Thompson
    72	S&#xE9;bastien Gross
    42	Takafumi Arakaki
    27	Alex Ott
    25	Yakkala Yagnesh Raghava
    21	R&#xFC;diger Sonderfeld
</code></pre><p>Now that we have something that looks like a 
<em>core team</em> forming up, I'm
thinking about scheduling much more aggressive stable release. 4.1 has been
very long in the making, I hope to now have a rapid release cycle leading us
to 
<code>4.2</code> in quite a short time. As that's not an individual effort by any
mean, though, only history will tell.
</p><h2>The roadmap</h2><p>We have lots of ideas and some rough edges to address, so 4.1 is only a stop
in the release history of El-Get. Next ideas include better error management
in face of rare corner cases and in face of external events, like when you
did 
<code>rm -rf</code> a directory holding an El-Get managed extension: we should mark
it 
<em>removed</em> and clean up the 
<code>autoloads</code> that came from it.
</p><h2>Upgrading to 4.1</h2><p>This item has received some treatment in the documentation. The basic idea
is that 
<code>el-get-sources</code> is no longer what it used to be, it's now only an
alternative source location for 
<em>recipes</em>, like it should always have been.
Not that you can still 
<em>override</em> in there some properties that you want
<em>merged</em> with an official 
<em>recipe</em>.
</p><p>The new thing about 
<code>el-get-sources</code> is that it will no longer be the
authoritative list of packages that El-Get manages. That list is not either
given explicitly when calling the 
<code>el-get</code> function in your 
<code>.emacs</code> setup, or
derived from the packages that are known 
<em>installed</em> on your system (like e.g.
<code>debian</code> is doing).
</p><p>Also, given that it took us so much time to brew 
<code>4.1</code> a lot of packages have
changed either their hosting location or even switched their 
<code>SCM</code>. In such
cases an automatic update of the recipe will no longer be possible, you
might need to 
<code>el-get-remove</code> then 
<code>el-get-install</code> packages to get them back.
</p><h2>Conclusion</h2><p>El-Get 
<code>4.1</code> is now ready for public consumption, don't be shy, we've been a
lot of users running the development branch for a long time now, I'm running
<code>4.0.7.6901194</code> while writing this post. 
<code>4.0</code> is the development version of
what is now released as 
<code>4.1</code>.
</p><p>Many thanks to all who contributed to El-Get and to all our users, I'm very
proud that together we worked out a very nice and complete tool!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 28 Aug 2012 11:43:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2012/08/28-el-get-new-stable-release.html</guid>
</item>

<item>
  <title>M-x recompile
  </title>
  <link>http://tapoueh.org/blog/2012/06/01-emacs-recompile.html
  </link>
  <description><![CDATA[<p>A friend of mine just asked me for advice to tweak some Emacs features, and
I think that's really typical of using Emacs: rather than getting used to
the way things are shipped to you, when using Emacs, you start wanting to
adapt the tools to the way you want things to be working instead. And you
can call that the awesome!
</p><p>In this case we're talking about the 
<code>M-x compile</code> and 
<code>M-x recompile</code>
functions. My friend bound the former to 
<code>&lt;f11&gt;</code> and wanted that 
<code>C-u f11</code> do a
recompile with the exact same command line as the previous 
<code>compile</code> command.
</p><p>Well, to be honest, I didn't know about 
<code>M-x recompile</code> until after I wrote
the following function, made to trigger another 
<code>compile</code> with the last
command used if using 
<code>C-u</code>.
</p><pre><code>(defvar cyb-compile-last-command nil)
(defvar cyb-compile-command-history nil)

(defun cyb-compile (arg)
  &quot;Compile with given command, optionally recompile with last command&quot;
  (interactive &quot;P&quot;)
  (if arg
      (progn
	;; arg given: compile with last command
	(unless cyb-compile-last-command
	  (error &quot;Can&#039;t recompile yet, no known last command&quot;))
	(compile cyb-compile-last-command))
    ;; else branch, no arg given, ask for a command
    (let ((command
	   (read-string
	    &quot;Compile with command: &quot;
            &quot;make -k&quot; &#039;cyb-compile-command-history &quot;make -k&quot;)))
      (setq cyb-compile-last-command command)
      (compile command))))

(global-set-key (kbd &quot;&lt;f11&gt;&quot;) &#039;cyb-compile)
</code></pre><p>With that little 
<em>Emacs Lisp</em> code we're driving Emacs the way we want to be
working, and that's great! You can see it was a 
<em>quick hack</em> in that if you
wanted to use the function non interactively it would still prompt for the
command to use to compile, when 
<em>Emacs Lisp</em> 
<code>interactive</code> special form would
allow us to implement something way smarter here. Also if we wanted to spend
some more time on that feature, we should probably tweak the 
<em>error</em> condition
to be asking for the command rather than just complaining, that would
certainly be more useful.
</p><p>Exercise left to the reader, rewrite using 
<code>recompile</code> rather than reinventing
it in a hurry! Beware of 
<code>call-interactively</code> though. Oh and fix the
aforementioned infelicities, too.
</p><p>To conclude, we see that writing 
<em>Emacs Lisp</em> code to fix a usability problem
in a hurry is a great force of Emacs, and that we're provided with the
necessary tool set so as to be able to reach completeness if we wanted to do
so.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 01 Jun 2012 18:45:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2012/06/01-emacs-recompile.html</guid>
</item>

<item>
  <title>Battle Language &#xE0; la Marmite
  </title>
  <link>http://tapoueh.org/blog/2012/03/01-duchessfr-battle-language.html
  </link>
  <description><![CDATA[<p>J'ai eu la chance hier soir de participer à la 
<a href='http://jduchess.org/duchess-france/blog/battle-language-a-la-marmite/'>Battle Language à la Marmite</a>,
où j'avais proposé de parler de 
<a href='http://www.emacswiki.org/emacs/EmacsLisp'>Emacs Lisp</a>, proposition qui s'est
transformée en porte-étendard de la grande famille 
<a href='http://www.lisp.org/index.html'>Lisp</a>. J'ai utilisé avec
plaisir certains contenu de 
<a href='http://www.lisperati.com/'>Lisperati</a> dans ma présentation et je vous
recommande le détour sur ce site !
</p><center><a href='http://tapoueh.org/images/confs/elisp.pdf'><img src='http://tapoueh.org/images/confs/elisp-1.png' /></a></center><p>J'ai dans cette présentation très rapide (5 minutes seulement) mentionné
l'approche 
<em>axiomatique</em> de 
<em><strong>John McCarthy</strong></em> lorsqu'il a 
<em>découvert</em> le language,
on peut en lire un peu plus sur le site de 
<em><strong>Paul Graham</strong></em> et son article
<a href='http://www.paulgraham.com/rootsoflisp.html'>The Roots of Lisp</a> et le code associé, une
<a href='http://lib.store.yahoo.net/lib/paulgraham/jmc.lisp'>implémentation du LISP de McCarthy en common lisp</a>.
</p><p>Merci à 
<a href='http://jduchess.org/'>Duchess</a> pour une bonne soirée où nous avons pu échanger nos points
de vue et débattre des languages fonctionnels et objects, des différences
entre Erlang et Haskell et Ruby, et de quelques autres sujets dérivés !
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 01 Mar 2012 14:49:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2012/03/01-duchessfr-battle-language.html</guid>
</item>

<item>
  <title>el-get-3.1
  </title>
  <link>http://tapoueh.org/blog/2011/09/16-el-get-3.1.html
  </link>
  <description><![CDATA[<p>The 
<a href='https://github.com/dimitri/el-get'>el-get</a> project releases its new stable version, 
<code>3.1</code>. This new release
fixes bugs, add a host of new recipes (we have 420 of them and counting) and
some nice new features too.  You really want to upgrade.
</p><h1>New features</h1><p>Among the features you will find dependencies management and 
<code>M-x
el-get-list-packages</code>, that you should try as soon as possible.  Of course,
don't miss 
<code>M-x el-get-self-update</code> that eases the process somehow.
</p><center><img src='http://tapoueh.org/images/emacs-el-get-list-packages.png' /></center><p>This shows the result of 
<code>M-x el-get-list-packages</code>.  The packages that don't
have a description are the one from 
<a href='http://www.emacswiki.org/cgi-bin/wiki?action=index;match=%5C.(el|tar)(%5C.gz)%3F%24'>emacswiki</a> that doesn't provide a listing
of the filename 
<em>and</em> the first line of the file (it usually follows the
format 
<code>;;; filename.el --- description here</code>).  As we don't want to mirror
the website just to be able to provide descriptions, we just don't have them
now.
</p><p>Another nice new feature, contributed by a user that wanted to self-learn
<a href='http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html'>elisp</a>, is the 
<code>el-get-user-package-directory</code> support.  Just place in there
some 
<code>init-my-package.el</code> files, and when 
<em>el-get</em> wants to init the 
<code>my-package</code>
package, it will load that file for you.  That helps managing your setup,
and I'm already using that in my own 
<code>~/.emacs.d/</code> repository.
</p><h1>Upgrading</h1><p>The upgrading is to be done with some care, though, because you need to edit
your packaging setup.  The 
<code>el-get-sources</code> variable used to be both where to
setup extra recipes and the list of packages you want to have installed, and
several people rightfully insisted that I should change that.  I've been
slow to be convinced, but there it is, they were right.
</p><p>So now, 
<a href='http://www.emacswiki.org/emacs/el-get'>el-get</a> works from the current status of packages and will init all
those packages you have installed.  Which means that you just 
<code>M-x
el-get-install</code> a package and don't think about it anymore.  If you need to
override this behavior, it's still possible to do so by specifying the whole
list of packages you want initialized (and installed if necessary) on the
<code>(el-get &#039;sync ...)</code> call.
</p><p>That later setup is useful if you want to share your el-get selection on
several machines.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 16 Sep 2011 14:13:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/09/16-el-get-3.1.html</guid>
</item>

<item>
  <title>el-get-list-packages
  </title>
  <link>http://tapoueh.org/blog/2011/08/18-el-get-list-packages.html
  </link>
  <description><![CDATA[<p>From the first days of 
<a href='http://tapoueh.org/emacs/el-get.html'>el-get</a> is was quite clear for me that we would reach
a point where users would want a nice listing including descriptions of the
packages, and a 
<em>major mode</em> allowing you to select packages to install,
remove and update.  It was also quite clear that I was not much interested
into doing it myself, even if I would appreciate having it done.
</p><p>Well, the joy of Open Source & Free Software (pick your own poison).
<a href='https://github.com/jglee1027'>jglee1027</a> is this 
<em>GitHub</em> guy who did offer an implementation of said
facility, and who added descriptions for almost all of the now 
<code>402</code> recipes
that we have included with 
<a href='http://tapoueh.org/emacs/el-get.html'>el-get</a>.
</p><p>Here's an image of what you get:
</p><center><img src='http://tapoueh.org/images/emacs-el-get-list-packages.png' /></center><p>The packages with no description are fetched by 
<code>M-x el-get-emacswiki-refresh</code>
which will not download all 
<a href='http://emacswiki.org'>emacswiki</a> content locally just so that it can
parse the scripts's header and have a local description.  Maybe it's time to
ask for another page over there like 
<a href='http://www.emacswiki.org/cgi-bin/wiki?action=index;match=%5C.(el%7Ctar)(%5C.gz)%3F%24'>emacswiki page index</a> but containing the
first line too.
</p><p>For recipes we offer, this first line often looks like the following:
</p><pre><code>;;; 123-menu.el --- Simple menuing system, reminiscent of Lotus 123 in DOS
</code></pre><p>Of course some files over there are not following the stanza, but that would
be good enough already.
</p><p>All in all, I hope you enjoy 
<code>M-x el-get-list-packages</code>!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 18 Aug 2011 18:10:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/08/18-el-get-list-packages.html</guid>
</item>

<item>
  <title>Emacs Startup
  </title>
  <link>http://tapoueh.org/blog/2011/08/06-emacs-startup-notification.html
  </link>
  <description><![CDATA[<p>Using 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> we get to manage a larger and larger setup file (either 
<code>~/.emacs</code>
or 
<code>~/.emacs.d/init.el</code>), sometime with lots of dependencies, and some
sub-files thanks to the 
<code>load</code> function or the 
<code>provide</code> and 
<code>require</code> mechanism.
</p><p>Some users are even starting Emacs often enough for the startup time to be a
concern.  With an 
<code>emacs-uptime</code> (yes it's a command, you can 
<code>M-x
emacs-uptime</code>) of days to weeks (
<code>10 days, 17 hours, 45 minutes, 34 seconds</code> as
of this writing), it's not something I really care about much.
</p><p>But I know that some 
<a href='http://tapoueh.org/emacs/el-get.html'>el-get</a> users still do care, and will use 
<code>el-get-is-lazy</code>
and do all their Emacs tweaking as 
<code>eval-after-load</code> blocks.  Trying to have
an idea of how much a 
<em>worst case</em> startup with 
<a href='http://www.emacswiki.org/emacs/el-get'>el-get</a> is, I have added the
following piece of 
<code>elisp</code> at the very end of my startup code:
</p><pre><code>(defun dim:notify-startup-done ()
  &quot; notify user that Emacs is now ready&quot;
  (el-get-notify
   &quot;Emacs is ready.&quot;
   (format &quot;The init sequence took %g seconds.&quot;
	   (float-time (time-subtract after-init-time before-init-time)))))

(add-hook &#039;after-init-hook &#039;dim:notify-startup-done)
</code></pre><p>The 
<code>el-get-notify</code> function will adapt and either use the dbus implementation
from Emacs 24, or 
<a href='http://www.emacswiki.org/emacs/notify.el'>notify.el</a> from 
<a href='http://www.emacswiki.org/'>EmacsWiki</a> (just 
<code>M-x el-get-install</code> it if
you need it), or will use its own implementation of an Emacs 
<a href='http://growl.info/'>Growl</a> client
(it's about 5 lines long), and baring all of that will use the 
<code>message</code>
function.
</p><p>The reason I say 
<em>worst case</em> is that I have a lot of packages to initialize
at startup, and that I did absolutely no effort for this initializing to be
quick.  Still, my Emacs setup is taking about 20 seconds to boot.  Pretty
good I would say, for a weekly operation.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sat, 06 Aug 2011 14:58:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/08/06-emacs-startup-notification.html</guid>
</item>

<item>
  <title>Emacs ANSI colors
  </title>
  <link>http://tapoueh.org/blog/2011/07/29-emacs-ansi-colors.html
  </link>
  <description><![CDATA[<p><a href='http://tapoueh.org/emacs/index.html'>Emacs</a> comes with a pretty good implementation of a terminal emulator, 
<code>M-x
term</code>.  Well not that good actually, but given what I use it for, it's just
what I need.  Particulary if you add to that my 
<a href='http://tapoueh.org/emacs/cssh.html'>cssh</a> tool, so that
connecting with 
<code>ssh</code> to a remote host is just a 
<code>=C-= runs the command
cssh-term-remote-open</code> away, and completes on the host name thanks to
<code>~/.ssh/known_hosts</code>.
</p><p>Now, a problem that I still had to solve was the colors used in the
terminal.  As I'm using the 
<em>tango</em> color theme for emacs, the default 
<em>ANSI</em>
palette's blue color was not readable.  Here's how to fix that:
</p><pre><code>(require &#039;ansi-color)
   (setq ansi-color-names-vector
         (vector (frame-parameter nil &#039;background-color)
    	       &quot;#f57900&quot; &quot;#8ae234&quot; &quot;#edd400&quot; &quot;#729fcf&quot;
    	       &quot;#ad7fa8&quot; &quot;cyan3&quot; &quot;#eeeeec&quot;)
         ansi-term-color-vector ansi-color-names-vector
         ansi-color-map (ansi-color-make-color-map))
</code></pre><p>Now your colors in an emacs terminal are easy to read, as you can see:
</p><p>    
<img src='http://tapoueh.org/images/emacs-tango-term-colors.png' />
</p><p>Hope you enjoy!  
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 29 Jul 2011 10:00:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/07/29-emacs-ansi-colors.html</guid>
</item>

<item>
  <title>Emacs Cheat Sheet
  </title>
  <link>http://tapoueh.org/blog/2011/07/20-emacs-cheat-sheet.html
  </link>
  <description><![CDATA[<p>I stumbled upon the following 
<em>cheat sheet</em> for 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> yesterday, and it's
worth sharing.  I already learnt or discovered again some nice default
chords, like for example 
<code>C-x C-o runs the command delete-blank-lines</code> and
<code>C-M-o runs the command split-line</code>.  I guess I will use the later one a lot.
</p><p>         
<a href='http://tapoueh.org/images/emacs-cheat-sheet.png'><img src='http://tapoueh.org/images/emacs-cheat-sheet-tn.png' /></a>
</p><p>Hope you'll like it!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Wed, 20 Jul 2011 10:44:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/07/20-emacs-cheat-sheet.html</guid>
</item>

<item>
  <title>Elisp Breadcrumbs
  </title>
  <link>http://tapoueh.org/blog/2011/07/14-elisp-breadcrumbs.html
  </link>
  <description><![CDATA[<p>A 
<a href='http://en.wikipedia.org/wiki/Breadcrumb_(navigation)'>breadcrumb</a> is a navigation aid.  I just added one to this website, so that
it gets easier to browse from any article to its local and parents indexes
and back to 
<a href='http://tapoueh.org/index.html'>/dev/dim</a>, the root webpage of this site.
</p><p>As it was not that much work to implement, here's the whole of it:
</p><pre><code>;;;
;;; Breadcrumb support
;;;
(defun tapoueh-breadcrumb-to-current-page ()
  &quot;Return a list of (name . link) from the index root page to current one&quot;
  (let* ((current (muse-current-file))
	 (cwd     (file-name-directory current))
	 (project (muse-project-of-file current))
	 (root    (muse-style-element :path (caddr project)))
	 (path    (tapoueh-path-to-root))
	 (dirs    (split-string (file-relative-name current root) &quot;/&quot;)))
    ;; (&quot;blog&quot; &quot;2011&quot; &quot;07&quot; &quot;13-back-from-char11.muse&quot;)
    (append
     (list (cons &quot;/dev/dim&quot; (concat path &quot;index.html&quot;)))
     (loop for p in (butlast dirs)
	   collect (cons p (format &quot;%s%s/index.html&quot; path p))
	   do (setq path (concat path p &quot;/&quot;))))))

(defun tapoueh-insert-breadcrumb-div ()
  &quot;The real HTML inserting&quot;
  (insert &quot;&lt;div id=\&quot;breadcrumb\&quot;&gt;&quot;)
  (loop for (name . link) in (tapoueh-breadcrumb-to-current-page)
	do (insert (format &quot;&lt;a href=%s&gt;%s&lt;/a&gt;&quot; link name) &quot; / &quot;))
  (insert &quot;&lt;/div&gt;\n&quot;))

(defun tapoueh-insert-breadcrumb ()
  &quot;Must run with current buffer being a muse article&quot;
  (save-excursion
    (beginning-of-buffer)
    (when (tapoueh-extract-directive &quot;author&quot; (muse-current-file))
      (re-search-forward &quot;&lt;body&gt;&quot; nil t) ; find where the article content is
      (re-search-forward &quot;&lt;h2&gt;&quot; nil t)	 ; that&#039;s the title line
      (beginning-of-line)
      (open-line 1)
      (tapoueh-insert-breadcrumb-div)

      (re-search-forward &quot;&lt;h2&gt;&quot; nil t 2) ; that&#039;s the TAG line
      (beginning-of-line)
      (open-line 1)
      (tapoueh-insert-breadcrumb-div))))
</code></pre><p>This code is now called in the 
<code>:after</code> function of my 
<a href='http://www.emacswiki.org/emacs/EmacsMuse'>Muse</a> project style, and
it gets the work done.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 14 Jul 2011 18:44:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/07/14-elisp-breadcrumbs.html</guid>
</item>

<item>
  <title>Muse setup revised
  </title>
  <link>http://tapoueh.org/blog/2011/07/05-muse-setup-revised.html
  </link>
  <description><![CDATA[<p>Most of you are probably reading my posts directly in their 
<code>RSS</code> reader tools
(mine is 
<a href='http://www.gnus.org/'>gnus</a> thanks to the 
<a href='http://gwene.org/'>Gwene</a> service), so you probably missed it, but I
just 
<em>pushed</em> a whole new version of 
<a href='http://tapoueh.org'>my website</a>, still using 
<a href='https://github.com/alexott/muse'>Emacs Muse</a> as the
engine.
</p><p>My setup is tentatively called 
<a href='http://tapoueh.org/tapoueh.el.html'>tapoueh.el</a> and browsable online.  It consists
of some tweaks on top of Muse, so that I can enjoy 
<a href='http://tapoueh.org/tags/index.html'>tags</a> and proper 
<a href='http://tapoueh.org/rss'>rss</a>
support.  By 
<em>proper</em>, I mean that I want to be able to produce as many 
<em>topic</em>
<code>RSS</code> 
<em>feeds</em> from a single 
<em>blog</em>, and thanks to the 
<em>tags</em> support that's now what
I have.
</p><p>The 
<code>RSS</code> handling and the tagging system are adhoc code, and this very
article begins like this:
</p><pre><code>#author Dimitri Fontaine
#title  Muse setup revised
#date   20110705-19:55
#tags   Emacs Muse
</code></pre><p>All the information for the site navigation are taken from there, and at
long last the 
<code>RSS</code> I publish now contains proper 
<code>URLs</code> without abusing
<a href='http://tapoueh.org/blog.dim.html'>anchors</a>, as in the previous link which is a compatibility page in case you
had some bookmarks.  The compat only works with javascript (did you know
that 
<em>anchors</em> are not part of the 
<code>URL</code> that is sent to the server, so that you
can't apply 
<code>RedirectMatch</code> or other tweaks?), but all it needs is 
<em>2 lines of
code</em>, so I guess that's not so bad.
</p><pre><code>var anchor = window.location.hash;
document.location.href=document.getElementById(anchor).href;
</code></pre><p>I hope you like the new setup as much as I do, even if I'm left with some
debugging to do.  That's the price to pay for doing it yourself I guess.
But I still don't know of a ready to use solution (as in 
<em>off the shelf</em>) that
meet my criteria for web publishing.  More on that topic another time.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 05 Jul 2011 19:55:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/07/05-muse-setup-revised.html</guid>
</item>

<item>
  <title>Don&#039;t be afraid of &#039;cl
  </title>
  <link>http://tapoueh.org/blog/2011/06/20-dont-be-afraid-of-cl.html
  </link>
  <description><![CDATA[<p>In this 
<a href='http://tsengf.blogspot.com/2011/06/confirm-to-quit-when-editing-files-from.html'>blog article</a>, you're shown a quite long function that loop through
your buffers to find out if any of them is associated with a file whose full
name includes 
<code>&quot;projects&quot;</code>.  Well, you should not be afraid of using 
<code>cl</code>:
</p><pre><code>(require &#039;cl)
(loop for b being the buffers
      when (string-match &quot;projects&quot; (or (buffer-file-name b) &quot;&quot;))
      return t)
</code></pre><p>If you want to collect the list of buffers whose name matches your test,
then replace 
<code>return t</code> by 
<code>collect b</code> and you're done.  Really, this 
<code>loop</code> thing
is worth learning.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 20 Jun 2011 00:15:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/06/20-dont-be-afraid-of-cl.html</guid>
</item>

<item>
  <title>el-get 2.2
  </title>
  <link>http://tapoueh.org/blog/2011/05/26-el-get-22.html
  </link>
  <description><![CDATA[<p>We've spotted a little too late for our own taste a discrepancy in the
source tree: a work in progress patch landed in git just before to release
<a href='https://github.com/dimitri/el-get'>el-get</a> stable.  So we cleaned the tree (thanks again 
<a href='http://julien.danjou.info/'>Julien</a>), branched a
stable maintenance tree, and released 
<code>2.2</code> from there.
</p><p>You're back to enjoying 
<code>el-get</code> :)
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 26 May 2011 12:00:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/05/26-el-get-22.html</guid>
</item>

<item>
  <title>el-get 2.1
  </title>
  <link>http://tapoueh.org/blog/2011/05/26-el-get-21.html
  </link>
  <description><![CDATA[<p>Current 
<a href='https://github.com/dimitri/el-get'>el-get</a> status is stable, ready for daily use and packed with extra
features that make life easier.  There are some more things we could do, as
always, but they will be about smoothing things further.
</p><h2>Latest released version</h2><p><a href='https://github.com/dimitri/el-get'>el-get</a> version 
<code>2.1</code> is available, with a boatload of features, including
autoloads support, byte-compiling in an external 
<em>clean room</em> 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> instance,
custom support, lazy initialisation support (defering all 
<em>init</em> functions to
<code>eval-after-load</code>), and multi repositories 
<code>ELPA</code> support.
</p><h2>Version numbering</h2><p>Version String are now inspired by how Emacs itself numbers its versions.
First is the major version number, then a dot, then the minor version
number.  The minor version number is 
<code>0</code> when still developping the next major
version.  So 
<code>3.0</code> is a developer release while 
<code>3.1</code> will be the next stable
release.
</p><p>Please note that this versioning policy has been picked while backing
<code>1.2~dev</code>, so 
<code>1.0</code> was a 
<em>stable</em> release in fact.  Ah, history.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 26 May 2011 10:00:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/05/26-el-get-21.html</guid>
</item>

<item>
  <title>Mailq modeline display
  </title>
  <link>http://tapoueh.org/blog/2011/05/05-mailq-modeline-display.html
  </link>
  <description><![CDATA[<p>If you've not been following along, you might have missed it: it appears to
me that even today, in 2011, mail systems work much better when setup the
old way.  Meaning with a local 
<a href='http://en.wikipedia.org/wiki/Mail_Transfer_Agent'>MTA</a> for outgoing mail.  With some niceties,
such as 
<a href='http://tapoueh.org/articles/news/_Postfix_sender_dependent_relayhost_maps.html'>sender dependent relayhost maps</a>.
</p><p>That's why I needed 
<a href='http://tapoueh.org/projects.html#sec21'>M-x mailq</a> to display the 
<em>mail queue</em> and have some easy
shortcuts in order to operate it (mainly 
<code>f runs the command
mailq-mode-flush</code>, but per site and per id delivery are useful too).
</p><p>Now, I also happen to setup outgoing mail routes to walk through an 
<em>SSH
tunnel</em>, which thanks to both 
<a href='http://www.manpagez.com/man/5/ssh_config/'>~/.ssh/config</a> and 
<a href='https://github.com/dimitri/cssh'>cssh</a> (
<code>C-= runs the
command cssh-term-remote-open</code>, with completion) is a couple of
keystrokes away to start.  Well it still happens to me to forget about
starting it, which causes mails to hold in a queue until I realise it's not
delivered, which always take just about too long.
</p><p>A solution I've been thinking about is to add a little flag in the 
<a href='http://www.gnu.org/s/emacs/manual/html_node/elisp/Mode-Line-Format.html'>modeline</a>
in my 
<a href='http://www.gnus.org/'>gnus</a> 
<code>*Group*</code> and 
<code>*Summary*</code> buffers.  The flag would show up as ✔ when
no mail is queued and waiting for me to open the tunnel, or ✘ as soon as the
queue is not empty.  Here's what it looks like here:
</p><center><img src='http://tapoueh.org/images/mailq-modeline-display.png' /></center><p>Well I'm pretty happy with the setup.  The flag is refreshed every minute,
and here's as an example how I did setup 
<code>mailq</code> in my 
<a href='https://github.com/dimitri/el-get'>el-get-sources</a> setup:
</p><pre><code>(:name mailq
		:after (lambda () (mailq-modeline-display)))
</code></pre><p>I'm not sure how many of you dear readers are using a local MTA to deliver
your mails, but well, the ones who do (or consider doing so) might even find
this article useful!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 05 May 2011 14:10:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/05/05-mailq-modeline-display.html</guid>
</item>

<item>
  <title>Emacs and PostgreSQL, PL line numbering
  </title>
  <link>http://tapoueh.org/blog/2011/04/23-emacs-and-postgresql-pl-line-numbering.html
  </link>
  <description><![CDATA[<p>A while ago I've been fixing and publishing 
<a href='https://github.com/dimitri/pgsql-linum-format'>pgsql-linum-format</a> separately.
That allows to number 
<code>PL/whatever</code> code lines when editing from 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a>, and
it's something very useful to turn on when debugging.
</p><center><img src='http://tapoueh.org/images/emacs-pgsql-linum.png' /></center><p>The carrets on the 
<em>fringe</em> in the emacs window are the result of
<code>(setq-default indicate-buffer-boundaries &#039;left)</code> and here it's
just overloading the image somehow.  But the idea is to just 
<code>M-x linum-mode</code>
when you need it, at least that's my usage of it.
</p><p>You can use 
<a href='https://github.com/dimitri/el-get'>el-get</a> to easily get (then update) this little 
<code>Emacs</code> extension.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sat, 23 Apr 2011 10:30:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/04/23-emacs-and-postgresql-pl-line-numbering.html</guid>
</item>

<item>
  <title>Emacs Kicker
  </title>
  <link>http://tapoueh.org/blog/2011/04/15-emacs-kicker.html
  </link>
  <description><![CDATA[<p>Following up on the very popular 
<a href='https://github.com/technomancy/emacs-starter-kit'>emacs-starter-kit</a>, I'm now proposing the
<a href='https://github.com/dimitri/emacs-kicker'>emacs-kicker</a>.  It's about the 
<code>.emacs</code> file you've seen in older posts here,
which I maintain for some colleagues.  After all, if they find it useful,
some more people might to, so I've decided to publish it.
</p><p>What you'll find is a very simple 
<code>128</code> lines 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> user init file, based on
<a href='https://github.com/dimitri/el-get'>el-get</a> for external packages.  A not so 
<em>random</em> selection of those is used,
here's the list when you hide some details:
</p><pre><code>&#039;(el-get			; el-get is self-hosting
   escreen            		; screen for emacs, C-\ C-h
   php-mode-improved		; if you&#039;re into php...
   psvn				; M-x svn-status
   switch-window		; takes over C-x o
   auto-complete		; complete as you type with overlays
   emacs-goodies-el		; the debian addons for emacs
   yasnippet			; powerful snippet mode
   zencoding-mode		; http://www.emacswiki.org/emacs/ZenCoding
   (:name buffer-move		; move buffers around in windows
   (:name smex			; a better (ido like) M-x
   (:name magit			; git meet emacs, and a binding
   (:name goto-last-change	; move pointer back to last change
</code></pre><p>Another interresting thing to note in this 
<code>kicker</code> is a choice of some key
bindings that are rather unusual (yet) I guess.
</p><pre><code>(global-set-key (kbd &quot;C-x C-b&quot;) &#039;ido-switch-buffer)
(global-set-key (kbd &quot;C-x C-c&quot;) &#039;ido-switch-buffer)
(global-set-key (kbd &quot;C-x B&quot;) &#039;ibuffer)
</code></pre><p>Yes, you see that I've rebound 
<code>C-x C-c</code> to switching buffers.  That key is
really easy to use and I don't think that 
<code>M-x kill-emacs</code> deserves it.  Keys
that are so easy to use should be kept for frequent actions, and quiting
emacs is a once-a-day to once-a-month action here.  And you can still quit
from the window manager button or from the menu or from 
<code>M-x</code>.
</p><p>Also 
<em>Mac</em> users are not left behind, you will see some settings that either
are adapted to the system (like choosing another 
<em>font</em>, keep displaying the
<code>menu-bar</code> or not installing the darkish 
<code>tango-color-mode</code> on this system,
where it renders poorly in my opinion), as you can see here:
</p><pre><code>(if (string-match &quot;apple-darwin&quot; system-configuration)
    (set-face-font &#039;default &quot;Monaco-13&quot;)
  (set-frame-font &quot;Monospace-10&quot;))

(when (string-match &quot;apple-darwin&quot; system-configuration)
  (setq mac-allow-anti-aliasing t)
  (setq mac-command-modifier &#039;meta)
  (setq mac-option-modifier &#039;none))
</code></pre><p>So all in all, I don't expect this 
<code>emacs-kicker</code> to please everyone, but I
expect it to be simple and rich enough (thanks to 
<a href='https://github.com/dimitri/el-get'>el-get</a>), and it should be
a good 
<em>kick start</em> that's easy to adapt.
</p><p>If you want to try it without installing it it's very easy to do so.  Just
clone the 
<code>git</code> repository then start an 
<code>Emacs</code> that will use this.  For
example that could be, using the excellent 
<a href='http://emacsformacosx.com/'>Emacs For MacOSX</a>:
</p><pre><code>$ /Applications/Emacs.app/Contents/MacOS/Emacs -Q -l init.el 
</code></pre><p>I hope some readers will find it useful! :)
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 15 Apr 2011 21:30:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/04/15-emacs-kicker.html</guid>
</item>

<item>
  <title>desktop-mode and readahead
  </title>
  <link>http://tapoueh.org/blog/2011/02/23-desktop-mode-and-readahead.html
  </link>
  <description><![CDATA[<p>I'm using 
<a href='http://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Save-Mode.html#Desktop-Save-Mode'>Desktop Save Mode</a> so that 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> knows to open again all the
buffers I've been using.  That goes quite well with how often I start 
<code>Emacs</code>,
that is once a week or once a month.  Now, 
<code>M-x ibuffer</code> last line is as
following:
</p><pre><code>718 buffers         19838205                  668 files, 15 processes
</code></pre><p>That means that at startup, 
<code>Emacs</code> will load that many files.  In order not
to have to wait until it's done doing so, I've setup things this way:
</p><pre><code>;; and the session
(setq desktop-restore-eager 20
      desktop-lazy-verbose nil)
(desktop-save-mode 1)
(savehist-mode 1)
</code></pre><p>Problem is that it's still slow.  An idea I had was to use the 
<a href='https://fedorahosted.org/readahead/browser/README'>readahead</a>
tool that allows reducing some distributions boot time.  Of course this tool
is not expecting the same file format as 
<code>emacs-desktop</code> uses.  Still,
converting is quite easy is some 
<code>awk</code> magic.  Here's the result:
</p><pre><code>;;; dim-desktop.el --- Dimitri Fontaine
;;
;; Allows to prepare a readahead file list from desktop-save

(require &#039;desktop)

(defvar dim-desktop-file-readahead-list
  &quot;~/.emacs.desktop.readahead&quot;
  &quot;*Where to save the emacs desktop `readahead` file list&quot;)

(defvar dim-desktop-filelist-command
  &quot;gawk -F &#039;[ \&quot;]&#039; &#039;/desktop-.*-buffer/ {getline; if($4) print $4}&#039; %s&quot;
  &quot;Command to run to prepare the readahead file list&quot;)

(defun dim-desktop-get-readahead-file-list (&amp;optional filename dir)
  &quot;get the file list for readahead from dekstop file in DIR, or ~&quot;
  (with-temp-file (or filename dim-desktop-file-readahead-list)
    (insert
     (shell-command-to-string
      (format dim-desktop-filelist-command
	      (expand-file-name desktop-base-file-name (or dir &quot;~&quot;)))))))

;; This will not work because the hook is run before to add the buffers into
;; the desktop file.
;;
;;(add-hook &#039;desktop-save-hook &#039;dim-desktop-get-readahead-file-list)

;; so instead, advise the function
(defadvice desktop-save (after desktop-save-readahead activate)
  &quot;Prepare a readahead(8) file for the desktop file&quot;
  (dim-desktop-get-readahead-file-list))

(provide &#039;dim-desktop)
</code></pre><p>The 
<code>awk</code> construct 
<code>getline</code> allows to process the next line of the input file,
which is very practical here (and in a host of other situations).  Now that
we have a file containing the list of files 
<code>Emacs</code> will load, we have to
tweak the system to 
<code>readahead</code> those disk blocks.  As I'm currently using 
<a href='http://kde.org/'>KDE</a>
again, I've done it thusly:
</p><pre><code>% cat ~/.kde/Autostart/readahead.emacs.sh
#! /bin/bash

# just readahead the emacs desktop files
# this file listing is maintained directly from Emacs itself
readahead ~/.emacs.desktop.readahead
</code></pre><p>So, well, it works.  The files that 
<code>Emacs</code> will need are pre-read, so at the
time the desktop really gets to them, I see no more disk activity (laptops
have a led to see that happening).  But the desktop loading time has not
changed...
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Wed, 23 Feb 2011 16:45:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/02/23-desktop-mode-and-readahead.html</guid>
</item>

<item>
  <title>Starting afresh with el-get
  </title>
  <link>http://tapoueh.org/blog/2011/01/11-starting-afresh-with-el-get.html
  </link>
  <description><![CDATA[<p>It so happens that a colleague of mine wanted to start using 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> but
couldn't get to it. He insists on having proper color themes in all
applications and some sensible defaults full of nifty add-ons everywhere,
and didn't want to have to learn that much about 
<em>Emacs</em> and 
<em>Emacs Lisp</em> to get
started. I'm not even sure that he will 
<a href='http://www.gnu.org/software/emacs/tour/'>Take the Emacs tour</a>.
</p><p>You would tell me that there's nothing we can do for so unfriendly
users. Well, here's what I did:
</p><pre><code>;; emacs setup

(add-to-list &#039;load-path &quot;~/.emacs.d/el-get/el-get&quot;)
(require &#039;el-get)
(setq
 el-get-sources 
 &#039;(el-get
   php-mode-improved
   psvn
   auto-complete
   switch-window

   (:name buffer-move
	  :after (lambda ()
		   (global-set-key (kbd &quot;&lt;C-S-up&gt;&quot;)     &#039;buf-move-up)
		   (global-set-key (kbd &quot;&lt;C-S-down&gt;&quot;)   &#039;buf-move-down)
		   (global-set-key (kbd &quot;&lt;C-S-left&gt;&quot;)   &#039;buf-move-left)
		   (global-set-key (kbd &quot;&lt;C-S-right&gt;&quot;)  &#039;buf-move-right)))

   (:name magit
	  :after (lambda ()
		   (global-set-key (kbd &quot;C-x C-z&quot;) &#039;magit-status)))

   (:name goto-last-change
	  :after (lambda ()
		   ;; azerty keyboard here, don&#039;t use C-x C-/
		   (global-set-key (kbd &quot;C-x C-_&quot;) &#039;goto-last-change)))))

(when window-system
   (add-to-list &#039;el-get-sources  &#039;color-theme-tango))

(el-get &#039;sync)

;; visual settings
(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(line-number-mode 1)
(column-number-mode 1)

;; Use the clipboard, pretty please, so that copy/paste &quot;works&quot;
(setq x-select-enable-clipboard t)

(set-frame-font &quot;Monospace-10&quot;)

(global-hl-line-mode)

;; suivre les changements exterieurs sur les fichiers
(global-auto-revert-mode 1)

;; pour les couleurs dans M-x shell
(autoload &#039;ansi-color-for-comint-mode-on &quot;ansi-color&quot; nil t)
(add-hook &#039;shell-mode-hook &#039;ansi-color-for-comint-mode-on)

;; S-fleches pour changer de fen&#xEA;tre
(windmove-default-keybindings)
(setq windmove-wrap-around t)

;; find-file-at-point quand &#xE7;a a du sens
(setq ffap-machine-p-known &#039;accept) ; no pinging
(setq ffap-url-regexp nil) ; disable URL features in ffap
(setq ffap-ftp-regexp nil) ; disable FTP features in ffap
(define-key global-map (kbd &quot;C-x C-f&quot;) &#039;find-file-at-point)

(require &#039;ibuffer)
(global-set-key &quot;\C-x\C-b&quot; &#039;ibuffer)

;; use iswitchb-mode for C-x b
(iswitchb-mode)

;; I can&#039;t remember having meant to use C-z as suspend-frame
(global-set-key (kbd &quot;C-z&quot;) &#039;undo)

;; winner-mode pour revenir sur le layout pr&#xE9;c&#xE9;dent C-c &lt;left&gt;
(winner-mode 1)

;; dired-x pour C-x C-j
(require &#039;dired-x)

;; full screen
(defun fullscreen ()
  (interactive)
  (set-frame-parameter nil &#039;fullscreen
		       (if (frame-parameter nil &#039;fullscreen) nil &#039;fullboth)))
(global-set-key [f11] &#039;fullscreen)
</code></pre><p>With just this simple 87 lines (all included) of setup, my local user is
very happy to switch to using 
<a href='http://www.gnu.org/software/emacs/'>our favorite editor</a>. And he's not even afraid
(yet) of his 
<code>~/.emacs</code>. I say that's a very good sign of where we are with
<a href='https://github.com/dimitri/el-get'>el-get</a>!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 11 Jan 2011 16:20:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2011/01/11-starting-afresh-with-el-get.html</guid>
</item>

<item>
  <title>el-get 1.1, with 174 recipes
  </title>
  <link>http://tapoueh.org/blog/2010/12/20-el-get-11-with-174-recipes.html
  </link>
  <description><![CDATA[<p>Yes, you read it well, 
<a href='https://github.com/dimitri/el-get'>el-get</a> currently 
<em>features</em> 
<code>174</code> 
<a href='https://github.com/dimitri/el-get/tree/master/recipes'>recipes</a>, and is now
reaching the 
<code>1.1</code> release. The reason for this release is mainly that I have
two big chunks of code to review and the current code has been very stable
for awhile. It seems better to do a release with the stable code that exists
now before to shake it this much. If you're wondering when to jump in the
water and switch to using 
<em>el-get</em>, now is a pretty good time.
</p><h2>New source types</h2><p>We now have support for the 
<a href='http://www.archlinux.org/pacman/'>pacman</a> package management for 
<a href='http://www.archlinux.org/'>archlinux</a>, and a
way to handle a different package name in the recipe and in the
distribution. We also have support for 
<a href='http://mercurial.selenic.com/'>mercurial</a> and 
<a href='http://subversion.tigris.org/'>subversion</a> and 
<a href='http://darcs.net/'>darcs</a>.
</p><p>Also, 
<a href='http://wiki.debian.org/Apt'>apt-get</a> will sometime prompt you to validate its choices, that's the
infamous 
<em>Do you want to continue?</em> prompt. We now handle that smoothly.
</p><h2>(el-get 'sync)</h2><p>In 
<code>1.1</code>, that really means 
<em>synchronous</em>. That means we install one package
after the other, and any error will stop it all. Before that, it was an
active wait loop over a parallel install: this option is still available
through calling 
<code>(el-get &#039;wait)</code>.
</p><h2>No more <em>failed to install</em></h2><p>Exactly. This error you may have encountered sometime is due to trying to
install a package over a previous failed install attempt (network outage,
disk full, bad work-in-progress recipe, etc). After awhile in the field it
was clear that no case where found where you would regret it if 
<a href='https://github.com/dimitri/el-get'>el-get</a> just
did removed the previous failed installation for you before to go and
install again, as aked. So that's now automatic.
</p><h2>Featuring an overhauled :build facility</h2><p>The 
<code>build</code> commands can now either be a list, as before, or some that we
<em>evaluate</em> for you. That allows for easier to maintain 
<em>recipes</em>, and here's an
exemple of that:
</p><pre><code>(:name distel
       :type svn
       :url &quot;http://distel.googlecode.com/svn/trunk/&quot;
       :info &quot;doc&quot;
       :build `,(mapcar
                 (lambda (target)
                   (concat &quot;make &quot; target &quot; EMACS=&quot; el-get-emacs))
                 &#039;(&quot;clean&quot; &quot;all&quot;))
       :load-path (&quot;elisp&quot;)
       :features distel)
</code></pre><p>As you see that also allows for maintainance of multi-platform build
recipes, and multiple emacs versions too. It's still a little too much on
the 
<em>awkward</em> side of things, though, and that's one of the ongoing work that
will happen for next version.
</p><h2>Misc improvements</h2><p>We are now able to 
<code>byte-compile</code> your packages, and offer some more hooks
(
<code>el-get-init-hooks</code> has been asked with a nice usage example). There's a new
<code>:localname</code> property that allows to pick where to save the local file when
using 
<code>HTTP</code> method for retrieval, and that in turn allows to fix some
<em>recipes</em>.
</p><pre><code>(:name xcscope
       :type http
       :url &quot;http://cscope.cvs.sourceforge.net/viewvc/cscope/cscope/contrib/xcscope/xcscope.el?revision=1.14&amp;content-type=text%2Fplain&quot;
       :localname &quot;xscope.el&quot;
       :features xcscope)
</code></pre><p>Oh and you even get 
<code>:before</code> user function support, even if needing it often
shows that you're doing it in a strange way. More often than not it's
possible to do all you need to in the 
<code>:after</code> function, but this tool is
there so that you spend less time on having a working environment, not more,
right? :)
</p><h2>Switch notice</h2><p>All in all, if you're already using 
<a href='https://github.com/dimitri/el-get'>el-get</a> you should consider switching to
<code>1.1</code> (by issuing 
<code>M-x el-get-update</code> of course), and if you're hesitating, just
join the fun now!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 20 Dec 2010 16:45:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/12/20-el-get-11-with-174-recipes.html</guid>
</item>

<item>
  <title>el-get reaches 1.0
  </title>
  <link>http://tapoueh.org/blog/2010/10/07-el-get-reaches-10.html
  </link>
  <description><![CDATA[<p>It's been a week since the last commits in the 
<a href='http://github.com/dimitri/el-get'>el-get repository</a>, and those
were all about fixing and adding recipes, and about notifications. Nothing
like 
<em>core plumbing</em> you see. Also, 
<code>0.9</code> was released on 
<em>2010-08-24</em> and felt
pretty complete already, then received lots of improvements. It's high time
to cross the line and call it 
<code>1.0</code>!
</p><p>Now existing users will certainly just be moderatly happy to see the tool
reach that version number, depending whether they think more about the bugs
they want to see fixed (ftp is supported, only called http) and the new
features they want to see in (
<em>info</em> documentation) or more about what 
<code>el-get</code>
does for them already today...
</p><p>For the new users, or the yet-to-be-convinced users, let's take some time
and talk about 
<code>el-get</code>. A 
<em>FAQ</em> like session might be best.
</p><h2>How is el-get different from ELPA?</h2><p><a href='http://tromey.com/elpa/'>ELPA</a> is the 
<em>Emacs Lisp Package Archive</em> and is also known as 
<code>package.el</code>, to
be included in Emacs 24. This allows emacs list extension authors to 
<em>package</em>
their work. That means they have to follow some guidelines and format their
contribution, then propose it for upload.
</p><p>This requires licence checks (good) and for the 
<a href='http://elpa.gnu.org/'>new official ELPA mirror</a> it
even requires dead-tree papers exchange and contracts and copyright
assignments, I believe.
</p><h2>Why have both?</h2><p>While 
<em>ELPA</em> is a great thing to have, it's so easy to find some high quality
Emacs extension out there that are not part of the offer. Either authors are
not interrested into uploading to ELPA, or they don't know how to properly
<em>package</em> for it (it's only simple for single file extensions, see).
</p><p>So 
<code>el-get</code> is a pragmatic answer here. It's there because it so happens that
I don't depend only on emacs extensions that are available with Emacs
itself, in my distribution 
<code>site-lisp</code> and in 
<code>ELPA</code>. I need some more, and I
don't need it to be complex to find it, fetch it, init it and use it.
</p><p>Of course I could try and package any extension I find I need and submit it
to 
<code>ELPA</code>, but really, to do that nicely I'd need to contact the extension
author (
<em>upstream</em>) for him to accept my patch, and then consider a fork.
</p><p>With 
<code>el-get</code> I propose distributed packaging if you will. Let's have a look
at two 
<em>recipes</em> here. First, the 
<code>el-get</code> one itself:
</p><pre><code>(:name el-get
       :type git
       :url &quot;git://github.com/dimitri/el-get.git&quot;
       :features el-get
       :compile &quot;el-get.el&quot;)
</code></pre><p>Then a much more complex one, the 
<a href='http://bbdb.sourceforge.net/'>bbdb</a> one:
</p><pre><code>(:name bbdb
       :type git
       :url &quot;git://github.com/barak/BBDB.git&quot;
       :load-path (&quot;./lisp&quot; &quot;./bits&quot;)
       :build (&quot;./configure&quot; &quot;make autoloads&quot; &quot;make&quot;)
       :build/darwin (&quot;./configure --with-emacs=/Applications/Emacs.app/Contents/MacOS/Emacs&quot; &quot;make autoloads&quot; &quot;make&quot;)
       :features bbdb
       :after (lambda () (bbdb-initialize))
       :info &quot;texinfo&quot;)
</code></pre><p>The idea is that it's much simpler to just come up with a recipe like this
than to patch existing code and upload it to 
<code>ELPA</code>. And anybody can share
their 
<em>recipes</em> very easily, with or without proposing them to me, even if I
very much like to add some more in the official 
<code>el-get</code> list.
</p><p>As a user, you don't even need to twiddle with recipes, mostly, because we
already have them for you. What you do instead is list them in
<code>el-get-sources</code>.
</p><h2>So, show me how you use it?</h2><p>Yeah, sure. Here's a sample of my 
<code>dim-packages.el</code> file, part of my 
<code>.emacs</code>
<em>suite</em>. Yeah a single 
<code>.emacs</code> does not suit me anymore, it's a complete
<code>.emacs.d</code> now, but that's because that's how I like it organised, you
know. So, here's the example:
</p><pre><code>;;; dim-packages.el --- Dimitri Fontaine
;;
;; Set el-get-sources and call el-get to init all those packages we need.
(require &#039;el-get)
(add-to-list &#039;el-get-recipe-path &quot;~/dev/emacs/el-get/recipes&quot;)

(setq el-get-sources
      &#039;(cssh el-get switch-window vkill google-maps yasnippet verbiste mailq sicp

	(:name magit
	       :after (lambda () (global-set-key (kbd &quot;C-x C-z&quot;) &#039;magit-status)))

	(:name asciidoc
	       :type elpa
	       :after (lambda ()
			(autoload &#039;doc-mode &quot;doc-mode&quot; nil t)
			(add-to-list &#039;auto-mode-alist &#039;(&quot;\\.adoc$&quot; . doc-mode))
			(add-hook &#039;doc-mode-hook &#039;(lambda ()
						    (turn-on-auto-fill)
						    (require &#039;asciidoc)))))

	(:name goto-last-change
	       :after (lambda ()
			(global-set-key (kbd &quot;C-x C-/&quot;) &#039;goto-last-change)))

	(:name auto-dictionary :type elpa)
	(:name gist            :type elpa)
	(:name lisppaste       :type elpa)))

(el-get) ; that could/should be (el-get &#039;sync)
(provide &#039;dim-packages)
</code></pre><p>Ok that's not all of it, but it should give you a nice idea about what
problem I solve with 
<code>el-get</code> and how. In my emacs startup sequence, somewhere
inside my 
<code>~/.emacs.d/init.el</code> file, I have a line that says 
<code>(require
&#039;dim-packages)</code>. This will set 
<code>el-get-sources</code> to the list just above, then
call 
<code>(el-get)</code>, the main function.
</p><p>This main function will check each given package and install it if necessary
(including 
<em>build</em> the package, as in 
<code>make autoloads; make</code>), then 
<em>init</em>
it. What 
<em>init</em> means exactly depends on what the recipe says. That can
include 
<em>byte-compiling</em> some files, caring about 
<em>load-path</em>, 
<em>load</em> and 
<em>require</em>
commands, caring about 
<em>Info-directory-list</em> and 
<code>ginstall-info</code> too, and some
more.
</p><p>So in short, it will make it so that your emacs instance is ready for you to
use. And you get the choice to use the given 
<code>el-get</code> recipes as-is, like I
did for 
<code>cssh</code>, 
<code>el-get</code>, 
<code>switch-window</code> and others, up to 
<code>sicp</code>, or to tweak them
partly, like in the 
<code>magit</code> example where I've added a user init function (the
<code>:after</code> property) to bind 
<code>magit-status</code> to 
<code>C-x C-z</code> here. You can even embed a
full recipe inline in the 
<code>el-get-sources</code> variable, that's the case for each
item that gives its 
<code>:type</code> property, like 
<code>asciidoc</code> or 
<code>gist</code>.
</p><p>And, as you see, we're using 
<code>ELPA</code> a lot in this sources, so 
<code>el-get</code> isn't
striving to replace it at all, it's just trying to accomodate to a broader
world.
</p><h2>I read that the el-get-install is asynchronous, tell me more.</h2><p>Yeah, right, the example above says 
<code>(el-get)</code> at its end, and in the cases
when 
<code>el-get</code> has to install or build sources, this will be done
asynchronously. Which means that not only several sources will get processed
at once (using your multi cores, yeah) but that it will let emacs start up
as if it was ready.
</p><p>It happens that's usually what I want, because I seldom add sources in my
setup, but in theory that can break your emacs. What I do is start it again
or fix by hand, what you can do instead is 
<code>(el-get &#039;sync)</code> so that emacs is
blocked waiting for 
<code>el-get</code> to properly install and initialize all the
sources you've setup. Your choice, just add the 
<code>&#039;sync</code> parameter there.
</p><h2>Now, explain me why it is better this way, again, please?</h2><p>Well, before I wrote 
<code>el-get</code>, trying out a new extension, setting it up etc
was something quite involved, and that I had to redo on several
machines. The only way not to redo it was to include the extension's code
into my own 
<code>git</code> repository (my 
<code>emacs.d</code> is in 
<code>git</code>, of course).
</p><p>And putting code I don't maintain into my own 
<code>git</code> repository is something I
frown upon. I have no business pretending I'll maintain the code, and I know
I will never think to check the 
<code>URL</code> where I've found it for updates. That's
when I though noting down the 
<code>URL</code> somewhere.
</p><p>Also, what about sharing the extension with friends. Uneasy, at best.
</p><p>Enters 
<code>el-get</code> and I can just add an entry to 
<code>el-get-sources</code>, based on a file
somewhere in my own 
<code>el-get-recipe-path</code>. When I'm happy with this file, I can
contribute it to 
<code>el-get</code> proper or just send it over to any interested
recipient. Adding it to your sources is easy. Copy the file in your
<code>el-get-recipe-path</code> somewhere, add its name to your 
<code>el-get-sources</code>, then 
<code>M-x
el-get-install</code> it. Done. If you were given the 
<code>:after</code> function, it's all
setup already.
</p><p>If you contribute the recipe to 
<code>el-get</code>, then 
<code>M-x el-get-update RET el-get
RET</code> and you get it on this other machine where you also use Emacs. Or you
can tell your friend to do the same and benefit from your 
<em>packaging</em>.
</p><h2>Well, sounds good. What recipes do you have already?</h2><p>I count 
<code>67</code> of them already. One of them is just a book in 
<em>info</em> format, with
no 
<em>elisp</em> at all, can you spot it?
</p><pre><code>ELISP&gt; (directory-files &quot;~/dev/emacs/el-get/recipes/&quot; nil &quot;el$&quot;)

(&quot;auctex.el&quot; &quot;auto-complete-etags.el&quot; &quot;auto-complete-extension.el&quot;
&quot;auto-complete.el&quot; &quot;auto-install.el&quot; &quot;autopair.el&quot; &quot;bbdb.el&quot;
&quot;blender-python-mode.el&quot; &quot;color-theme-twilight.el&quot; &quot;color-theme.el&quot;
&quot;cssh.el&quot; &quot;django-mode.el&quot; &quot;el-get.el&quot; &quot;emacs-w3m.el&quot; &quot;emacschrome.el&quot;
&quot;emms.el&quot; &quot;ensime.el&quot; &quot;erc-highlight-nicknames.el&quot; &quot;erc-track-score.el&quot;
&quot;escreen.el&quot; &quot;filladapt.el&quot; &quot;flyguess.el&quot; &quot;gist.el&quot; &quot;google-maps.el&quot;
&quot;google-weather.el&quot; &quot;goto-last-change.el&quot; &quot;haskell-mode.el&quot;
&quot;highlight-parentheses.el&quot; &quot;hl-sexp.el&quot; &quot;levenshtein.el&quot; &quot;magit.el&quot;
&quot;mailq.el&quot; &quot;maxframe.el&quot; &quot;multi-term.el&quot; &quot;muse-blog.el&quot; &quot;nognus.el&quot;
&quot;nterm.el&quot; &quot;nxhtml.el&quot; &quot;offlineimap.el&quot; &quot;package.el&quot; &quot;popup-kill-ring.el&quot;
&quot;pos-tip.el&quot; &quot;pov-mode.el&quot; &quot;psvn.el&quot; &quot;pymacs.el&quot; &quot;rainbow-mode.el&quot;
&quot;rcirc-groups.el&quot; &quot;rinari.el&quot; &quot;ropemacs.el&quot; &quot;rt-liberation.el&quot; &quot;scratch.el&quot;
&quot;session.el&quot; &quot;sicp.el&quot; &quot;smex.el&quot; &quot;switch-window.el&quot; &quot;textile-mode.el&quot;
&quot;todochiku.el&quot; &quot;twitter.el&quot; &quot;twittering-mode.el&quot; &quot;undo-tree.el&quot;
&quot;verbiste.el&quot; &quot;vimpulse-surround.el&quot; &quot;vimpulse.el&quot; &quot;vkill.el&quot; &quot;xcscope.el&quot;
&quot;xml-rpc-el.el&quot; &quot;yasnippet.el&quot;)
</code></pre><h2>Ok, I want to try it, what's next?</h2><p>Visit the following 
<code>URL</code> 
<a href='http://github.com/dimitri/el-get'>http://github.com/dimitri/el-get</a> and follow the
install instructions. You're given a 
<em>scratch installer</em> there, that's some
<em>elisp</em> code you copy paste into 
<code>*scratch*</code> then execute there, and you have
<code>el-get</code> ready to serve.
</p><p>An excellent idea I stole at 
<code>ELPA</code>!
</p><h2>Hey, I already know what el-get is, what's new in 1.0?</h2><p>The 
<em>changelog</em> is quite full of good stuff, really:
</p><ul><li>Implement el-get recipes so that el-get-sources can be a simple list</li></ul><p>   of symbols. Now that there's an authoritative git repository, where
   to share the recipes is easy.
</p><ul><li>Add support for emacswiki directly, save from having to enter the URL</li></ul><ul><li>Implement package status on-disk saving so that installing over a</li></ul><p>   previously failed install is in theory possible. Currently `el-get'
   will refrain from removing your package automatically, though.
</p><ul><li>Fix ELPA remove method, adding a "removed" state too.</li></ul><ul><li>Implement CVS login support.</li></ul><ul><li>Add lots of recipes</li></ul><ul><li>Add support for `system-type' specific build commands</li></ul><ul><li>Byte compile files from the load-path entries or :compile files</li></ul><ul><li>Implement support for git submodules with the command</li></ul><p>   `git submodule update --init --recursive`
</p><ul><li>Add catch-all post-install and post-update hooks</li></ul><ul><li>Add desktop notification on install/update.</li></ul><h2>I'm still using the deprecated emacswiki version, what now?</h2><p>That version didn't have recipes, and the new version should be perfectly
happy with your current 
<code>el-get-sources</code>, so that I recommend using the
<em>scratch installer</em> too. Don't forget to add 
<code>el-get</code> itself into your
<code>el-get-sources</code> list, of course!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 07 Oct 2010 13:30:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/10/07-el-get-reaches-10.html</guid>
</item>

<item>
  <title>Regexp performances and Finite Automata
  </title>
  <link>http://tapoueh.org/blog/2010/09/26-regexp-performances-and-finite-automata.html
  </link>
  <description><![CDATA[<p>The major reason why I dislike 
<a href='http://www.perl.org/'>perl</a> so much, and 
<a href='http://www.ruby-lang.org'>ruby</a> too, and the thing I'd
want different in the 
<a href='http://www.gnu.org/software/emacs/manual/elisp.html'>Emacs Lisp</a> 
<code>API</code> so far is how they set developers mind
into using 
<a href='http://www.regular-expressions.info/'>regexp</a>. You know the quote, don't you?
</p><blockquote><p>Some people, when confronted with a problem, think “I know, I'll use regular
expressions.” Now they have two problems.
</p></blockquote><p>That said, some situations require the use of 
<em>regexp</em> — or are so much
simpler to solve using them than the maintenance hell you're building here
ain't that big a drag. The given expressiveness is hard to match with any
other solution, to the point I sometime use them in my code (well I use 
<a href='http://www.emacswiki.org/emacs/rx'>rx</a>
to lower the burden sometime, just see this example).
</p><pre><code>(rx bol (zero-or-more blank) (one-or-more digit) &quot;:&quot;)
&quot;^[[:blank:]]*[[:digit:]]+:&quot;
</code></pre><p>The thing you might want to know about 
<em>regexp</em> is that computing them is an
heavy task usually involving 
<em>parsing</em> their representation, 
<em>compiling</em> it to
some executable code, and then 
<em>executing</em> generated code. It's been showed in
the past (as soon as 1968) that a 
<em>regexp</em> is just another way to write a
finite automata, at least as soon as you don't need 
<em>backtracking</em>. The
writing of this article is my reaction to reading
<a href='http://swtch.com/~rsc/regexp/regexp1.html'>Regular Expression Matching Can Be Simple And Fast</a> (but is slow in Java,
Perl, PHP, Python, Ruby, ...), a very interesting article — see the
benchmarks in there.
</p><p>The bulk of it is that we find mainly two categories of 
<em>regexp</em> engine in the
wild, those that are using 
<a href='http://en.wikipedia.org/wiki/Nondeterministic_finite_state_machine'>NFA</a> and 
<a href='http://en.wikipedia.org/wiki/Deterministic_finite_automaton'>DFA</a> intermediate representation
techniques, and the others. Our beloved 
<a href='http://www.postgresql.org/'>PostgreSQL</a> sure offers the feature,
it's the 
<code>~</code> and 
<code>~*</code> 
<a href='http://www.postgresql.org/docs/9.0/interactive/functions-matching.html'>operators</a>. The implementation here is based on
<a href='http://www.arglist.com/regex/'>Henry Spencer</a>'s work, which the aforementioned article says
</p><blockquote><p>became very widely used, eventually serving as the basis for the slow
regular expression implementations mentioned earlier: Perl, PCRE, Python,
and so on.
</p></blockquote><p>Having a look at the actual implementation shows that indeed, current
PostgreSQL code for 
<em>regexp</em> matching uses intermediate representations of
them as 
<code>NFA</code> and 
<code>DFA</code>. The code is quite complex, even more than I though it
would be, and I didn't have the time it would take to check it against the
proposed one from the 
<em>simple and fast</em> article.
</p><pre><code>postgresql/src/backend/regex
  -rw-r--r--   1 dim  staff   4362 Sep 25 20:59 COPYRIGHT
  -rw-r--r--   1 dim  staff    614 Sep 25 20:59 Makefile
  -rw-r--r--   1 dim  staff  28217 Sep 25 20:59 re_syntax.n
  -rw-r--r--   1 dim  staff  16589 Sep 25 20:59 regc_color.c
  -rw-r--r--   1 dim  staff   3464 Sep 25 20:59 regc_cvec.c
  -rw-r--r--   1 dim  staff  25036 Sep 25 20:59 regc_lex.c
  -rw-r--r--   1 dim  staff  16845 Sep 25 20:59 regc_locale.c
  -rw-r--r--   1 dim  staff  35917 Sep 25 20:59 regc_nfa.c
  -rw-r--r--   1 dim  staff  50714 Sep 25 20:59 regcomp.c
  -rw-r--r--   1 dim  staff  17368 Sep 25 20:59 rege_dfa.c
  -rw-r--r--   1 dim  staff   3627 Sep 25 20:59 regerror.c
  -rw-r--r--   1 dim  staff  27664 Sep 25 20:59 regexec.c
  -rw-r--r--   1 dim  staff   2122 Sep 25 20:59 regfree.c
</code></pre><p>So all in all, I'll continue avoiding 
<em>regexp</em> as much as I currently do, and
will maintain my tendency to using 
<a href='http://www.gnu.org/manual/gawk/gawk.html'>awk</a> when I need them on files (it allows
to refine the searching without resorting to more and more pipes in the
command line). And as far as resorting to using 
<em>regexp</em> in PostgreSQL is
concerned, it seems that the code here is already about topnotch. Once more.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sun, 26 Sep 2010 21:00:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/09/26-regexp-performances-and-finite-automata.html</guid>
</item>

<item>
  <title>switch-window reaches 0.8
  </title>
  <link>http://tapoueh.org/blog/2010/09/13-switch-window-reaches-08.html
  </link>
  <description><![CDATA[<p>I wanted to play with the idea of using the whole keyboard for my
<a href='http://github.com/dimitri/switch-window'>switch-window</a> utility, but wondered how to get those keys in the right order
and all. Finally found 
<code>quail-keyboard-layout</code> which seems to exists for such
uses, as you can see:
</p><pre><code>(loop with layout = (split-string quail-keyboard-layout &quot;&quot;) 
  for row from 1 to 4
  collect (loop for col from 1 to 12
 (&quot;q&quot; &quot;w&quot; &quot;e&quot; &quot;r&quot; &quot;t&quot; &quot;y&quot; &quot;u&quot; &quot;i&quot; &quot;o&quot; &quot;p&quot; &quot;[&quot; &quot;]&quot;)
 (&quot;a&quot; &quot;s&quot; &quot;d&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;;&quot; &quot;&#039;&quot; &quot;\\&quot;)
 (&quot;z&quot; &quot;x&quot; &quot;c&quot; &quot;v&quot; &quot;b&quot; &quot;n&quot; &quot;m&quot; &quot;,&quot; &quot;.&quot; &quot;/&quot; &quot; &quot; &quot; &quot;))
</code></pre><p>So now 
<code>switch-window</code> will use that (but only the first 
<code>10</code> letters) instead
of 
<em>hard-coding</em> numbers from 1 to 9 as labels and direct switches. That makes
it more suitable to 
<a href='http://github.com/dimitri/cssh'>cssh</a> users too, I guess.
</p><p>In other news, I think 
<a href='http://github.com/dimitri/el-get'>el-get</a> is about ready for its 
<code>1.0</code> release. Please
test it and report any problem very soon before the release!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 13 Sep 2010 17:45:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/09/13-switch-window-reaches-08.html</guid>
</item>

<item>
  <title>Want to share your recipes?
  </title>
  <link>http://tapoueh.org/blog/2010/08/31-want-to-share-your-recipes.html
  </link>
  <description><![CDATA[<p>Yes, that's another 
<a href='http://github.com/dimitri/el-get/'>el-get</a> related entry. It seems to take a lot of my
attention these days. After having setup the 
<code>git</code> repository so that you can
update 
<code>el-get</code> from within itself (so that it's 
<em>self-contained</em>), the next
logical step is providing 
<em>recipes</em>.
</p><p>By that I mean that 
<code>el-get-sources</code> entries will certainly look a lot alike
between a user and another. Let's take the 
<code>el-get</code> entry itself:
</p><pre><code>(:name el-get
       :type git
       :url &quot;git://github.com/dimitri/el-get.git&quot;
       :features &quot;el-get&quot;)
</code></pre><p>I guess all 
<code>el-get</code> users will have just the same 4 lines in their
<code>el-get-sources</code>. So let's call that a 
<em>recipe</em>, and have 
<code>el-get</code> look for yours
into the 
<code>el-get-recipe-path</code> directories. A recipe is found looking in those
directories in order, and must be named 
<code>package.el</code>. Now, 
<code>el-get</code> already
contains a handful of them, as you can see:
</p><pre><code>ELISP&gt; (directory-files &quot;~/dev/emacs/el-get/recipes/&quot; nil &quot;[^.]$&quot;)
(&quot;auctex.el&quot; &quot;bbdb.el&quot; &quot;cssh.el&quot; &quot;el-get.el&quot; &quot;emms.el&quot; &quot;erc-track-score.el&quot;
 &quot;escreen.el&quot; &quot;google-maps.el&quot; &quot;haskell-mode.el&quot; &quot;hl-sexp.el&quot; &quot;magit.el&quot;
 &quot;muse-blog.el&quot; &quot;nxhtml.el&quot; &quot;psvn.el&quot; &quot;rainbow-mode.el&quot; &quot;rcirc-groups.el&quot;
 &quot;vkill.el&quot; &quot;xcscope.el&quot; &quot;xml-rpc-el.el&quot; &quot;yasnippet.el&quot;)
</code></pre><p>Please note that you can have your own local recipes by adding directories
to 
<code>el-get-recipe-path</code>. So now your minimalistic 
<code>el-get-sources</code> list will
look like 
<code>&#039;(el-get cssh screen)</code>, say. And if you want to override a recipe,
for instance to use the default one but still have a personal 
<code>:after</code>
function containing your own setup, then simply have your 
<code>el-get-source</code>
entry a partial entry. Missing 
<code>:type</code> and 
<code>el-get</code> will merge your local
overrides atop the default one.
</p><p>Finally, the way to share your recipes is by sending me an email with the
file, or to do the same over the 
<code>github</code> interface, I guess I'll still
receive a mail then.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 31 Aug 2010 14:15:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/08/31-want-to-share-your-recipes.html</guid>
</item>

<item>
  <title>Happy Numbers
  </title>
  <link>http://tapoueh.org/blog/2010/08/30-happy-numbers.html
  </link>
  <description><![CDATA[<p>After discovering the excellent 
<a href='http://gwene.org/'>Gwene</a> service, which allows you to subscribe
to 
<em>newsgroups</em> to read 
<code>RSS</code> content (
<em>blogs</em>, 
<em>planets</em>, 
<em>commits</em>, etc), I came to
read this nice article about 
<a href='http://programmingpraxis.com/2010/07/23/happy-numbers/'>Happy Numbers</a>. That's a little problem that
fits well an interview style question, so I first solved it yesterday
evening in 
<a href='http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/List-Processing.html#List-Processing'>Emacs Lisp</a> as that's the language I use the most those days.
</p><center><img src='http://tapoueh.org/images/1_mathematics_digits.gif' /></center><blockquote><p>  A happy number is defined by the following process. Starting with any
  positive integer, replace the number by the sum of the squares of its
  digits, and repeat the process until the number equals 1 (where it will
  stay), or it loops endlessly in a cycle which does not include 1. Those
  numbers for which this process ends in 1 are happy numbers, while those
  that do not end in 1 are unhappy numbers (or sad numbers).
</p></blockquote><p>Now, what about implementing the same in pure 
<code>SQL</code>, for more fun? Now that's
interesting! After all, we didn't get 
<code>WITH RECURSIVE</code> for tree traversal
only, 
<a href='http://archives.postgresql.org/message-id/e08cc0400911042333o5361b21cu2c9438f82b1e55ce@mail.gmail.com'>did we</a>?
</p><p>Unfortunately, we need a little helper function first, if only to ease the
reading of the recursive query. I didn't try to inline it, but here it goes:
</p><pre><code>create or replace function digits(x bigint)
  returns setof int
  language sql
as $$
  select substring($1::text from i for 1)::int
    from generate_series(1, length($1::text)) as t(i)
$$;
</code></pre><p>That was easy: it will output one row per digit of the input number — and
rather than resorting to powers of ten and divisions and remainders, we do
use plain old text representation and 
<code>substring</code>. Now, to the real
problem. If you're read what is an happy number and already did read the
fine manual about 
<a href='http://www.postgresql.org/docs/8.4/interactive/queries-with.html'>Recursive Query Evaluation</a>, it should be quite easy to
read the following:
</p><pre><code>with recursive happy(n, seen) as (
    select 7::bigint, &#039;{}&#039;::bigint[]
  union all
    select sum(d*d), h.seen || sum(d*d)
      from (select n, digits(n) as d, seen
              from happy
           ) as h
  group by h.n, h.seen
    having not seen @&gt; array[sum(d*d)]
)
  select * from happy;
  n  |       seen
-----+------------------
   7 | {}
  49 | {49}
  97 | {49,97}
 130 | {49,97,130}
  10 | {49,97,130,10}
   1 | {49,97,130,10,1}
(6 rows)

Time: 1.238 ms
</code></pre><p>That shows how it works for some 
<em>happy</em> number, and it's easy to test for a
non-happy one, like for example 
<code>17</code>. The query won't cycle thanks to the 
<code>seen</code>
array and the 
<code>having</code> filter, so the only difference between an 
<em>happy</em> and a
<em>sad</em> number will be that in the former case the last line output by the
recursive query will have 
<code>n = 1</code>. Let's expand this knowledge
into a proper function (because we want to be able to have the number we
test for happiness as an argument):
</p><pre><code>create or replace function happy(x bigint)
  returns boolean
  language sql
as $$
with recursive happy(n, seen) as (
    select $1, &#039;{}&#039;::bigint[]
  union all
    select sum(d*d), h.seen || sum(d*d)
      from (select n, digits(n) as d, seen
              from happy
           ) as h
  group by h.n, h.seen
    having not seen @&gt; array[sum(d*d)]
)
  select n = 1 as happy
    from happy
order by array_length(seen, 1) desc nulls last
   limit 1
$$;
</code></pre><p>We need the 
<code>desc nulls last</code> trick in the 
<code>order by</code> because the 
<code>array_length()</code>
of any dimension of an empty array is 
<code>NULL</code>, and we certainly don't want to
return all and any number as unhappy on the grounds that the query result
contains a line 
<code>input, {}</code>. Let's now play the same tricks as in the puzzle
article:
</p><pre><code>=# select array_agg(x) as happy
     from generate_series(1, 50) as t(x)
    where happy(x);
              happy
----------------------------------
 {1,7,10,13,19,23,28,31,32,44,49}
(1 row)

Time: 24.527 ms

=# explain analyze select x
                     from generate_series(1, 10000) as t(x)
                    where happy(x);
                      QUERY PLAN
------------------------------------------------------------
 Function Scan on generate_series t
     (cost=0.00..265.00 rows=333 width=4)
     (actual time=2.938..3651.019 rows=1442 loops=1)
   Filter: happy((x)::bigint)
 Total runtime: 3651.534 ms
(3 rows)

Time: 3652.178 ms
</code></pre><p>(Yes, I tricked the 
<code>EXPLAIN ANALYZE</code> output so that it fits on the page width
here). For what it's worth, finding the first 
<code>10000</code> happy numbers in 
<em>Emacs
Lisp</em> on the same laptop takes 
<code>2830 ms</code>, also running a recursive version of
the code.
</p><h2>Update, the Emacs Lisp version, inline:</h2><pre><code>(defun happy? (&amp;optional n seen)
  &quot;return true when n is a happy number&quot;
  (interactive)
  (let* ((number    (or n (read-from-minibuffer
			   &quot;Is this number happy: &quot;)))
	 (digits    (mapcar
		     &#039;string-to-int
		     (subseq (split-string number &quot;&quot;) 1 -1)))
	 (squares   (mapcar (lambda (x) (* x x)) digits))
	 (happiness (apply &#039;+ squares)))
    (cond ((eq 1 happiness)      t)
	  ((memq happiness seen) nil)
	  (t
	   (happy? (number-to-string happiness)
		   (push happiness seen))))))

(defun find-happy-numbers (&amp;optional limit)
  &quot;find all happy numbers from 1 to limit&quot;
  (interactive)
  (let ((count (or limit
                   (read-from-minibuffer
		    &quot;List of happy numbers from 1 to: &quot;)))
	happy)
    (dotimes (n (string-to-int count))
      (when (happy? (number-to-string (1+ n)))
	(push (1+ n) happy)))
    (nreverse happy)))
</code></pre>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 30 Aug 2010 11:00:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/08/30-happy-numbers.html</guid>
</item>

<item>
  <title>welcome el-get scratch installer
  </title>
  <link>http://tapoueh.org/blog/2010/08/27-welcome-el-get-scratch-installer.html
  </link>
  <description><![CDATA[<p>A very good remark from some users: installing and managing 
<code>el-get</code> should be
simpler. They wanted both an easy install of the thing, and a way to be able
to manage it afterwards (like, update the local copy against the
authoritative source). So I decided it was high time for getting the code
out of my 
<code>~/.emacs.d</code> git repository and up to a public place:
<a href='http://github.com/dimitri/el-get'>http://github.com/dimitri/el-get</a>.
</p><p>Then, I added some documentation (a 
<code>README</code>), and then, a 
<code>*scratch*
installer</code>, following great ideas from 
<code>ELPA</code>. So have at it, it's a copy paste
away! 
</p><p>Don't forget to setup your 
<code>el-get-sources</code> and include there the 
<code>el-get</code>
source for updates, there's nothing magic about it so it's up to you. You
may notice that it's not yet possible to init 
<code>el-get</code> from 
<code>el-get-sources</code>,
though, that's the drawback of the lack of magic. So you will have to still
add an explicit 
<code>(require &#039;el-get)</code> before to go and define you own
<code>el-get-sources</code> then finally 
<code>(el-get)</code>. I don't think that's a problem I need
to solve, though.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 27 Aug 2010 14:15:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/08/27-welcome-el-get-scratch-installer.html</guid>
</item>

<item>
  <title>el-get news
  </title>
  <link>http://tapoueh.org/blog/2010/08/26-el-get-news.html
  </link>
  <description><![CDATA[<p>I've been receiving some requests for 
<a href='http://www.emacswiki.org/emacs/el-get.el'>el-get</a>, some of them even included a
patch. So now there's support for 
<code>bzr</code>, 
<code>CSV</code> and 
<code>http-tar</code>, augmenting the
existing support for 
<code>git</code>, 
<code>git-svn</code>, 
<code>apt-get</code>, 
<code>fink</code> and 
<code>ELPA</code> formats.
</p><p>Also, as the 
<code>install</code> and even the 
<code>build</code> are completely 
<em>asynchronous</em> —
there's a pending bugfix for the building, which is now using
<a href='http://www.gnu.org/software/emacs/elisp/html_node/Asynchronous-Processes.html'>start-process-shell-command</a>. The advantage of doing so is that you're free
to use Emacs as usual while 
<code>el-get</code> is having your piece of 
<code>elisp</code> code
compiled, which can take time.
</p><p>The drawback is that it's uneasy to to do the associated setup at the right
time without support from 
<code>el-get</code>, so you have the new option 
<code>:after</code> which
takes a 
<code>functionp</code> object: please consider using that to give your own
special setup for the external emacs bits and pieces you're using.
</p><p>Let's see some examples of the new features:
</p><pre><code>(:name xml-rpc-el
	 :type bzr
	 :url &quot;lp:xml-rpc-el&quot;)

  (:name haskell-mode
	 :type http-tar
	 :options (&quot;xzf&quot;)
	 :url &quot;http://projects.haskell.org/haskellmode-emacs/haskell-mode-2.8.0.tar.gz&quot;
	 :load &quot;haskell-site-file.el&quot;
	 :after (lambda ()
		  (add-hook &#039;haskell-mode-hook &#039;turn-on-haskell-doc-mode)
		  (add-hook &#039;haskell-mode-hook &#039;turn-on-haskell-indentation)))

  (:name auctex
	 :type cvs
	 :module &quot;auctex&quot;
	 :url &quot;:pserver:anonymous@cvs.sv.gnu.org:/sources/auctex&quot;
	 :build (&quot;./autogen.sh&quot; &quot;./configure&quot; &quot;make&quot;)
	 :load  (&quot;auctex.el&quot; &quot;preview/preview-latex.el&quot;)
	 :info &quot;doc&quot;)
</code></pre><p>As you can see, there are also the new options 
<code>:module</code> (only used by 
<code>CVS</code> so
far) and 
<code>:options</code> (only used by 
<code>http-tar</code> so far). With this later method,
the 
<code>:options</code> key allows you to have support for virtually any kind of 
<code>tar</code>
compression (
<code>.tar.bz2</code>, etc). 
</p><p>The 
<code>CVS</code> support currently does not include authentication against the
anonymous 
<code>pserver</code>, because the only repository I've been asked support for
isn't using that, and the couple of servers that I know of are either
wanting no password at the prompt, or a dummy one. That's for another day,
if needed at all.
</p><p>That pushes the little local hack to more than a thousand lines of 
<code>elisp</code>
code, and the next steps include proposing it to 
<a href='http://tromey.com/elpa/'>ELPA</a> so that getting to use
it is easier than ever. You'd just have to choose whether to install 
<code>ELPA</code>
from 
<code>el-get</code> or the other way around.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 26 Aug 2010 16:30:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/08/26-el-get-news.html</guid>
</item>

<item>
  <title>el-get and dim-switch-window status update
  </title>
  <link>http://tapoueh.org/blog/2010/08/09-el-get-and-dim-switch-window-status-update.html
  </link>
  <description><![CDATA[<p>Thanks to you readers of 
<a href='http://planet.emacsen.org/'>Planet Emacsen</a> taking the time to try those pieces
of emacs lisp found in my blog, and also the time to comment on them, some
bugs have been fixed, and new releases appeared.
</p><p><a href='http://tapoueh.org/projects.html#sec20'>el-get</a> had some typo kind of bug in its support for 
<code>apt-get</code> and 
<code>fink</code>
packages, and I managed to break the 
<code>elpa</code> and 
<code>http</code> support when going 
<em>all
asynchronous</em> by forgetting to update the call convention I'm using. Fixing
that, I also switched to using 
<code>url-retrieve</code> so that the 
<code>http</code> support also is
<em>asynchronous</em>. That makes the version 
<code>0.5</code>, available on 
<a href='http://www.emacswiki.org/emacs/el-get.el'>emacswiki el-get</a>
page.
</p><p>Meanwhile 
<a href='http://tapoueh.org/projects.html#sec19'>dim-switch-window.el</a> got some testers too and got updated with a
nice fix, or so I think. If you're using it with a small enough emacs frame,
or some very little windows in there, you'd have noticed that the number get
so big they don't fit anymore, and all you see while it's waiting for your
window number choice is... blank windows. Not very helpful. Thanks to the
following piece of code, that's no longer the case as of the current
version, available on 
<a href='http://www.emacswiki.org/emacs/switch-window.el'>emacswiki switch-window</a> page.
</p><p>In short, where I used to blindly apply 
<code>dim:switch-window-increase</code> on the
big numbers to display, the code now checks that there's enough room for it
to get there, and adjust the 
<em>increase</em> level scaling it down if
necessary. Very simple, and effective too:
</p><pre><code>(with-current-buffer buf
      (text-scale-increase 
       (if (&gt; (/ (float (window-body-height win)) 
		 dim:switch-window-increase)
	      1)
	   dim:switch-window-increase
	 (window-body-height win)))
      (insert &quot;\n\n    &quot; (number-to-string num)))
</code></pre><p>Centering the text in the window's width is another story entirely, as the
<code>text-scale-increase</code> ain't linear on this axis. I'd take any good idea,
here's what I'm currently at, but it's not there yet:
</p><pre><code>(with-current-buffer buf
      (let* ((w (window-width win))
	     (h (window-body-height win))
	     (increased-lines (/ (float h) dim:switch-window-increase))
	     (scale (if (&gt; increased-lines 1) dim:switch-window-increase h))
	     (lines-before (/ increased-lines 2))
	     (margin-left (/ w h) ))
	;; increase to maximum dim:switch-window-increase
	(text-scale-increase scale)
	;; make it so that the hyuge number appears centered
	(dotimes (i lines-before) (insert &quot;\n&quot;))
	(dotimes (i margin-left)  (insert &quot; &quot;))
	(insert (number-to-string num))))
</code></pre><p>So, if you're using one or the other (both?) of those utilities, update your
local version of them!
</p><p>Note: I also fixed a but in 
<a href='http://github.com/dimitri/rcirc-groups'>rcirc-groups</a> this week-end, but I'll talk about
it in another entry, if I may.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 09 Aug 2010 15:35:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/08/09-el-get-and-dim-switch-window-status-update.html</guid>
</item>

<item>
  <title>el-get
  </title>
  <link>http://tapoueh.org/blog/2010/08/04-el-get.html
  </link>
  <description><![CDATA[<p>I've been using emacs for a long time, and a long time it took me to
consider learning 
<a href='http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/index.html'>Emacs Lisp</a>. Before that, I didn't trust my level of
understanding enough to be comfortable in managing my setup efficiently.
</p><p>One of the main problems of setting up 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> is that not only you tend to
accumulate so many tricks from 
<a href='http://www.emacswiki.org/'>EmacsWiki</a> and 
<a href='http://planet.emacsen.org/'>blog posts</a> that your 
<code>.emacs</code> has
to grow to a full 
<code>~/.emacs.d/</code> directory (starting at 
<code>~/.emacs.d/init.el</code>),
but also you finally depend on several 
<em>librairies</em> of code you're not
authoring nor maintaining. Let's call them 
<em>packages</em>.
</p><p>Some of them will typically be available on 
<a href='http://tromey.com/elpa/index.html'>ELPA</a>, which allows you to
breathe and keep cool. But most of them, let's face it, are not there. Most
of the packages I use I tend to get them either from 
<a href='http://www.debian.org/'>debian</a> (see
<a href='http://packages.debian.org/sid/apt-rdepends'>apt-rdepends</a> for having the complete list of packages that depends on emacs,
unfortunately I'm not finding an online version of the tool to link too), or
from 
<code>ELPA</code>, or from their own 
<code>git</code> repository somewhere. Some of them even I
get directly from an 
<a href='http://www.splode.com/~friedman/software/emacs-lisp'>obscure website</a> not maintained anymore, but always
there when you need them.
</p><p>Of course, my emacs setup is managed in a private 
<code>git</code> repository. Some
people on 
<code>#emacs</code> are using 
<a href='http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html'>git submodules</a> (or was it straight 
<em>import</em>) for
managing external repositories in there, but all I can say is that I frown
on this idea. I want an easy canonical list of packages I depend on to run
emacs, and I want this documentation to be usable as-is. Enters 
<a href='http://www.emacswiki.org/emacs/el-get.el'>el-get</a>!
</p><p>As we're all damn lazy, here's a 
<em>visual</em> introduction to 
<code>el-get</code>:
</p><pre><code>(setq el-get-sources
      &#039;((:name bbdb
	       :type git
	       :url &quot;git://github.com/barak/BBDB.git&quot;
	       :load-path (&quot;./lisp&quot; &quot;./bits&quot;)
	       :info &quot;texinfo&quot;
	       :build (&quot;./configure&quot; &quot;make&quot;))
	
	(:name magit
	       :type git
	       :url &quot;http://github.com/philjackson/magit.git&quot;
	       :info &quot;.&quot;
	       :build (&quot;./autogen.sh&quot; &quot;./configure&quot; &quot;make&quot;))
	
	(:name vkill
	       :type http
	       :url &quot;http://www.splode.com/~friedman/software/emacs-lisp/src/vkill.el&quot;
	       :features vkill)
	
	(:name yasnippet
	       :type git-svn
	       :url &quot;http://yasnippet.googlecode.com/svn/trunk/&quot;)
	
	(:name asciidoc         :type elpa)
	(:name dictionary-el    :type apt-get)
	(:name emacs-goodies-el :type apt-get)))

(el-get)
</code></pre><p>So now you have a pretty good documentation of the packages you want
installed, where to get them, and how to install them. For the 
<em>advanced</em>
methods (such as 
<code>elpa</code> or 
<code>apt-get</code>), you basically just need the package
name. When relying on a bare 
<code>git</code> repository, you need to give some more
information, such as the 
<code>URL</code> to 
<em>clone</em> and the 
<code>build</code> steps if any. Then also
what 
<em>features</em> to 
<code>require</code> and maybe where to find the 
<em>texinfo</em> documentation
of the package, for automatic inclusion into your local 
<em>Info</em> menu.
</p><p>The good news is that not only you now have a solid readable description of
all that in a central place, but this very description is all 
<code>(el-get)</code> needs
to do its magic. This command will check that each and every package is
installed on your system (in 
<code>el-get-dir</code>) and if that's not the case, it will
actually install it. Then, it will 
<code>init</code> the packages: that means caring
about the 
<code>load-path</code>, the 
<code>Info-directory-list</code> (and 
<em>dir</em> texinfo menu
building), the 
<em>loading</em> of the 
<code>emacs-lisp</code> files, and finally it will 
<code>require</code>
the 
<em>features</em>.
</p><p>Here's a prettyfied 
<code>ielm</code> session that will serve as a demo:
</p><pre><code>ELISP&gt; (el-get)
(&quot;aspell-en&quot; &quot;aspell-fr&quot; &quot;muse&quot; &quot;dictionary&quot; &quot;htmlize&quot; &quot;bbdb&quot; &quot;google-maps&quot;
&quot;magit&quot; &quot;emms&quot; &quot;nxhtml&quot; &quot;vkill&quot; &quot;xcscope&quot; &quot;yasnippet&quot; &quot;asciidoc&quot;
&quot;auto-dictionary&quot; &quot;css-mode&quot; &quot;gist&quot; &quot;lua-mode&quot; &quot;lisppaste&quot;) 
</code></pre><p>All the packages being already installed, it's running fast enough that I
won't bother measuring the run time, that seems to be somewhere around one
second.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Wed, 04 Aug 2010 22:30:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/08/04-el-get.html</guid>
</item>

<item>
  <title>dim-switch-window.el: fixes
  </title>
  <link>http://tapoueh.org/blog/2010/07/26-dim-switch-windowel-fixes.html
  </link>
  <description><![CDATA[<p>Thanks to amazing readers of 
<a href='http://planet.emacsen.org/'>planet emacsen</a>, two annoyances of
<a href='http://www.emacswiki.org/emacs/switch-window.el'>switch-window.el</a> have already been fixed! The first is that handling of 
<code>C-g</code>
isn't exactly an option after all, and the other is that you want to avoid
the buffer creation in the simple cases (1 or 2 windows only), because it's
the usual case.
</p><p>I've received code to handle the second case, that I mostly merged. Thanks a
lot guys, the new version is on 
<a href='http://wwww.emacswiki.org'>emacswiki</a> already!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 26 Jul 2010 11:55:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/07/26-dim-switch-windowel-fixes.html</guid>
</item>

<item>
  <title>dim-switch-window.el
  </title>
  <link>http://tapoueh.org/blog/2010/07/25-dim-switch-windowel.html
  </link>
  <description><![CDATA[<p>So it's Sunday and I'm thinking I'll get into 
<code>el-get</code> sometime later. Now is
the time to present 
<code>dim-switch-window.el</code> which implements a 
<em>visual</em> 
<code>C-x o</code>. I
know of only one way to present a 
<em>visual effect</em>, and that's with a screenshot:
</p><center><img src='http://tapoueh.org/images/emacs-switch-window.png' /></center><p>So as you can see, it's all about showing a 
<em>big</em> number in each window,
tweaking each window's name, and waiting till the user press one of the
expected key — or timeout and stay on the same window as before 
<code>C-x o</code>. When
there's only 1 or 2 windows displayed, though, the right thing happen and
you see no huge number (in the former case, nothing happens, in the latter,
focus moves to the other window).
</p><p>The code for that can be found on 
<a href='http://www.emacswiki.org/'>emacswiki</a> under the name
<a href='http://www.emacswiki.org/emacs/switch-window.el'>switch-window.el</a>. Hope you'll find it useful!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sun, 25 Jul 2010 13:25:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/07/25-dim-switch-windowel.html</guid>
</item>

<item>
  <title>ClusterSSH gets dsh support
  </title>
  <link>http://tapoueh.org/blog/2010/07/23-clusterssh-gets-dsh-support.html
  </link>
  <description><![CDATA[<p>If you don't know about 
<a href='cssh.html'>ClusterSSH</a>, it's a project that builds on 
<code>M-x term</code>
and 
<code>ssh</code> to offer a nice and simple way to open remote terminals. It's
available in 
<a href='http://tromey.com/elpa/index.html'>ELPA</a> and developed at 
<a href='http://github.com/dimitri/cssh'>github cssh</a> repository.
</p><p>The default binding is 
<code>C-=</code> and asks for the name of the server
to connect to, in the 
<em>minibuffer</em>, with completion. The host list used for
the completion comes from 
<code>tramp</code> and is pretty complete, all the more if
you've setup 
<code>~/.ssh/config</code> with 
<code>HashKnownHosts no</code>.
</p><p>So the usual way to use 
<code>cssh.el</code> would be to just open a single remote
connection at a time. But of course you can open as many as you like, and
you get them all in a mosaic of 
<code>term</code> in your emacs frame, with an input
window at the bottom to control them all. There were two ways to get there,
either opening all remote hosts whose name is matching a given regexp, that
would be using 
<code>C-M-=</code> or getting to 
<code>IBuffer</code> and marking there
the existing remote 
<code>terms</code> you want to control all at once then use
<code>C-=</code>.
</p><p>Well I've just added another mode of operation by supporting 
<em>enhanced</em> 
<a href='http://www.netfort.gr.jp/~dancer/software/dsh.html.en'>dsh</a>
group files. In such files, you're supposed to have a remote host name per
line and that's it. We've added support for line containing 
<code>@group</code> kind of
lines so that you can 
<em>include</em> another group easily. To use the facility,
either open your 
<code>~/.dsh/group</code> directory in 
<code>dired</code> and type 
<code>C-=</code>
when on the right line, or simply use the global 
<code>C-=</code> you
already know and love. Then, type 
<code>@</code> and complete to any existing group found
in your 
<code>cssh-dsh-path</code> (it defaults to the right places, so chances are you
will never have to edit this one). And that's it, 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> will open one 
<code>term</code>
per remote host you have in the 
<code>dsh</code> group you just picked. With a 
<code>*cssh*</code>
controler window, too.
</p><p>Coming next, how I solved my 
<code>init.el</code> dependancies burden thanks to 
<code>el-get</code>!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 23 Jul 2010 22:20:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/07/23-clusterssh-gets-dsh-support.html</guid>
</item>

<item>
  <title>Emacs and PostgreSQL
  </title>
  <link>http://tapoueh.org/blog/2010/07/22-emacs-and-postgresql.html
  </link>
  <description><![CDATA[<p>Those are my two all times favorite Open Source Software. Or 
<a href='http://www.gnu.org/philosophy/free-sw.html'>Free Software</a>
in the 
<a href='http://www.gnu.org/'>GNU</a> sense of the world, as both the 
<em>BSD</em> and the 
<em>GPL</em> are labeled free
there. Even if I prefer the 
<a href='http://www.debian.org/social_contract'>The Debian Free Software Guidelines</a> as a global
definition and the 
<a href='http://sam.zoy.org/wtfpl/'>WTFPL</a> license. But that's a digression.
</p><p>I think that 
<a href='http://www.gnu.org/software/emacs/'>Emacs</a> and 
<a href='http://www.postgresql.org/'>PostgreSQL</a> do share a lot in common. I'd begin with
the documentation, which quality is amazing for both projects. Then of
course the extensibility with 
<a href='http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/Preface.html#Preface'>Emacs Lisp</a> on the one hand and
<a href='http://www.postgresql.org/docs/8.4/static/extend.html'>catalog-driven operations</a> on the other hand. Whether you're extending Emacs
or PostgreSQL you'll find that it's pretty easy to tweak the system 
<em>while
it's running</em>. The other comparison points are less important, like the fact
the both the systems get about the same uptime on my laptop (currently 
<em>13
days, 23 hours, 57 minutes, 10 seconds</em>).
</p><p>So of course I'm using 
<em>Emacs</em> to edit 
<em>PostgreSQL</em> 
<code>.sql</code> files, including stored
procedures. And it so happens that 
<a href='http://archives.postgresql.org/pgsql-hackers/2010-07/msg01067.php'>line numbering in plpgsql</a> is not as
straightforward as one would naively think, to the point that we'd like to
have better tool support there. So I've extended Emacs 
<a href='http://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html'>linum-mode minor mode</a>
to also display the line numbers as computed per PostgreSQL, and here's what
it looks like:
</p><center><img src='http://tapoueh.org/images/emacs-pgsql-line-numbers.png' /></center><p>Now, here's also the source code, 
<a href='https://github.com/dimitri/pgsql-linum-format'>pgsql-linum-format</a>. Hope you'll enjoy!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 22 Jul 2010 09:30:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/07/22-emacs-and-postgresql.html</guid>
</item>

<item>
  <title>Emacs Muse hacking
  </title>
  <link>http://tapoueh.org/blog/2010/03/04-emacs-muse-hacking.html
  </link>
  <description><![CDATA[<p>Now you know what piece of software is used to publish this blog. I really
like it, the major mode makes it a great experience to be using this tool,
and the fact that you produce the 
<code>HTML</code> and 
<code>rsync</code> it all from within Emacs
(
<code>C-c C-p</code> then 
<code>C-c C-r</code> with some easy 
<a href='http://git.tapoueh.org/?p=tapoueh.org.git;a=blob;f=dim-muse.el;hb=HEAD'>elisp code</a>) is a big advantage as far
as I'm concerned. No need to resort to 
<code>shell</code> and 
<code>Makefile</code>.
</p><p>What's new here is that I missed the 
<em>one page per article</em> trend that other
blog software propose, and the blog entries index too. I didn't want to
invest time into hacking Muse itself, that was my excuse for accepting the
situation. But I finally took a deeper look at the 
<a href='http://mwolson.org/static/doc/muse/Style-Elements.html#Style-Elements'>Emacs Muse Manual</a>, and
found out about the 
<code>:after</code> and 
<code>:final</code> functions.
</p><p>Those two function will get run while in the output buffer, the 
<code>HTML</code>
formatted one. With the 
<code>:after</code> function, it's still possible to edit the
buffer content, for example to add a mini index to previous articles,
whereas with the 
<code>:final</code> function the buffer is 
<code>read-only</code> and already written
to disk, so it's to late to edit it. Still it's possible to cut it in pieces
and write a new file per article you find in there.
</p><p>The code to realize my wishes is 
<a href='http://git.tapoueh.org/?p=tapoueh.org.git;a=summary'>available</a> but has not been edited with
customisation in mind, so to use it you will have to edit some places rather
than just 
<code>setq</code> some 
<code>defcustom</code>. Well, if I have demand, I'll generalize the
code and share it on 
<a href='http://www.emacswiki.org/'>Emacs Wiki</a> and 
<a href='http://tromey.com/elpa/'>ELPA</a>. Meanwhile, happy hacking!
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 04 Mar 2010 13:33:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2010/03/04-emacs-muse-hacking.html</guid>
</item>

<item>
  <title>pg_staging&#039;s bird view
  </title>
  <link>http://tapoueh.org/blog/2009/12/08-pg_stagings-bird-view.html
  </link>
  <description><![CDATA[<p>One of the most important feedback I got about the presentation of 
<a href='pgstaging.html'>pgstaging</a>
were the lack of pictures, something like a bird-view of how you operate
it. Well, thanks to 
<a href='http://ditaa.sourceforge.net/'>ditaa</a> and Emacs 
<code>picture-mode</code> here it is:
</p><center><img src='http://tapoueh.org/images/pg_staging.png' /></center><p>Hope you enjoy, it should not be necessary to comment much if I got to the
point!
</p><p>Of course I commited the 
<a href='http://github.com/dimitri/pg_staging/blob/master/bird-view.txt'>text source file</a> to the 
<code>Git</code> repository. The only
problem I ran into is that 
<code>ditaa</code> defaults to ouputing a quite big right
margin containing only white pixels, and that didn't fit well, visually, in
this blog. So I had to resort to 
<a href='http://www.imagemagick.org/script/command-line-options.php#crop'>ImageMagik crop command</a> in order to avoid
any mouse usage in the production of this diagram.
</p><pre><code>convert .../pg_staging/bird-view.png -crop &#039;!550&#039; bird-view.png
mv bird-view-0.png pg_staging.png
</code></pre><p>Quicker than learning to properly use a mouse, at least for me :)
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 08 Dec 2009 12:04:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/12/08-pg_stagings-bird-view.html</guid>
</item>

<item>
  <title>PGday.eu feedback
  </title>
  <link>http://tapoueh.org/blog/2009/12/01-pgdayeu-feedback.html
  </link>
  <description><![CDATA[<p>At 
<a href='http://2009.pgday.eu/'>pgday</a> there was this form you could fill to give speakers some 
<em>feedback</em>
about their talks. And that's a really nice way as a speaker to know what to
improve. And as 
<a href='http://blog.hagander.net/archives/157-Feedback-from-pgday.eu.html'>Magnus</a> was searching a nice looking chart facility in python
and I spoke about 
<a href='http://matplotlib.sourceforge.net/gallery.html'>matplotlib</a>, it felt like having to publish something.
</p><p>Here is my try at some nice graphics. Well I'll let you decide how nice the
result is:
</p><center><a href='http://tapoueh.org/images/feedback.png'><img src='http://tapoueh.org/images/feedback.png' /></a></center><p>If you want to see the little python script I used, here it is: 
<a href='http://git.tapoueh.org/?p=pgconfs.git;a=blob;f=pgday_2009/feedback.py;hb=master'>feedback.py</a>,
with the data embedded and all...
</p><p>Now, how to read it? Well, the darker the color the better the score. For
example I had 
<code>5</code> people score me 
<code>5</code> for 
<em>Topic Importance</em> on the Hi-Media talk
(in french) and only 
<code>3</code> people at this same score and topic for 
<code>pg_staging</code>
talk. The scores are from 
<code>1</code> to 
<code>5</code>, 
<code>5</code> being the best.
</p><p>The comitee accepted interesting enough topics and it seems I managed to
deliver acceptable content from there. Not very good content, because
reading the comments I missed some nice birds-eye pictures to help the
audience get into the subject. As I'm unable to draw (with or without a
mouse) I plan to fix this in latter talks by using 
<a href='http://ditaa.sourceforge.net/'>ditaa</a>, the 
<em>DIagrams
Through Ascii Art</em> tool. I already used it and together with 
<a href='news.dim.html'>Emacs</a>
<code>picture-mode</code> it's very nice.
</p><p>Oh yes the baseline of this post is that there will be later talks. I seem
to be liking those and the audience feedback this time is saying that it's
not too bad for them. See you soon :)
</p><h2>Update</h2><p>I have added the 
<code>feedback.py</code> script now that each page here is published
separately.
</p><pre><code>#! /usr/bin/env python
#
# http://matplotlib.sourceforge.net/examples/pylab_examples/bar_stacked.html

from pylab import *
import numpy as np

clf()
subplot(111)

N = 4

# http://html-color-codes.info/ for inspiration
scoreColors   = ((&#039;#F5D0A9&#039;, &#039;#F7BE81&#039;,
                  &#039;#FAAC58&#039;, &#039;#FF8000&#039;, &#039;#DF7401&#039;),
                 (&#039;#A9F5A9&#039;, &#039;#81F781&#039;,
                  &#039;#58FA58&#039;, &#039;#2EFE2E&#039;, &#039;#01DF01&#039;))

# data from the mail
expHMScores   = ((0, 0, 1, 2, 5),
                 (0, 0, 1, 3, 4),
                 (0, 0, 0, 0, 8),
                 (0, 0, 0, 3, 5))

stagingScores = ((0, 0, 0, 3, 3),
                 (0, 1, 1, 1, 3),
                 (0, 0, 1, 1, 4),
                 (0, 0, 0, 4, 2))

ind = np.arange(N)    # the x locations for the groups
width = 0.4       # the width of the bars: can also be len(x) sequence

hd = array([expHMScores[x][0] for x in range(0, 4)])
hp = bar(ind, hd, width, color = scoreColors[0][0])

sd = array([stagingScores[x][0] for x in range(0, 4)])
sp = bar(ind+width, sd, width, color = scoreColors[1][0])

for s in range(1, 5):
    d = array([expHMScores[x][s] for x in range(0, 4)])
    bar(ind, d, width,
        color = scoreColors[0][s], bottom = hd)
    hd += d

    d = array([stagingScores[x][s] for x in range(0, 4)])
    bar(ind+width, d, width,
        color = scoreColors[1][s], bottom = sd)
    sd += d

ylabel(&#039;Scores&#039;)
title(&#039;PGday 2009 feedback&#039;)
xticks(ind+width,
       (&#039;Topic Importance&#039;,
        &#039;Content Quality&#039;,
        &#039;Speaker knowledge&#039;,
        &#039;Speaker Quality&#039;) )

legend([hp[0], sp[0]], [&quot;Hi-Media&quot;, &quot;pg_staging&quot;])

grid(True)
savefig(&#039;feedback.png&#039;, dpi=75, orientation=&#039;portrait&#039;)
</code></pre>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 01 Dec 2009 16:45:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/12/01-pgdayeu-feedback.html</guid>
</item>

<item>
  <title>Emacs Muse based publishing
  </title>
  <link>http://tapoueh.org/blog/2009/10/06-emacs-muse-based-publishing.html
  </link>
  <description><![CDATA[<p>As you might have noticed, this little blog of mine is not compromising much
and entirely maintained from Emacs. Until today, I had to resort to 
<code>term</code> to
upload my publications, though, as I've been too lazy to hack up the tools
integration for simply doing a single 
<code>rsync</code> command line. That was one time
to many:
</p><pre><code>(defvar dim:muse-rsync-options &quot;-avz&quot;
  &quot;rsync options&quot;)

(defvar dim:muse-rsync-source &quot;~/dev/muse/out&quot;
  &quot;local path from where to rsync, with no ending /&quot;)

(defvar dim:muse-rsync-target
  &quot;dim@tapoueh.org:/home/www/tapoueh.org/blog.tapoueh.org&quot;
  &quot;Remote URL to use as rsync target, with no ending /&quot;)

(defvar dim:muse-rsync-extra-subdirs
  &#039;(&quot;../css&quot; &quot;../images&quot; &quot;../pdf&quot;)
  &quot;static subdirs to rsync too, path from dim:muse-rsync-source, no ending /&quot;)

(defun dim:muse-project-rsync (&amp;optional static)
  &quot;publish tapoueh.org using rsync&quot;
  (interactive &quot;P&quot;)
  (let* ((rsync-command (format &quot;rsync %s %s %s&quot; 
				dim:muse-rsync-options
				(concat dim:muse-rsync-source &quot;/&quot;)
				(concat dim:muse-rsync-target &quot;/&quot;))))
    (with-current-buffer (get-buffer-create &quot;*muse-rsync*&quot;)
      (erase-buffer)
      (insert (concat rsync-command &quot;\n&quot;))
      (message &quot;%s&quot; rsync-command)
      (insert (shell-command-to-string rsync-command))
      (insert &quot;\n&quot;)

      (when static
	(dolist (subdir dim:muse-rsync-extra-subdirs)
	  (let ((cmd (format &quot;rsync %s %s %s&quot; 
			     dim:muse-rsync-options
			     (concat dim:muse-rsync-source &quot;/&quot; subdir)
			     dim:muse-rsync-target)))
	    (insert (concat cmd &quot;\n&quot;))
	    (message &quot;%s&quot; cmd)
	    (insert (shell-command-to-string cmd))
	    (insert &quot;\n&quot;)))))))

(define-key muse-mode-map (kbd &quot;C-c R&quot;) &#039;dim:muse-project-rsync)
</code></pre><p>So now to publish this blog, it's just a 
<code>C-c R</code> away! :)
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 06 Oct 2009 17:23:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/10/06-emacs-muse-based-publishing.html</guid>
</item>

<item>
  <title>Emacs is Twinkling here
  </title>
  <link>http://tapoueh.org/blog/2009/09/24-emacs-is-twinkling-here.html
  </link>
  <description><![CDATA[<p>So you have a 
<em>rolodex</em> like database in your Emacs, or you have this phone
number in a mail and you want to call it. It happens you have 
<code>VoIP</code> setup and
you're using 
<a href='http://www.twinklephone.com/'>Twinkle</a> to make your calls. Maybe you'll then find this
function useful:
</p><pre><code>(defun twinkle-call-symbol-or-region ()
  &quot;Call the phone number at point (symbol seems good enough), or in region&quot;
  (interactive)
  (shell-command-to-string 
   (format &quot;twinkle --cmd &#039;call %s&#039;&quot;
	   (replace-regexp-in-string 
	    &quot;[^0-9+]&quot; &quot;&quot; 
	    (if (use-region-p)
		(buffer-substring (region-beginning) (region-end))
	      (thing-at-point &#039;symbol))))))
</code></pre><p>It happens that 
<code>symbol</code> is better than 
<code>word</code> here because some phone numbers
begin with 
<code>+</code>. And some contains 
<code>/</code> or 
<code>.</code> as separators, or some other
variations (spaces) so as the number is easy to read for human eyes. 
<em>Twinkle</em>
will not like this.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Thu, 24 Sep 2009 18:08:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/09/24-emacs-is-twinkling-here.html</guid>
</item>

<item>
  <title>Escreen integration
  </title>
  <link>http://tapoueh.org/blog/2009/09/22-escreen-integration.html
  </link>
  <description><![CDATA[<p>After having used 
<a href='http://www.morishima.net/~naoto/software/elscreen/'>elscreen</a> for a long time, I'm now a very happy user of
<a href='http://www.splode.com/~friedman/software/emacs-lisp/#ui'>escreen</a>, which feels much better integrated and allows to have one ring of
recently visited buffers per screen. Which is what you need when using a
<em>screen</em> like feature, really.
</p><p>At first, it seemed so good as not to require any tweaking, but soon enough
I had to adapt it to my workflow. After all that's exactly for being able to
do this that I'm using emacs :)
</p><p>It began quite simple with things like 
<code>M-[</code> and 
<code>M-]</code> to navigate in screens,
and mouse wheel support to, but then I found that the 
<code>C-\ b</code> list of screens
could also support the 
<code>C-\ a runs the command
escreen-get-active-screen-numbers</code> command by just adding some 
<em>emphasis</em> to
the current escreen in use.
</p><p>As soon as I had this, and seeing people eyes blinking when working with me
in front of my computer, I wanted to have 
<em>escreen</em> switching display where I
am in the minibuffer. You have to try the mouse wheel navigation to fully
appreciate it I guess. Anyway, here it is:
</p><pre><code>(load &quot;escreen&quot;)
(escreen-install)

;; add C-\ l to list screens with emphase for current one
(defun escreen-get-active-screen-numbers-with-emphasis ()
  &quot;what the name says&quot;
  (interactive)
  (let ((escreens (escreen-get-active-screen-numbers))
	(emphased &quot;&quot;))

    (dolist (s escreens)
      (setq emphased
	    (concat emphased (if (= escreen-current-screen-number s)
				 (propertize (number-to-string s)
					     ;;&#039;face &#039;custom-variable-tag) &quot; &quot;)
					     &#039;face &#039;info-title-3)
					     ;;&#039;face &#039;font-lock-warning-face)
					     ;;&#039;face &#039;secondary-selection)
			       (number-to-string s))
		    &quot; &quot;)))
    (message &quot;escreen: active screens: %s&quot; emphased)))

(global-set-key (kbd &quot;C-\\ l&quot;) &#039;escreen-get-active-screen-numbers-with-emphasis)

(defun dim:escreen-goto-last-screen ()
  (interactive)
  (escreen-goto-last-screen)
  (escreen-get-active-screen-numbers-with-emphasis))

(defun dim:escreen-goto-prev-screen (&amp;optional n)
  (interactive &quot;p&quot;)
  (escreen-goto-prev-screen n)
  (escreen-get-active-screen-numbers-with-emphasis))

(defun dim:escreen-goto-next-screen (&amp;optional n)
  (interactive &quot;p&quot;)
  (escreen-goto-next-screen n)
  (escreen-get-active-screen-numbers-with-emphasis))

(define-key escreen-map escreen-prefix-char &#039;dim:escreen-goto-last-screen)

(global-set-key (kbd &quot;M-[&quot;) &#039;dim:escreen-goto-prev-screen)
(global-set-key (kbd &quot;M-]&quot;) &#039;dim:escreen-goto-next-screen)
(global-set-key (kbd &quot;C-\\ DEL&quot;) &#039;dim:escreen-goto-prev-screen)
(global-set-key (kbd &quot;C-\\ SPC&quot;) &#039;dim:escreen-goto-next-screen)

(global-set-key &#039;[s-mouse-4] &#039;dim:escreen-goto-prev-screen)
(global-set-key &#039;[s-mouse-5] &#039;dim:escreen-goto-next-screen)
</code></pre><p>Oh, and as I'm in the 
<em>terms in emacs</em> part of universe (rather than using
<code>emacs -nw</code> in some terminal emulator, but loosing sync between X clipbloard
and emacs selection), I had to add this too:
</p><pre><code>;; add support for C-\ from terms
(require &#039;term)
(define-key term-raw-map escreen-prefix-char escreen-map)
(define-key term-raw-map (kbd &quot;M-[&quot;) &#039;dim:escreen-goto-prev-screen)
(define-key term-raw-map (kbd &quot;M-]&quot;) &#039;dim:escreen-goto-next-screen)
</code></pre>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 22 Sep 2009 23:04:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/09/22-escreen-integration.html</guid>
</item>

<item>
  <title>Follow-up on dim:mailrc-add-entry
  </title>
  <link>http://tapoueh.org/blog/2009/09/07-follow-up-on-dimmailrc-add-entry.html
  </link>
  <description><![CDATA[<p>The function didn't allow for using more than one 
<code>mailrc</code> file, which isn't a
good idea, so I've just added that. Oh and for 
<code>gnus</code> integration what I need
is 
<code>(add-hook &#039;message-mode-hook &#039;mail-abbrevs-setup)</code> it seems... so that if
I type the alias it'll get automatically expanded. And to be real lazy and
avoid having to type in the entire alias, 
<code>mail-abbrev-complete-alias</code> to the
rescue, assigned to some easy to reach keys.
</p><pre><code>(require &#039;message)
(define-key message-mode-map (kbd &quot;C-&#039;&quot;) &#039;mail-abbrev-complete-alias)

(defun dim:mailrc-add-entry (&amp;optional prefix alias)
  &quot;read email at point and add it to an ~/.mailrc file&quot;
  (interactive &quot;P\nMalias: &quot;)
  (let* ((default-mailrc (file-name-nondirectory mail-personal-alias-file))
	 (mailrc (if prefix (expand-file-name
			     (read-file-name 
			      &quot;Add alias into file: &quot; 
			      &quot;~/&quot; 
			      default-mailrc
			      t
			      default-mailrc))
		   mail-personal-alias-file))
	 (address (thing-at-point &#039;email-address))
	 (buffer (find-file-noselect mailrc t)))
    (when address
      (with-current-buffer buffer
	;; we don&#039;t support updating existing alias in the file
	(save-excursion
	  (goto-char (point-min))
	  (if (search-forward (concat &quot;alias &quot; alias) nil t)
	      (error &quot;Alias %s is already present in .mailrc&quot; alias)))

	(save-current-buffer
	  (save-excursion
	    (goto-char (point-max))
	    (insert (format &quot;\nalias %s \&quot;%s &lt;%s&gt;\&quot;&quot; alias (cdr address) (car address)))))))))
</code></pre>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 07 Sep 2009 12:50:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/09/07-follow-up-on-dimmailrc-add-entry.html</guid>
</item>

<item>
  <title>Improving ~/.mailrc usage
  </title>
  <link>http://tapoueh.org/blog/2009/09/07-improving-mailrc-usage.html
  </link>
  <description><![CDATA[<p>So I've been adviced to use 
<code>~/.mailrc</code> for keeping a basic address book in
Emacs, for use within 
<code>gnus</code> for example. I had to resort to the manual to
find out how to use the file aliases when I need them, that is when
composing a mail. For the record, here's what I had to do:
</p><pre><code>;; mails and aliases
(add-hook &#039;mail-mode-hook &#039;mail-abbrevs-setup)
(global-set-key (kbd &quot;C-c @&quot;) &#039;mail-abbrev-insert-alias)
</code></pre><p>That means I prefer hitting 
<code>C-c @</code>, then typing the alias in the minibuffer
(with completion) and there after see the full mail address in my
<code>message-mode</code> buffer. This looks like it'll change over time, but rather than
searching how to have a nice inline alias completion (
<code>M-tab</code> maybe, but
already used by the 
<em>window manager</em>), I've tackled the problem of maintaining
the ~/.mailrc file.
</p><p>Lazy as I am (or I wouldn't be using Emacs this much), having to manually
select the email region in the buffer, open or switch to the 
<code>mailrc</code> buffer
then paste my new entry, not forgetting to format it with 
<code>alias foo</code> prefix
and checking for alias usage while doing so didn't strike me as
appealing. Oh and don't forget to add quote where they belong, too.
</p><p>Too much work that I wanted to automate. Here we go:
</p><pre><code>;; automate adding mail at point to ~/.mailrc
(defun dim:mailrc-add-entry (alias)
  &quot;read email at point&quot;
  (interactive &quot;Malias: &quot;)
  (let ((address (thing-at-point &#039;email-address))
	(buffer (find-file-noselect mail-personal-alias-file t)))
    (when address
      (with-current-buffer buffer
	;; we don&#039;t support updating existing alias in the file
	(save-excursion
	  (goto-char (point-min))
	  (if (search-forward (concat &quot;alias &quot; alias) nil t)
	      (error &quot;Alias %s is already present in .mailrc&quot; alias)))

	(save-current-buffer
	  (save-excursion
	    (goto-char (point-max))
	    (insert (format &quot;\nalias %s \&quot;%s &lt;%s&gt;\&quot;&quot; alias (cdr address) (car address)))))))))

(global-set-key (kbd &quot;C-c C-@&quot;) &#039;dim:mailrc-add-entry)
</code></pre><p>Quite there, you'll notice that I'm using 
<code>thing-at-point &#039;email-address</code>, and
maybe you already know that 
<code>emacs23</code> does not provide this. It provides
<code>thing-at-point &#039;email</code> which will ignore real name and all. For example,
given a point somewhere inside the right part of 
<code>John Doe
&lt;johndoe@email.tld&gt;</code> the 
<code>&#039;email</code> variant of 
<code>thing-at-point</code> will return
<code>johndoe@email.tld</code>. In words of one syllabe: not what I want.
</p><p>So after searching around for a solution, I saw 
<code>mail-header-parse-address</code>
from the API oriented 
<code>mail-parse</code> librairy, and finaly came up with this dead simple
solution which works fine enough for me:
</p><pre><code>(require &#039;mail-parse)

(defun thing-at-point-bounds-of-email-address ()
  &quot;return a cons of begin and end position of email address at point, including full name&quot;
  (save-excursion
    (let* ((search-point (point))
	   (start (re-search-backward &quot;[:,]&quot; (line-beginning-position) &#039;move))
	   (dummy (goto-char search-point))
	   (end   (re-search-forward  &quot;[:,]&quot; (line-end-position) t)))
      (setq start (if start (+ 1 start)
		    (line-beginning-position)))
      (unless end (setq end (line-end-position)))
      (cons start end))))

(defun thing-at-point-email-address ()
  &quot;return full email address at point&quot;
  (let* ((bounds (thing-at-point-bounds-of-email-address))
	 (email-address-text
	  (when bounds (buffer-substring-no-properties (car bounds) (cdr bounds)))))
    (mail-header-parse-address email-address-text)))

(put &#039;email-address &#039;bounds-of-thing-at-point &#039;thing-at-point-bounds-of-email-address)
(put &#039;email-address &#039;thing-at-point &#039;thing-at-point-email-address)
</code></pre><p>Now, when I receive a mail and want to store an alias for it, I simply place
point somewhere in the mail then hit 
<code>C-c C-@</code>, and 
<em>voilà</em> my 
<code>~/.mailrc</code> is
uptodate.
</p><p>Hope it'll be useful for someone else, but at least I'm keeping annotated
history of the files :)
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 07 Sep 2009 01:29:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/09/07-improving-mailrc-usage.html</guid>
</item>

<item>
  <title>Some emacs nifties
  </title>
  <link>http://tapoueh.org/blog/2009/08/03-some-emacs-nifties.html
  </link>
  <description><![CDATA[<p>First, here's a way to insert at current position the last message printed
into the minibuffer... well not exactly, in 
<code>*Messages*</code> buffer in fact. I was
tired of doing it myself after invoking, e.g., 
<code>M-x emacs-version</code>.
</p><pre><code>;; print last message
;; current-message is already lost by the time this gets called
(defun dim:previous-message (&amp;optional nth)
  &quot;get last line of *Message* buffer&quot;
  (with-current-buffer (get-buffer &quot;*Messages*&quot;)
    (save-excursion
      (goto-char (point-max))
      (setq nth (if nth nth 1))
      (while (&gt; nth 0)
	(previous-line)
	(setq nth (- nth 1)))
      (buffer-substring (line-beginning-position) (line-end-position)))))

(defun dim:insert-previous-message (&amp;optional nth)
  &quot;insert last message of *Message* to current position&quot;
  (interactive &quot;p&quot;)
  (insert (format &quot;%s&quot; (dim:previous-message nth))))

(global-set-key (kbd &quot;C-c m&quot;) &#039;dim:insert-previous-message)
</code></pre><p>Now I stumbled accross 
<a href='http://planet.emacsen.org/'>Planet Emacsen</a> and saw this 
<a href='http://curiousprogrammer.wordpress.com/2009/07/26/emacs-utility-functions/'>Emacs Utility Functions</a>
post, containing a version of 
<code>duplicate-current-line</code> that I didn't
like... here's mine:
</p><pre><code>;; duplicate current line
(defun duplicate-current-line (&amp;optional n)
  &quot;duplicate current line, make more than 1 copy given a numeric argument&quot;
  (interactive &quot;p&quot;)
  (save-excursion
    (let ((nb (or n 1))
	  (current-line (thing-at-point &#039;line)))
      ;; when on last line, insert a newline first
      (when (or (= 1 (forward-line 1)) (eq (point) (point-max)))
	(insert &quot;\n&quot;))

      ;; now insert as many time as requested
      (while (&gt; n 0)
	(insert current-line)
	(decf n)))))

(global-set-key (kbd &quot;C-S-d&quot;) &#039;duplicate-current-line)  
</code></pre><p>And a last one inspired by some strange 
<code>vim</code> behavior for which I fail to see
a need:
</p><pre><code>;; on request by cyrilb, who missed it from vim
;; no global-set-key yet, still have to think I&#039;ll use it someday...
(defun copy-char-from-prev-line ()
  &quot;Copy char at same position on previous line, when such a line and position exists&quot;
  (interactive)
  (let ((c)
	(p (- (point) (line-beginning-position))))
    (save-excursion
      (when (eq 0 (forward-line -1))
	(when (&lt; (+ (point) p) (line-end-position))
	  (forward-char p)
	  (setq c (thing-at-point &#039;char)))))
    (when c
      (insert c))))
</code></pre><p>Next time I'll try to talk about 
<code>rcirc-groups</code> or 
<code>cssh</code> which have managed to
take some of my free time recently.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 03 Aug 2009 15:15:00 +0200</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2009/08/03-some-emacs-nifties.html</guid>
</item>

<item>
  <title>Useful emacs trick
  </title>
  <link>http://tapoueh.org/blog/2008/12/09-useful-emacs-trick.html
  </link>
  <description><![CDATA[<p>Watch 
<a href='http://www.ted.com/index.php/talks/kevin_kelly_on_the_next_5_000_days_of_the_web.html'>Kevin Kelly's Talk</a> here, it's about trying to predict what the
Internet will look like 5 thousands days from now.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Tue, 09 Dec 2008 00:00:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2008/12/09-useful-emacs-trick.html</guid>
</item>

<item>
  <title>emacs-snapshot
  </title>
  <link>http://tapoueh.org/blog/2008/12/08-emacs-snapshot.html
  </link>
  <description><![CDATA[<p>If you want to live on the bleeding edge, it's easy enough to get a non
existing release of 
<a href='http://www.gnu.org/software/emacs/'>GNU Emacs</a> under 
<a href='http://www.debian.org/releases/unstable/'>debian sid</a>, thanks to
<a href='http://emacs.orebokech.com/'>http://emacs.orebokech.com/</a>.
</p><p>The problem is that 
<a href='http://mwolson.org/projects/EmacsMuse.html'>Emacs Muse</a> is broken on 
<code>emacs-snapshot</code>, partly because
of 
<a href='http://www.emacswiki.org/emacs/Htmlize'>Htmlize</a> which is unable to find the face fonts (I got 
<code>(error &quot;Invalid
face&quot;)</code>), partly because of my configuration itself:
</p><pre><code>hunk ./dim-muse.el 22
-      &#039;((&quot;pgsql.tapoueh.org&quot; $
-        (,@(muse-project-alist-dirs &quot;~/dev/muse/site&quot;) $
+      &#039;((&quot;pgsql.tapoueh.org&quot; (&quot;~/dev/muse/site&quot;
+        ;;(,@(muse-project-alist-dirs &quot;~/dev/muse/site&quot;) $
</code></pre><p>The solution was to switch to using 
<code>Emacs 22</code> on sid for 
<a href='http://pgsql.tapoueh.org/site/muse/site/'>pgsql.tapoueh.org</a>
editing, while using 
<a href='http://www.emacswiki.org/emacs/?action=browse;oldid=EmacsCVS;id=EmacsFromCVS'>EmacsCVS</a> for other activities.
</p><p>And I'm using the patched 
<code>Htmlize</code> on both the versions, by the way.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Mon, 08 Dec 2008 16:10:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2008/12/08-emacs-snapshot.html</guid>
</item>

<item>
  <title>new site, using new software
  </title>
  <link>http://tapoueh.org/blog/2008/12/06-new-site.html
  </link>
  <description><![CDATA[<p>Oh and check out the 
<a href='skytools.html'>skytools</a> page too. 
<a href='http://mwolson.org/projects/EmacsMuse.html'>Emacs Muse</a> is so great a project
that instead of just working on how to publish a website with this tool, I
found myself editing a rather large document about 
<code>londite.py</code>.
</p>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Sat, 06 Dec 2008 00:00:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2008/12/06-new-site.html</guid>
</item>

<item>
  <title>Emacs Muse powered blog
  </title>
  <link>http://tapoueh.org/blog/2008/12/05-emacs-muse-powered-blog.html
  </link>
  <description><![CDATA[<p>So finaly a blogging software for 
<em>geeks</em> exists?
</p><blockquote><p>The problem with communication is that you think it happened.
</p></blockquote>]]>
  </description>
  <author>dim@tapoueh.org (Dimitri Fontaine)
  </author><pubDate>Fri, 05 Dec 2008 00:00:00 +0100</pubDate><guid isPermaLink="true">http://tapoueh.org/blog/2008/12/05-emacs-muse-powered-blog.html</guid>
</item>
 </channel>
</rss>
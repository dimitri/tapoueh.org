What to write about next?

* Site
** re add the SQL finder
   http://git.tapoueh.org/?p=tapoueh.org.git;a=blob;f=site/finder.sql;h=71c208388615954a9b536b21bad2ac9a4051aa0d;hb=refs/heads/1v

* PostgreSQL
** custom PGQ consumers
** Stored Procedures Reality Check
   http://ora-00001.blogspot.com/2011/07/mythbusters-stored-procedures-edition.html
*** Intro, 3-tier architecture and stored procedures
*** Version Controling Stored Procedures
*** In database Dependencies
*** IDE features
*** Spaghetti code
*** Reusing code, API design and Object Orientation
*** Exception handling
*** Debugging
*** Unit tests
*** Portability
*** Scalability
** Tsung walkthrough
** Tsung to replay pgbench
** pgfincore debian's packaging
** what problems do we solve with extensions
** writing an extension in SQL
** debian packaging a PostgreSQL Extension
** skytools 3
*** new features
*** architecture examples

* PostgreSQL Fr
** requêtes paramétrées (protocole, sécurité, injection)
** Choisir sa réplication PostgreSQL
** Nouvelles série : découvertes 
*** Découvrir Tsung
*** Découvrir Skytools
*** Découvrir PGQ
*** Découvrir Hot Standby et ses réplications
*** Découvrir plproxy
*** Découvrir pgbouncer
*** Réplication Synchrone : quand, pourquoi ?
** Réplications PostgreSQL : un exemple concret
   Exemple d'utilisation de toutes les technos dans un même projet,
   suffisemment complexe.  Trouver un exemple sympa.
*** PRA
*** Séparation des responsabilités
*** Reporting consolidé
*** avec Vues Matérialisées (plproxy)
** Les nouveautés de PostgreSQL 9.1
*** Extensions
*** SSI
*** Réplication Synchrone
*** AND?
** PostgreSQL, le plein de fonctionnalité
*** Comprendre les tableaux
*** Comprendre les contribs
*** Comprendre le catalogue système
*** Comprendre les “window functions”
*** Comprendre les CTE
*** Comprendre EXPLAIN ANALYZE
** Planifier ses backups

* Expert PostgreSQL.fr
** trouver une ligne éditoriale

* Emacs
** bitlbee 3.0 and ForkDaemon mode
** Setup Gnus for inlining scaled down images in mails
** php -l with C-c C-l
   (defun dim:php-lint ()
     "Run php -l on the current buffer in a *Compile* buffer"
     (interactive)
     (compile (format "php -l %s" (buffer-file-name))))

   ;; we're using php-mode-improved, steal one of its chords
   (define-key php-mode-map (kbd "C-c C-L") 'c-toggle-electric-state)
   (define-key php-mode-map (kbd "C-c C-l") 'dim:php-lint)

** projects integration, emacs-goodies-el, etc
** Portable Emacs with el-get (USB key, win32)
